trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  - main

variables:
  # Build Configuration
  buildConfiguration: 'Release'
  dotNetFramework: 'net8.0'
  dotNetVersion: '8.0.x'
  
  # Build paths
  solutionPath: '**/*.sln'
  webProjectPath: 'CruSibyl.Web/CruSibyl.Web.csproj'
  manifestSyncJobPath: 'CruSibyl.Jobs.ManifestSync/CruSibyl.Jobs.ManifestSync.csproj'
  packageVersionSyncJobPath: 'CruSibyl.Jobs.PackageVersionSync/CruSibyl.Jobs.PackageVersionSync.csproj'
  
  # Cache configuration
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  CI: 'true'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build Solution'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      fetchDepth: 0 # Shallow fetch for performance
    
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotNetVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotNetVersion)'
        includePreviewVersions: false
    
    # Cache NuGet packages
    - task: Cache@2
      displayName: 'Cache NuGet packages'
      inputs:
        key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
        restoreKeys: |
          nuget | "$(Agent.OS)"
          nuget
        path: $(NUGET_PACKAGES)
        cacheHitVar: CACHE_RESTORED
    
    # Cache npm packages
    - task: Cache@2
      displayName: 'Cache npm packages'
      inputs:
        key: 'npm | "$(Agent.OS)" | $(System.DefaultWorkingDirectory)/CruSibyl.Web/Tools/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
          npm
        path: $(System.DefaultWorkingDirectory)/CruSibyl.Web/Tools/node_modules
        cacheHitVar: NPM_CACHE_RESTORED
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solutionPath)'
        feedsToUse: 'select'
        verbosityRestore: 'minimal'
    
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solutionPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
    
    # Placeholder for tests - uncomment and modify when test projects are added
    # - task: DotNetCoreCLI@2
    #   displayName: 'Run tests'
    #   inputs:
    #     command: 'test'
    #     projects: '**/*Tests.csproj'
    #     arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)'
    #   continueOnError: false
    
    # - task: PublishTestResults@2
    #   displayName: 'Publish test results'
    #   condition: succeededOrFailed()
    #   inputs:
    #     testResultsFormat: 'VSTest'
    #     testResultsFiles: '**/*.trx'
    #     searchFolder: '$(Agent.TempDirectory)'
    #     mergeTestResults: true
    #     failTaskOnFailedTests: true
    
    # - task: PublishCodeCoverageResults@1
    #   displayName: 'Publish code coverage'
    #   condition: succeededOrFailed()
    #   inputs:
    #     codeCoverageTool: 'Cobertura'
    #     summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish Web App'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(webProjectPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapp --no-build'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: DotNetCoreCLI@2
      displayName: 'Publish ManifestSync WebJob'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(manifestSyncJobPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapp/App_Data/jobs/triggered/ManifestSync --no-build'
        zipAfterPublish: false
        modifyOutputPath: false
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish PackageVersionSync WebJob'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(packageVersionSyncJobPath)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/webapp/App_Data/jobs/triggered/PackageVersionSync --no-build'
        zipAfterPublish: false
        modifyOutputPath: false
    
    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/webapp'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/CruSibyl.zip'
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/CruSibyl.zip'
        artifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployTest
  displayName: 'Deploy to Test Environment'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy to Test'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Test'  # Azure DevOps environment (with approvals)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          - task: AzureWebApp@1
            displayName: 'Deploy Web App and WebJobs to Test'
            inputs:
              azureSubscription: 'UC Davis CAES Test'
              appType: 'webApp'
              appName: 'CruSibyl-Test'
              package: '$(Pipeline.Workspace)/drop/CruSibyl.zip'
              deploymentMethod: 'auto'

- stage: DeployProduction
  displayName: 'Deploy to Production Environment'
  dependsOn: DeployTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy to Production'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Prod'  # Azure DevOps environment (with approvals)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          
          - task: AzureWebApp@1
            displayName: 'Deploy Web App and WebJobs to Production'
            inputs:
              azureSubscription: 'UC Davis CAES Prod'
              appType: 'webApp'
              appName: 'crusibyl'
              package: '$(Pipeline.Workspace)/drop/CruSibyl.zip'
              deploymentMethod: 'auto'
