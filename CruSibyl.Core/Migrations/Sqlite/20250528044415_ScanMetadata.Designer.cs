// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250528044415_ScanMetadata")]
    partial class ScanMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Major")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Minor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Patch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreRelease")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
