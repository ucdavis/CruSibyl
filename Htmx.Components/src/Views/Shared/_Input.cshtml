@using Htmx.Components.Models
@model IInputModel

@{
    var id = $"{Model.ModelHandler.TypeId}_{Model.Id}";
    var routeValues = new { typeId = Model.ModelHandler.TypeId, modelUI = Model.ModelHandler.ModelUI };
}

    @switch (Model.Kind)
    {
        case InputKind.Number:
        {
            <input name="value" id="@(id)" type="number" step="0.01"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Date:
        {
            <input name="value" id="@(id)" type="date"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Checkbox:
        {
            <input name="value" id="@(id)" type="checkbox"
            class="checkbox checkbox-primary" @(Model.ObjectValue != null && (bool)Model.ObjectValue ? "checked" : "") 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Radio:
        {
            <div class="flex flex-col">
                @foreach (var option in Model.Options ?? [])
                {
                    <label class="label cursor-pointer">
                        <span class="label-text">@option.Key</span>
                        <input name="value" id="@(id)" type="radio" value="@option.Value"
                        class="radio radio-primary" @(Model.Value != null && Model.Value.ToString() == option.Value ? "checked" : "")
                        hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
                    </label>
                }
            </div>
            break;
        }
        case InputKind.Select:
        {
            <select name="value" id="@(id)" 
            class="select select-bordered w-full" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}'>
                @foreach (var option in Model.Options ?? [])
                {
                    <option value="@option.Value" @(Model.Value != null && Model.Value.ToString() == option.Value ? "selected" : "")>@option.Key</option>
                }
            </select>
            break;
        }
        case InputKind.TextArea:
        {
            <textarea name="value" id="@(id)" 
            class="textarea textarea-bordered w-full" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}'>@Html.Encode(Model.Value?.ToString())</textarea>
            break;
        }
        case InputKind.Text:
        default:
        {
            <input name="value" id="@(id)" type="text"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
    }
