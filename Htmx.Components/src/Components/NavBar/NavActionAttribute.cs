namespace Htmx.Components.NavBar;

/// <summary>
/// Marks controllers or controller classes to define navigation action groups.
/// Groups allow related navigation actions to be organized together in dropdown menus
/// or other hierarchical navigation structures.
/// </summary>
/// <remarks>
/// When applied to a controller class, all navigation actions within that controller
/// will be grouped together unless they specify their own group via method-level attributes.
/// The group's display properties can be customized through the various properties.
/// </remarks>
/// <example>
/// <code>
/// [NavActionGroup(DisplayName = "User Management", Icon = "fas fa-users", Order = 10)]
/// public class UserController : Controller
/// {
///     [NavAction]
///     public IActionResult Index() { ... }
/// }
/// </code>
/// </example>
[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
public class NavActionGroupAttribute : Attribute
{
    /// <summary>
    /// Gets or sets the display order of the group relative to other groups or ungrouped actions.
    /// </summary>
    /// <value>An integer used for sorting. Lower values appear first. Default is 0.</value>
    public int Order { get; set; } = 0;

    /// <summary>
    /// Gets or sets the CSS icon class for the group (e.g., "fas fa-users").
    /// </summary>
    /// <value>A CSS class string for the group's icon, or null if no icon should be displayed.</value>
    public string? Icon { get; set; }

    /// <summary>
    /// Gets or sets the display name for the group.
    /// </summary>
    /// <value>The text to display for the group, or null to use a default name.</value>
    public string? DisplayName { get; set; }
}

/// <summary>
/// Marks controller action methods to include them in the application's navigation.
/// Actions marked with this attribute will be automatically discovered and included
/// in navigation components generated by <see cref="NavBar.AttributeNavProvider"/>.
/// </summary>
/// <remarks>
/// The navigation system only includes actions that the current user is authorized to access.
/// Authorization is checked using the standard ASP.NET Core authorization system.
/// </remarks>
/// <example>
/// <code>
/// [NavAction(DisplayName = "Dashboard", Icon = "fas fa-dashboard", Order = 1, PushUrl = true)]
/// public IActionResult Index()
/// {
///     return View();
/// }
/// </code>
/// </example>
[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
public class NavActionAttribute : Attribute
{
    /// <summary>
    /// Gets or sets the display order of the action relative to other actions.
    /// </summary>
    /// <value>An integer used for sorting. Lower values appear first. Default is 0.</value>
    public int Order { get; set; } = 0;

    /// <summary>
    /// Gets or sets the CSS icon class for the action (e.g., "fas fa-edit").
    /// </summary>
    /// <value>A CSS class string for the action's icon, or null if no icon should be displayed.</value>
    public string? Icon { get; set; }

    /// <summary>
    /// Gets or sets the display name for the action.
    /// </summary>
    /// <value>The text to display for the action, or null to use a humanized version of the action name.</value>
    public string? DisplayName { get; set; }

    /// <summary>
    /// Gets or sets the HTTP method to use when invoking the action via HTMX.
    /// </summary>
    /// <value>The HTTP method string (e.g., "GET", "POST"). Default is "GET".</value>
    public string? HttpMethod { get; set; } = "GET";

    /// <summary>
    /// Gets or sets whether the action should update the browser URL when invoked via HTMX.
    /// </summary>
    /// <value>true to update the URL; false to perform the action without URL changes. Default is false.</value>
    public bool PushUrl { get; set; }

    /// <summary>
    /// Gets or sets the view name to render for non-HTMX requests.
    /// </summary>
    /// <value>The name of the view to render, or null to use the default view for the action.</value>
    public string? ViewName { get; set; }
}