This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
CruSibyl.Core/
  Data/
    AppDbContext.cs
    DbInitializer.cs
  Domain/
    Dependency.cs
    EntityType.cs
    Manifest.cs
    Note.cs
    NoteMapping.cs
    Operation.cs
    Package.cs
    PackageVersion.cs
    Permission.cs
    Platform.cs
    PlatformVersion.cs
    Repo.cs
    Resource.cs
    Role.cs
    RoleOperation.cs
    ScanStatus.cs
    Tag.cs
    TagMapping.cs
    User.cs
  Extensions/
    StringExtensions.cs
    UserExtensions.cs
  Migrations/
    Sqlite/
      20231219173950_Initial.cs
      20231219173950_Initial.Designer.cs
      20250319225613_PackageManagement.cs
      20250319225613_PackageManagement.Designer.cs
      20250404163551_DevDependencies.cs
      20250404163551_DevDependencies.Designer.cs
      20250510043306_RoleBasedAccessControl.cs
      20250510043306_RoleBasedAccessControl.Designer.cs
      20250510153204_DontCascade.cs
      20250510153204_DontCascade.Designer.cs
      20250510181426_ResourceOperations.cs
      20250510181426_ResourceOperations.Designer.cs
      20250528044415_ScanMetadata.cs
      20250528044415_ScanMetadata.Designer.cs
      AppDbContextSqliteModelSnapshot.cs
    SqlServer/
      20231219174004_Initial.cs
      20231219174004_Initial.Designer.cs
      20250319225630_PackageManagement.cs
      20250319225630_PackageManagement.Designer.cs
      20250404163600_DevDependencies.cs
      20250404163600_DevDependencies.Designer.cs
      20250510043313_RoleBasedAccessControl.cs
      20250510043313_RoleBasedAccessControl.Designer.cs
      20250510153211_DontCascade.cs
      20250510153211_DontCascade.Designer.cs
      20250510181434_ResourceOperations.cs
      20250510181434_ResourceOperations.Designer.cs
      20250528044420_ScanMetadata.cs
      20250528044420_ScanMetadata.Designer.cs
      AppDbContextSqlServerModelSnapshot.cs
  Models/
    Settings/
      AuthSettings.cs
      GitHubSettings.cs
    AccessPolicies.cs
    PermissionModel.cs
    Result.cs
  Services/
    GitHubService.cs
    IdentityService.cs
    ManifestSyncService.cs
    UserService.cs
  CreateMigration.sh
  CruSibyl.Core.csproj
  ExecuteMigration.sh
CruSibyl.Jobs.Core/
  Properties/
    launchSettings.json
  CruSibyl.Jobs.Core.csproj
  JobBase.cs
  LogConfiguration.cs
  Program.cs
CruSibyl.Jobs.ManifestSync/
  appsettings.json
  CruSibyl.Jobs.ManifestSync.csproj
  Program.cs
  run.cmd
  settings.job
CruSibyl.Web/
  Configuration/
    DBContextConfig.cs
    ModelRegistryConfig.cs
    NavConfig.cs
  Controllers/
    AdminController.cs
    AuthController.cs
    DashboardController.cs
    TabController.cs
  Extensions/
    AuthorizationExtensions.cs
    OidcExtensions.cs
  Middleware/
    Auth/
      PermissionHandler.cs
      PermissionRequirement.cs
      ResourceOperationRegistry.cs
    LogUserNameMiddleware.cs
    SerilogControllerActionFilter.cs
  Pages/
    _ViewImports.cshtml
    Error.cshtml
    Error.cshtml.cs
  Properties/
    launchSettings.json
  Tools/
    .gitignore
    extract-classes.js
    input.css
    package.json
  Views/
    Admin/
      _Content.cshtml
    Auth/
      PopupLogin.cshtml
    Dashboard/
      _Content.cshtml
    Shared/
      _Layout.cshtml
      MainContent.cshtml
    _ViewImports.cshtml
    _ViewStart.cshtml
  wwwroot/
    css/
      .gitignore
    js/
      htmx.min.js
  appsettings.Development.json
  appsettings.json
  CruSibyl.Web.csproj
  Program.cs
  WeatherForecast.cs
Htmx.Components/
  Attributes/
    ModelAttributes.cs
    NavActionAttribute.cs
    TableActionAttributes.cs
  Authorization/
    IPermissionRequirementFactory.cs
    IResourceOperationRegistry.cs
  Components/
    NavBar/
      AttributeNavProvider.cs
      NavBarViewComponent.cs
      NavProvider.cs
    Table/
      TableProvider.cs
      TableViewComponent.cs
  Configuration/
    ModelHandlerAttributeRegistrar.cs
  Controllers/
    FormController.cs
  Extensions/
    ActionContextExtensions.cs
    ApplicationBuilderExtensions.cs
    ExpressionExtensions.cs
    OidcOptionsExtensions.cs
    PageStateExtensions.cs
    ServiceCollectionExtensions.cs
    StringExtensions.cs
  Filters/
    NavActionResultFilter.cs
    OobResultFilterBase.cs
    PageStateOobInjectorFilter.cs
    TableOobEditFilter.cs
    TableOobRefreshFilter.cs
  Input/
    Validation.cs
  Models/
    Builders/
      ActionBuilders.cs
      BuilderBase.cs
      InputModelBuilder.cs
      InputSetBuilder.cs
      ModelHandlerBuilder.cs
      TableColumnModelBuilder.cs
      TableModelBuilder.cs
    Table/
      TableColumnModel.cs
      TableModel.cs
      TableRowContext.cs
      TableState.cs
      TableViewPaths.cs
    ActionModels.cs
    HtmxViewInfo.cs
    InputModels.cs
    IOobTargetable.cs
    ModelHandler.cs
    Result.cs
  Services/
    AuthorizationMetadataService.cs
    ModelRegistry.cs
  State/
    PageState.cs
    PageStateMiddleware.cs
  TagHelpers/
    PageStateTagHelper.cs
  Utilities/
    GenericMethodInvoker.cs
  ViewResults/
    HtmxResultBuilder.cs
    MultiSwapViewResult.cs
  Views/
    Shared/
      Components/
        NavBar/
          Default.cshtml
        Table/
          _Table.cshtml
          _TableActionList.cshtml
          _TableBody.cshtml
          _TableCell.cshtml
          _TableCellActionList.cshtml
          _TableEditClassToggle.cshtml
          _TableFilterDateRange.cshtml
          _TableFilterText.cshtml
          _TableHeader.cshtml
          _TablePagination.cshtml
          _TableRow.cshtml
      _Input.cshtml
      _PageStateHiddenInput.cshtml
  wwwroot/
    css/
      table-overrides.css
    js/
      htmx-auth-retry.js
      page-state-behavior.js
      table-behavior.js
  Constants.cs
  Htmx.Components.csproj
.gitignore
CruSibyl.sln
LICENSE
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="CruSibyl.Core/Domain/EntityType.cs">
namespace CruSibyl.Core.Domain;

public enum EntityType
{
    Repo,
    Project,
    Package,
    Stack
}
</file>

<file path="CruSibyl.Core/Domain/Note.cs">
using System.ComponentModel.DataAnnotations;

namespace CruSibyl.Core.Domain;

public class Note
{
    public int Id { get; set; }

    [Required]
    public string Content { get; set; } = null!;

    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    public List<NoteMapping> Mappings { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Domain/NoteMapping.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(EntityType), nameof(EntityId), nameof(NoteId), IsUnique = true)]
public class NoteMapping
{
    public int Id { get; set; }

    [Required]
    public int NoteId { get; set; }

    [ForeignKey(nameof(NoteId))]
    public Note Note { get; set; } = null!;

    [Required]
    public EntityType EntityType { get; set; }

    public int EntityId { get; set; }
}
</file>

<file path="CruSibyl.Core/Domain/Operation.cs">
namespace CruSibyl.Core.Domain
{
    using System.ComponentModel.DataAnnotations;
    using Microsoft.EntityFrameworkCore;

    [Index(nameof(Name), IsUnique = true)]
    public class Operation
    {
        [Key]
        public int Id { get; set; }

        [MaxLength(50)]
        [Required]
        public string Name { get; set; } = "";

        public List<RoleOperation> Operations { get; set; } = new();
    }
}
</file>

<file path="CruSibyl.Core/Domain/Platform.cs">
using System.ComponentModel.DataAnnotations;

namespace CruSibyl.Core.Domain;

public class Platform
{
    public int Id { get; set; }

    [Required, MaxLength(50)]
    public string Name { get; set; } = null!;

    public List<PlatformVersion> Versions { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Domain/PlatformVersion.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(PlatformId), nameof(Version), IsUnique = true)]
public class PlatformVersion
{
    public int Id { get; set; }

    [Required]
    public int PlatformId { get; set; }

    [ForeignKey(nameof(PlatformId))]
    public Platform Platform { get; set; } = null!;

    [Required, MaxLength(50)]
    public string Version { get; set; } = null!;

    public bool IsLTS { get; set; }
}
</file>

<file path="CruSibyl.Core/Domain/Resource.cs">
namespace CruSibyl.Core.Domain
{
    using System.ComponentModel.DataAnnotations;
    using Microsoft.EntityFrameworkCore;

    [Index(nameof(Name), IsUnique = true)]
    public class Resource
    {
        [Key]
        public int Id { get; set; }

        [MaxLength(50)]
        [Required]
        public string Name { get; set; } = "";

        public List<RoleOperation> Operations { get; set; } = new();
    }
}
</file>

<file path="CruSibyl.Core/Domain/ScanStatus.cs">
namespace CruSibyl.Core.Domain;

public enum ScanStatus
{
    /// <summary>
    /// The scan is currently in progress.
    /// </summary>
    InProgress,

    /// <summary>
    /// The scan has completed successfully.
    /// </summary>
    Completed,

    /// <summary>
    /// The scan has failed due to an error.
    /// </summary>
    Failed,
}
</file>

<file path="CruSibyl.Core/Domain/Tag.cs">
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(Name), IsUnique = true)]
public class Tag
{
    public int Id { get; set; }

    [Required, MaxLength(100)]
    public string Name { get; set; } = null!;

    public List<TagMapping> Mappings { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Domain/TagMapping.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(EntityType), nameof(EntityId), nameof(TagId), IsUnique = true)]
public class TagMapping
{
    public int Id { get; set; }

    [Required]
    public int TagId { get; set; }

    [ForeignKey(nameof(TagId))]
    public Tag Tag { get; set; } = null!;

    [Required]
    public EntityType EntityType { get; set; }

    public int EntityId { get; set; }
}
</file>

<file path="CruSibyl.Core/Extensions/UserExtensions.cs">
using System.Security.Claims;
using CruSibyl.Core.Domain;
using CruSibyl.Core.Services;

namespace CruSibyl.Core.Extensions;
public static class UserExtensions
{
    public static Claim[] GetClaims(this User user)
    {
        return new[]
        {
                new Claim(ClaimTypes.NameIdentifier, user.Kerberos),
                new Claim(ClaimTypes.Name, user.Kerberos),
                new Claim(ClaimTypes.GivenName, user.FirstName),
                new Claim(ClaimTypes.Surname, user.LastName),
                new Claim("name", user.Name),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim(UserService.IamIdClaimType, user.Iam),
            };
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20231219173950_Initial.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    FirstName = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "TEXT", maxLength: 300, nullable: false),
                    Iam = table.Column<string>(type: "TEXT", maxLength: 10, nullable: false),
                    Kerberos = table.Column<string>(type: "TEXT", maxLength: 20, nullable: false),
                    MothraId = table.Column<string>(type: "TEXT", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    RoleId = table.Column<int>(type: "INTEGER", nullable: false),
                    UserId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Permissions_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_RoleId",
                table: "Permissions",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_UserId",
                table: "Permissions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Roles_Name",
                table: "Roles",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Iam",
                table: "Users",
                column: "Iam",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "Roles");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20231219173950_Initial.Designer.cs">
// <auto-generated />
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20231219173950_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250319225613_PackageManagement.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class PackageManagement : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Notes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Content = table.Column<string>(type: "TEXT", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Platforms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Platforms", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Repos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 255, nullable: false),
                    Description = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NoteMappings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    NoteId = table.Column<int>(type: "INTEGER", nullable: false),
                    EntityType = table.Column<int>(type: "INTEGER", nullable: false),
                    EntityId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoteMappings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NoteMappings_Notes_NoteId",
                        column: x => x.NoteId,
                        principalTable: "Notes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Packages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 255, nullable: false),
                    PlatformId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Packages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Packages_Platforms_PlatformId",
                        column: x => x.PlatformId,
                        principalTable: "Platforms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PlatformVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    PlatformId = table.Column<int>(type: "INTEGER", nullable: false),
                    Version = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    IsLTS = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PlatformVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PlatformVersions_Platforms_PlatformId",
                        column: x => x.PlatformId,
                        principalTable: "Platforms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TagMappings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    TagId = table.Column<int>(type: "INTEGER", nullable: false),
                    EntityType = table.Column<int>(type: "INTEGER", nullable: false),
                    EntityId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TagMappings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TagMappings_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PackageVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    PackageId = table.Column<int>(type: "INTEGER", nullable: false),
                    Version = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    IsLatestMinor = table.Column<bool>(type: "INTEGER", nullable: false),
                    IsLatestMajor = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PackageVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PackageVersions_Packages_PackageId",
                        column: x => x.PackageId,
                        principalTable: "Packages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Manifests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    RepoId = table.Column<int>(type: "INTEGER", nullable: false),
                    PlatformVersionId = table.Column<int>(type: "INTEGER", nullable: false),
                    FilePath = table.Column<string>(type: "TEXT", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Manifests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                        column: x => x.PlatformVersionId,
                        principalTable: "PlatformVersions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Manifests_Repos_RepoId",
                        column: x => x.RepoId,
                        principalTable: "Repos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Dependencies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    ManifestId = table.Column<int>(type: "INTEGER", nullable: false),
                    PackageVersionId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dependencies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Dependencies_Manifests_ManifestId",
                        column: x => x.ManifestId,
                        principalTable: "Manifests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Dependencies_PackageVersions_PackageVersionId",
                        column: x => x.PackageVersionId,
                        principalTable: "PackageVersions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Dependencies_ManifestId_PackageVersionId",
                table: "Dependencies",
                columns: new[] { "ManifestId", "PackageVersionId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Dependencies_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId");

            migrationBuilder.CreateIndex(
                name: "IX_Manifests_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId");

            migrationBuilder.CreateIndex(
                name: "IX_Manifests_RepoId_FilePath",
                table: "Manifests",
                columns: new[] { "RepoId", "FilePath" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_NoteMappings_EntityType_EntityId_NoteId",
                table: "NoteMappings",
                columns: new[] { "EntityType", "EntityId", "NoteId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_NoteMappings_NoteId",
                table: "NoteMappings",
                column: "NoteId");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_Name_PlatformId",
                table: "Packages",
                columns: new[] { "Name", "PlatformId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Packages_PlatformId",
                table: "Packages",
                column: "PlatformId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageVersions_PackageId_Version",
                table: "PackageVersions",
                columns: new[] { "PackageId", "Version" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PlatformVersions_PlatformId_Version",
                table: "PlatformVersions",
                columns: new[] { "PlatformId", "Version" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TagMappings_EntityType_EntityId_TagId",
                table: "TagMappings",
                columns: new[] { "EntityType", "EntityId", "TagId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TagMappings_TagId",
                table: "TagMappings",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Name",
                table: "Tags",
                column: "Name",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Dependencies");

            migrationBuilder.DropTable(
                name: "NoteMappings");

            migrationBuilder.DropTable(
                name: "TagMappings");

            migrationBuilder.DropTable(
                name: "Manifests");

            migrationBuilder.DropTable(
                name: "PackageVersions");

            migrationBuilder.DropTable(
                name: "Notes");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "PlatformVersions");

            migrationBuilder.DropTable(
                name: "Repos");

            migrationBuilder.DropTable(
                name: "Packages");

            migrationBuilder.DropTable(
                name: "Platforms");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250319225613_PackageManagement.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250319225613_PackageManagement")]
    partial class PackageManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250404163551_DevDependencies.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class DevDependencies : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "IsDevDependency",
                table: "Dependencies",
                type: "INTEGER",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsDevDependency",
                table: "Dependencies");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250404163551_DevDependencies.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250404163551_DevDependencies")]
    partial class DevDependencies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510043306_RoleBasedAccessControl.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class RoleBasedAccessControl : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "RoleOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Resource = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    Operation = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false),
                    RoleId = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RoleOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RoleOperations_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations",
                columns: new[] { "Resource", "Operation", "RoleId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_RoleId",
                table: "RoleOperations",
                column: "RoleId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "RoleOperations");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510043306_RoleBasedAccessControl.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250510043306_RoleBasedAccessControl")]
    partial class RoleBasedAccessControl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Resource", "Operation", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510153204_DontCascade.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class DontCascade : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings");

            migrationBuilder.DropForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages");

            migrationBuilder.DropForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings");

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies",
                column: "ManifestId",
                principalTable: "Manifests",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId",
                principalTable: "PackageVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId",
                principalTable: "PlatformVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests",
                column: "RepoId",
                principalTable: "Repos",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings",
                column: "NoteId",
                principalTable: "Notes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions",
                column: "PackageId",
                principalTable: "Packages",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings",
                column: "TagId",
                principalTable: "Tags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings");

            migrationBuilder.DropForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages");

            migrationBuilder.DropForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings");

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies",
                column: "ManifestId",
                principalTable: "Manifests",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId",
                principalTable: "PackageVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId",
                principalTable: "PlatformVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests",
                column: "RepoId",
                principalTable: "Repos",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings",
                column: "NoteId",
                principalTable: "Notes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions",
                column: "PackageId",
                principalTable: "Packages",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings",
                column: "TagId",
                principalTable: "Tags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510153204_DontCascade.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250510153204_DontCascade")]
    partial class DontCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Resource", "Operation", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510181426_ResourceOperations.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class ResourceOperations : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "Operation",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "Resource",
                table: "RoleOperations");

            migrationBuilder.AddColumn<int>(
                name: "OperationId",
                table: "RoleOperations",
                type: "INTEGER",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "ResourceId",
                table: "RoleOperations",
                type: "INTEGER",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateTable(
                name: "Operations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Operations", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Resources",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Resources", x => x.Id);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_OperationId",
                table: "RoleOperations",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_ResourceId_OperationId_RoleId",
                table: "RoleOperations",
                columns: new[] { "ResourceId", "OperationId", "RoleId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Operations_Name",
                table: "Operations",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Resources_Name",
                table: "Resources",
                column: "Name",
                unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_RoleOperations_Operations_OperationId",
                table: "RoleOperations",
                column: "OperationId",
                principalTable: "Operations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_RoleOperations_Resources_ResourceId",
                table: "RoleOperations",
                column: "ResourceId",
                principalTable: "Resources",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_RoleOperations_Operations_OperationId",
                table: "RoleOperations");

            migrationBuilder.DropForeignKey(
                name: "FK_RoleOperations_Resources_ResourceId",
                table: "RoleOperations");

            migrationBuilder.DropTable(
                name: "Operations");

            migrationBuilder.DropTable(
                name: "Resources");

            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_OperationId",
                table: "RoleOperations");

            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_ResourceId_OperationId_RoleId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "OperationId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "ResourceId",
                table: "RoleOperations");

            migrationBuilder.AddColumn<string>(
                name: "Operation",
                table: "RoleOperations",
                type: "TEXT",
                maxLength: 50,
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "Resource",
                table: "RoleOperations",
                type: "TEXT",
                maxLength: 50,
                nullable: false,
                defaultValue: "");

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations",
                columns: new[] { "Resource", "Operation", "RoleId" },
                unique: true);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250510181426_ResourceOperations.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250510181426_ResourceOperations")]
    partial class ResourceOperations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250528044415_ScanMetadata.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    /// <inheritdoc />
    public partial class ScanMetadata : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsLatestMajor",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "IsLatestMinor",
                table: "PackageVersions");

            migrationBuilder.AddColumn<DateTime>(
                name: "LastScannedAt",
                table: "Repos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ScanMessage",
                table: "Repos",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanNumber",
                table: "Repos",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanStatus",
                table: "Repos",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Major",
                table: "PackageVersions",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Minor",
                table: "PackageVersions",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Patch",
                table: "PackageVersions",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "PreRelease",
                table: "PackageVersions",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<DateTime>(
                name: "LastScannedAt",
                table: "Packages",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ScanMessage",
                table: "Packages",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanNumber",
                table: "Packages",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanStatus",
                table: "Packages",
                type: "INTEGER",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_Repos_LastScannedAt",
                table: "Repos",
                column: "LastScannedAt");

            migrationBuilder.CreateIndex(
                name: "IX_Repos_Name",
                table: "Repos",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Repos_ScanNumber",
                table: "Repos",
                column: "ScanNumber");

            migrationBuilder.CreateIndex(
                name: "IX_Repos_ScanStatus",
                table: "Repos",
                column: "ScanStatus");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_LastScannedAt",
                table: "Packages",
                column: "LastScannedAt");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_ScanNumber",
                table: "Packages",
                column: "ScanNumber");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_ScanStatus",
                table: "Packages",
                column: "ScanStatus");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Repos_LastScannedAt",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_Name",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_ScanNumber",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_ScanStatus",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Packages_LastScannedAt",
                table: "Packages");

            migrationBuilder.DropIndex(
                name: "IX_Packages_ScanNumber",
                table: "Packages");

            migrationBuilder.DropIndex(
                name: "IX_Packages_ScanStatus",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "LastScannedAt",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanMessage",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanNumber",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanStatus",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "Major",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "Minor",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "Patch",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "PreRelease",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "LastScannedAt",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanMessage",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanNumber",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanStatus",
                table: "Packages");

            migrationBuilder.AddColumn<bool>(
                name: "IsLatestMajor",
                table: "PackageVersions",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<bool>(
                name: "IsLatestMinor",
                table: "PackageVersions",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/20250528044415_ScanMetadata.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    [Migration("20250528044415_ScanMetadata")]
    partial class ScanMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Major")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Minor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Patch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreRelease")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20231219174004_Initial.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Roles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: false),
                    Iam = table.Column<string>(type: "nvarchar(10)", maxLength: 10, nullable: false),
                    Kerberos = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false),
                    MothraId = table.Column<string>(type: "nvarchar(20)", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Permissions_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_RoleId",
                table: "Permissions",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_UserId",
                table: "Permissions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Roles_Name",
                table: "Roles",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Iam",
                table: "Users",
                column: "Iam",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "Roles");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250319225630_PackageManagement.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class PackageManagement : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Notes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Platforms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Platforms", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Repos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NoteMappings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NoteId = table.Column<int>(type: "int", nullable: false),
                    EntityType = table.Column<int>(type: "int", nullable: false),
                    EntityId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NoteMappings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NoteMappings_Notes_NoteId",
                        column: x => x.NoteId,
                        principalTable: "Notes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Packages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    PlatformId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Packages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Packages_Platforms_PlatformId",
                        column: x => x.PlatformId,
                        principalTable: "Platforms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PlatformVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PlatformId = table.Column<int>(type: "int", nullable: false),
                    Version = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsLTS = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PlatformVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PlatformVersions_Platforms_PlatformId",
                        column: x => x.PlatformId,
                        principalTable: "Platforms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TagMappings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TagId = table.Column<int>(type: "int", nullable: false),
                    EntityType = table.Column<int>(type: "int", nullable: false),
                    EntityId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TagMappings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TagMappings_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PackageVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PackageId = table.Column<int>(type: "int", nullable: false),
                    Version = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    IsLatestMinor = table.Column<bool>(type: "bit", nullable: false),
                    IsLatestMajor = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PackageVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PackageVersions_Packages_PackageId",
                        column: x => x.PackageId,
                        principalTable: "Packages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Manifests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepoId = table.Column<int>(type: "int", nullable: false),
                    PlatformVersionId = table.Column<int>(type: "int", nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(500)", maxLength: 500, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Manifests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                        column: x => x.PlatformVersionId,
                        principalTable: "PlatformVersions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Manifests_Repos_RepoId",
                        column: x => x.RepoId,
                        principalTable: "Repos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Dependencies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ManifestId = table.Column<int>(type: "int", nullable: false),
                    PackageVersionId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dependencies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Dependencies_Manifests_ManifestId",
                        column: x => x.ManifestId,
                        principalTable: "Manifests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Dependencies_PackageVersions_PackageVersionId",
                        column: x => x.PackageVersionId,
                        principalTable: "PackageVersions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Dependencies_ManifestId_PackageVersionId",
                table: "Dependencies",
                columns: new[] { "ManifestId", "PackageVersionId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Dependencies_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId");

            migrationBuilder.CreateIndex(
                name: "IX_Manifests_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId");

            migrationBuilder.CreateIndex(
                name: "IX_Manifests_RepoId_FilePath",
                table: "Manifests",
                columns: new[] { "RepoId", "FilePath" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_NoteMappings_EntityType_EntityId_NoteId",
                table: "NoteMappings",
                columns: new[] { "EntityType", "EntityId", "NoteId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_NoteMappings_NoteId",
                table: "NoteMappings",
                column: "NoteId");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_Name_PlatformId",
                table: "Packages",
                columns: new[] { "Name", "PlatformId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Packages_PlatformId",
                table: "Packages",
                column: "PlatformId");

            migrationBuilder.CreateIndex(
                name: "IX_PackageVersions_PackageId_Version",
                table: "PackageVersions",
                columns: new[] { "PackageId", "Version" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PlatformVersions_PlatformId_Version",
                table: "PlatformVersions",
                columns: new[] { "PlatformId", "Version" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TagMappings_EntityType_EntityId_TagId",
                table: "TagMappings",
                columns: new[] { "EntityType", "EntityId", "TagId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_TagMappings_TagId",
                table: "TagMappings",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_Tags_Name",
                table: "Tags",
                column: "Name",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Dependencies");

            migrationBuilder.DropTable(
                name: "NoteMappings");

            migrationBuilder.DropTable(
                name: "TagMappings");

            migrationBuilder.DropTable(
                name: "Manifests");

            migrationBuilder.DropTable(
                name: "PackageVersions");

            migrationBuilder.DropTable(
                name: "Notes");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "PlatformVersions");

            migrationBuilder.DropTable(
                name: "Repos");

            migrationBuilder.DropTable(
                name: "Packages");

            migrationBuilder.DropTable(
                name: "Platforms");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250319225630_PackageManagement.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250319225630_PackageManagement")]
    partial class PackageManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250404163600_DevDependencies.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class DevDependencies : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<bool>(
                name: "IsDevDependency",
                table: "Dependencies",
                type: "bit",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsDevDependency",
                table: "Dependencies");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250404163600_DevDependencies.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250404163600_DevDependencies")]
    partial class DevDependencies
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510043313_RoleBasedAccessControl.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class RoleBasedAccessControl : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "RoleOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Resource = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Operation = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    RoleId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RoleOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RoleOperations_Roles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "Roles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations",
                columns: new[] { "Resource", "Operation", "RoleId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_RoleId",
                table: "RoleOperations",
                column: "RoleId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "RoleOperations");
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510043313_RoleBasedAccessControl.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250510043313_RoleBasedAccessControl")]
    partial class RoleBasedAccessControl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Resource", "Operation", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510153211_DontCascade.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class DontCascade : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings");

            migrationBuilder.DropForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages");

            migrationBuilder.DropForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings");

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies",
                column: "ManifestId",
                principalTable: "Manifests",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId",
                principalTable: "PackageVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId",
                principalTable: "PlatformVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests",
                column: "RepoId",
                principalTable: "Repos",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings",
                column: "NoteId",
                principalTable: "Notes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions",
                column: "PackageId",
                principalTable: "Packages",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings",
                column: "TagId",
                principalTable: "Tags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests");

            migrationBuilder.DropForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings");

            migrationBuilder.DropForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages");

            migrationBuilder.DropForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions");

            migrationBuilder.DropForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings");

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_Manifests_ManifestId",
                table: "Dependencies",
                column: "ManifestId",
                principalTable: "Manifests",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Dependencies_PackageVersions_PackageVersionId",
                table: "Dependencies",
                column: "PackageVersionId",
                principalTable: "PackageVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_PlatformVersions_PlatformVersionId",
                table: "Manifests",
                column: "PlatformVersionId",
                principalTable: "PlatformVersions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Manifests_Repos_RepoId",
                table: "Manifests",
                column: "RepoId",
                principalTable: "Repos",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_NoteMappings_Notes_NoteId",
                table: "NoteMappings",
                column: "NoteId",
                principalTable: "Notes",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_Packages_Platforms_PlatformId",
                table: "Packages",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_PackageVersions_Packages_PackageId",
                table: "PackageVersions",
                column: "PackageId",
                principalTable: "Packages",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_PlatformVersions_Platforms_PlatformId",
                table: "PlatformVersions",
                column: "PlatformId",
                principalTable: "Platforms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_TagMappings_Tags_TagId",
                table: "TagMappings",
                column: "TagId",
                principalTable: "Tags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510153211_DontCascade.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250510153211_DontCascade")]
    partial class DontCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Resource", "Operation", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510181434_ResourceOperations.cs">
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class ResourceOperations : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "Operation",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "Resource",
                table: "RoleOperations");

            migrationBuilder.AddColumn<int>(
                name: "OperationId",
                table: "RoleOperations",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "ResourceId",
                table: "RoleOperations",
                type: "int",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateTable(
                name: "Operations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Operations", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Resources",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Resources", x => x.Id);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_OperationId",
                table: "RoleOperations",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_ResourceId_OperationId_RoleId",
                table: "RoleOperations",
                columns: new[] { "ResourceId", "OperationId", "RoleId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Operations_Name",
                table: "Operations",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Resources_Name",
                table: "Resources",
                column: "Name",
                unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_RoleOperations_Operations_OperationId",
                table: "RoleOperations",
                column: "OperationId",
                principalTable: "Operations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_RoleOperations_Resources_ResourceId",
                table: "RoleOperations",
                column: "ResourceId",
                principalTable: "Resources",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_RoleOperations_Operations_OperationId",
                table: "RoleOperations");

            migrationBuilder.DropForeignKey(
                name: "FK_RoleOperations_Resources_ResourceId",
                table: "RoleOperations");

            migrationBuilder.DropTable(
                name: "Operations");

            migrationBuilder.DropTable(
                name: "Resources");

            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_OperationId",
                table: "RoleOperations");

            migrationBuilder.DropIndex(
                name: "IX_RoleOperations_ResourceId_OperationId_RoleId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "OperationId",
                table: "RoleOperations");

            migrationBuilder.DropColumn(
                name: "ResourceId",
                table: "RoleOperations");

            migrationBuilder.AddColumn<string>(
                name: "Operation",
                table: "RoleOperations",
                type: "nvarchar(50)",
                maxLength: 50,
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<string>(
                name: "Resource",
                table: "RoleOperations",
                type: "nvarchar(50)",
                maxLength: 50,
                nullable: false,
                defaultValue: "");

            migrationBuilder.CreateIndex(
                name: "IX_RoleOperations_Resource_Operation_RoleId",
                table: "RoleOperations",
                columns: new[] { "Resource", "Operation", "RoleId" },
                unique: true);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250510181434_ResourceOperations.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250510181434_ResourceOperations")]
    partial class ResourceOperations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLatestMajor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLatestMinor")
                        .HasColumnType("bit");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250528044420_ScanMetadata.cs">
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    /// <inheritdoc />
    public partial class ScanMetadata : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsLatestMajor",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "IsLatestMinor",
                table: "PackageVersions");

            migrationBuilder.AddColumn<DateTime>(
                name: "LastScannedAt",
                table: "Repos",
                type: "datetime2",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ScanMessage",
                table: "Repos",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanNumber",
                table: "Repos",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanStatus",
                table: "Repos",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Major",
                table: "PackageVersions",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Minor",
                table: "PackageVersions",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Patch",
                table: "PackageVersions",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "PreRelease",
                table: "PackageVersions",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<DateTime>(
                name: "LastScannedAt",
                table: "Packages",
                type: "datetime2",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ScanMessage",
                table: "Packages",
                type: "nvarchar(max)",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanNumber",
                table: "Packages",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "ScanStatus",
                table: "Packages",
                type: "int",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_Repos_LastScannedAt",
                table: "Repos",
                column: "LastScannedAt");

            migrationBuilder.CreateIndex(
                name: "IX_Repos_Name",
                table: "Repos",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Repos_ScanNumber",
                table: "Repos",
                column: "ScanNumber");

            migrationBuilder.CreateIndex(
                name: "IX_Repos_ScanStatus",
                table: "Repos",
                column: "ScanStatus");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_LastScannedAt",
                table: "Packages",
                column: "LastScannedAt");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_ScanNumber",
                table: "Packages",
                column: "ScanNumber");

            migrationBuilder.CreateIndex(
                name: "IX_Packages_ScanStatus",
                table: "Packages",
                column: "ScanStatus");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "IX_Repos_LastScannedAt",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_Name",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_ScanNumber",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Repos_ScanStatus",
                table: "Repos");

            migrationBuilder.DropIndex(
                name: "IX_Packages_LastScannedAt",
                table: "Packages");

            migrationBuilder.DropIndex(
                name: "IX_Packages_ScanNumber",
                table: "Packages");

            migrationBuilder.DropIndex(
                name: "IX_Packages_ScanStatus",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "LastScannedAt",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanMessage",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanNumber",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "ScanStatus",
                table: "Repos");

            migrationBuilder.DropColumn(
                name: "Major",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "Minor",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "Patch",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "PreRelease",
                table: "PackageVersions");

            migrationBuilder.DropColumn(
                name: "LastScannedAt",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanMessage",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanNumber",
                table: "Packages");

            migrationBuilder.DropColumn(
                name: "ScanStatus",
                table: "Packages");

            migrationBuilder.AddColumn<bool>(
                name: "IsLatestMajor",
                table: "PackageVersions",
                type: "bit",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<bool>(
                name: "IsLatestMinor",
                table: "PackageVersions",
                type: "bit",
                nullable: false,
                defaultValue: false);
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20250528044420_ScanMetadata.Designer.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20250528044420_ScanMetadata")]
    partial class ScanMetadata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("Patch")
                        .HasColumnType("int");

                    b.Property<string>("PreRelease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Models/AccessPolicies.cs">
using CruSibyl.Core.Domain;

namespace CruSibyl.Core.Models;

public static class AccessPolicies
{
    public const string SystemAccess = "SystemAccess";
    public const string AdminAccess = "AdminAccess";


    public static string[] GetRoles(string accessPolicy)
    {
        return accessPolicy switch
        {
            SystemAccess => [Role.Codes.System],
            AdminAccess => [Role.Codes.System, Role.Codes.Admin],
            _ => throw new ArgumentException("Invalid access policy", nameof(accessPolicy))
        };
    }
}
</file>

<file path="CruSibyl.Core/Models/PermissionModel.cs">
namespace CruSibyl.Core.Models;

public class PermissionModel
{
    public string Role { get; set; } = "";
}
</file>

<file path="CruSibyl.Core/ExecuteMigration.sh">
dotnet ef database update --startup-project ../CruSibyl.Web/CruSibyl.Web.csproj --context AppDbContextSqlServer
# dotnet ef database update --startup-project ../CruSibyl.Web/CruSibyl.Web.csproj --context AppDbContextSqlite
# usage from PM console in the CruSibyl.Core directory: ./ExecuteMigration.sh

echo 'All done';
</file>

<file path="CruSibyl.Jobs.Core/Properties/launchSettings.json">
{
  "profiles": {
    "CruSibyl.Jobs.Core": {
      "commandName": "Project",
      "environmentVariables": {
        "Key": "Value",
        "ASPNETCORE_ENVIRONMENT": "development"
      }
    }
  }
}
</file>

<file path="CruSibyl.Jobs.Core/CruSibyl.Jobs.Core.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\CruSibyl.Core\CruSibyl.Core.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <UserSecretsId>5fa41bbc-8416-4e4f-9b42-08fbf7dccc8d</UserSecretsId>
  </PropertyGroup>

</Project>
</file>

<file path="CruSibyl.Jobs.Core/JobBase.cs">
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.Extensions.Configuration;

namespace CruSibyl.Jobs.Core
{
    public abstract class JobBase
    {
        public static IConfigurationRoot Configuration { get; set; } = null!;

        protected static void Configure(string? jobName, Guid? jobId)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json");

            var environmentName = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");

            if (string.Equals(environmentName, "development", StringComparison.OrdinalIgnoreCase))
            {
                builder.AddUserSecrets<JobBase>();
            }

            builder.AddEnvironmentVariables();
            Configuration = builder.Build();

            LogConfiguration.Setup(Configuration, jobName, jobId); 
        }
    }
}
</file>

<file path="CruSibyl.Jobs.Core/LogConfiguration.cs">
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using Microsoft.Extensions.Configuration;
using Serilog;
using Serilog.Events;
using Serilog.Exceptions;
using Serilog.Exceptions.Core;
using Serilog.Exceptions.EntityFrameworkCore.Destructurers;
using Serilog.Sinks.Elasticsearch;

namespace CruSibyl.Jobs.Core
{
    public static class LogConfiguration
    {
        private static bool _loggingSetup;

        private static IConfigurationRoot _configuration = null!;

        public static void Setup(IConfigurationRoot configuration, string? jobName, Guid? jobId)
        {
            if (_loggingSetup) return;

            // save configuration for later calls
            _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

            // create global logger with standard configuration
            Log.Logger = GetConfiguration()
                .CreateLogger()
                .ForContext("jobname", jobName ?? Assembly.GetEntryAssembly()?.GetName().Name)
                .ForContext("jobid", jobId ?? Guid.NewGuid());

            AppDomain.CurrentDomain.UnhandledException += (sender, e) => Log.Fatal(e.ExceptionObject as Exception, e.ExceptionObject?.ToString() ?? "");

            AppDomain.CurrentDomain.ProcessExit += (sender, e) => Log.CloseAndFlush();

#if DEBUG
            Serilog.Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg));
#endif

            _loggingSetup = true;
        }

        /// <summary>
        /// Get a logger configuration that logs to stackify
        /// </summary>
        /// <returns></returns>
        public static LoggerConfiguration GetConfiguration()
        {
            if (_configuration == null) throw new InvalidOperationException("Call Setup() before requesting a Logger Configuration"); ;

            // standard logger
            var logConfig = new LoggerConfiguration()
                .MinimumLevel.Debug()
                .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
                // .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Warning) // uncomment this to hide EF core general info logs
                .MinimumLevel.Override("System", LogEventLevel.Warning)
                .Enrich.FromLogContext()
                .Enrich.WithExceptionDetails(new DestructuringOptionsBuilder()
                    .WithDefaultDestructurers()
                    .WithDestructurers(new[] { new DbUpdateExceptionDestructurer() }));

            // various sinks
            logConfig = logConfig
                .WriteTo.Console()
                .WriteToElasticSearchCustom();

            return logConfig;
        }

        private static LoggerConfiguration WriteToElasticSearchCustom(this LoggerConfiguration logConfig)
        {
            // get logging config for ES endpoint (re-use some stackify settings for now)
            var loggingSection = _configuration.GetSection("Serilog");

            var esUrl = loggingSection.GetValue<string>("ElasticUrl"); //logging

            // only continue if a valid http url is setup in the config
            if (esUrl == null || !esUrl.StartsWith("http"))
            {
                return logConfig;
            }

            logConfig.Enrich.WithProperty("Application", loggingSection.GetValue<string>("AppName"));
            logConfig.Enrich.WithProperty("AppEnvironment", loggingSection.GetValue<string>("Environment"));

            if (Uri.TryCreate(esUrl, UriKind.Absolute, out var elasticUri))
            {
                return logConfig.WriteTo.Elasticsearch(new ElasticsearchSinkOptions(elasticUri)
                {
                    IndexFormat = "aspnet-CruSibyl-{0:yyyy.MM}",
                    TypeName = null
                });
            }

            throw new Exception("Couldn't get log configured");
        }
    }
}
</file>

<file path="CruSibyl.Jobs.Core/Program.cs">
// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");
</file>

<file path="CruSibyl.Jobs.ManifestSync/CruSibyl.Jobs.ManifestSync.csproj">
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.14">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.14" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\CruSibyl.Core\CruSibyl.Core.csproj" />
    <ProjectReference Include="..\CruSibyl.Jobs.Core\CruSibyl.Jobs.Core.csproj" />
  </ItemGroup>
  <ItemGroup>
    <None Update="appsettings.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="settings.job">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="run.cmd">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>
</Project>
</file>

<file path="CruSibyl.Jobs.ManifestSync/run.cmd">
@echo off

dotnet CruSibyl.Jobs.ManifestSync.dll
</file>

<file path="CruSibyl.Jobs.ManifestSync/settings.job">
{
  "schedule": "0 */15 * * * *"
}
</file>

<file path="CruSibyl.Web/Configuration/DBContextConfig.cs">
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Web.Configuration;

public static class DBContextConfig
{
    public static void Configure(WebApplicationBuilder appBuilder, out bool migrationScaffoldRequested)
    {
        // Migration scaffolding in EF Core 8 appears to instantiate a DbContext, so we're using
        // an environment variable set by CreateMigration.sh to ensure the correct provider is used.
        var migrationUseSql = appBuilder.Configuration.GetValue<bool?>("Migration:UseSql");
        var useSql = migrationUseSql.HasValue ? migrationUseSql.Value : appBuilder.Configuration.GetValue<bool>("Dev:UseSql");

        if (useSql)
        {
            appBuilder.Services.AddDbContextPool<AppDbContext, AppDbContextSqlServer>(ConfigSqlServer(appBuilder));
            appBuilder.Services.AddDbContextFactory<AppDbContextSqlServer>(ConfigSqlServer(appBuilder));
            appBuilder.Services.AddScoped<IDbContextFactory<AppDbContext>>(sp =>
                new DbContextFactoryAdapter<AppDbContextSqlServer>(sp.GetRequiredService<IDbContextFactory<AppDbContextSqlServer>>()));
        }
        else
        {
            appBuilder.Services.AddDbContextPool<AppDbContext, AppDbContextSqlite>(ConfigSqlite(appBuilder));
            appBuilder.Services.AddDbContextFactory<AppDbContextSqlite>(ConfigSqlite(appBuilder));
            appBuilder.Services.AddScoped<IDbContextFactory<AppDbContext>>(sp =>
                new DbContextFactoryAdapter<AppDbContextSqlite>(sp.GetRequiredService<IDbContextFactory<AppDbContextSqlite>>()));
        }

        // A null value indicates that no migration scaffold has been requested.
        migrationScaffoldRequested = migrationUseSql.HasValue;
    }

    static Action<IServiceProvider, DbContextOptionsBuilder> ConfigSqlServer(WebApplicationBuilder builder)
    {
        return (serviceProvider, o) =>
        {
            o.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"),
                sqlOptions =>
                {
                    sqlOptions.MigrationsAssembly("CruSibyl.Core");
                });
#if DEBUG
            o.EnableSensitiveDataLogging();
#endif
        };
    }

    static Action<IServiceProvider, DbContextOptionsBuilder> ConfigSqlite(WebApplicationBuilder builder)
    {
        return (serviceProvider, o) =>
        {
            o.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection"),
                sqliteOptions =>
                {
                    sqliteOptions.MigrationsAssembly("CruSibyl.Core");
                });

#if DEBUG
            o.EnableSensitiveDataLogging();
#endif
        };
    }


}
</file>

<file path="CruSibyl.Web/Configuration/ModelRegistryConfig.cs">
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using Htmx.Components;
using Htmx.Components.Services;

namespace CruSibyl.Web.Configuration;

public static class ModelRegistryConfig
{
    public static Action<IModelRegistry> RegisterModels => registry =>
    {
        RegisterRepo(registry);
    };

    private static void RegisterRepo(IModelRegistry registry)
    {
        registry.Register<Repo, int>(nameof(Repo), (serviceProvider, builder) =>
        {
            var dbContext = serviceProvider.GetRequiredService<AppDbContext>();
            builder
                .WithKeySelector(r => r.Id)
                .WithQueryable(() => dbContext.Repos)
                .WithCreate(async repo =>
                {
                    dbContext.Repos.Add(repo);
                    await dbContext.SaveChangesAsync();
                    return Htmx.Components.Models.Result.Ok();
                })
                .WithUpdate(async repo =>
                {
                    dbContext.Repos.Update(repo);
                    await dbContext.SaveChangesAsync();
                    return Htmx.Components.Models.Result.Ok();
                })
                .WithDelete(async id =>
                {
                    var repo = await dbContext.Repos.FindAsync(id);
                    if (repo != null)
                    {
                        dbContext.Repos.Remove(repo);
                        await dbContext.SaveChangesAsync();
                        return Htmx.Components.Models.Result.Ok();
                    }
                    return Htmx.Components.Models.Result.Error("Repo not found");
                })
                .WithInput(r => r.Name, config => config
                    .WithLabel("Name")
                    .WithPlaceholder("Enter repo name")
                    .WithCssClass("form-control"))
                .WithInput(r => r.Description, config => config
                    .WithLabel("Description")
                    .WithPlaceholder("Enter repo description")
                    .WithCssClass("form-control"))
                .WithTable(table => table
                    .WithCrudActions()
                    .AddSelectorColumn("Name", x => x.Name, config => config
                        .WithEditable()
                        .WithFilter((q, val) => q.Where(x => x.Name.Contains(val))))
                    .AddSelectorColumn("Description", x => x.Description!, config => config
                        .WithEditable())
                    .AddCrudDisplayColumn());
        });
    }
}
</file>

<file path="CruSibyl.Web/Controllers/AuthController.cs">
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace CruSibyl.Web.Controllers;

[Authorize]
public class AuthController : Controller
{

    [Authorize]
    [HttpGet("/auth/popup-login")]
    public IActionResult PopupLogin()
    {
        // If this executes, the user is already authenticated, so we return a view that posts
        // a "login-success" message to the parent window and closes itself.
        return View();
    }
}
</file>

<file path="CruSibyl.Web/Extensions/OidcExtensions.cs">
using System.Security.Claims;
using CruSibyl.Core.Services;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Serilog;

namespace CruSibyl.Web.Extensions;

public static class OidcExtensions
{
    public static void AddIamFallback(this OpenIdConnectOptions oidc)
    {
        oidc.Events.OnTicketReceived = async context =>
        {
            if (context.Principal == null || context.Principal.Identity == null)
            {
                return;
            }
            var identity = (ClaimsIdentity)context.Principal.Identity;

            // Sometimes CAS doesn't return the required IAM ID
            // If this happens, we take the reliable Kerberos (NameIdentifier claim) and use it to lookup IAM ID
            if (!identity.HasClaim(c => c.Type == UserService.IamIdClaimType) ||
                !identity.HasClaim(c => c.Type == ClaimTypes.Surname) ||
                !identity.HasClaim(c => c.Type == ClaimTypes.GivenName) ||
                !identity.HasClaim(c => c.Type == ClaimTypes.Email))
            {
                var identityService = context.HttpContext.RequestServices.GetRequiredService<IIdentityService>();
                var kerbId = identity.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
                if (kerbId != null)
                {
                    Log.Error($"CAS IAM Id Missing. For Kerb: {kerbId}");
                    var identityUser = await identityService.GetByKerberos(kerbId.Value);

                    if (identityUser != null)
                    {
                        if (!identity.HasClaim(c => c.Type == UserService.IamIdClaimType))
                        {
                            identity.AddClaim(new Claim(UserService.IamIdClaimType, identityUser.Iam));
                        }
                        //Check for other missing claims
                        if (!identity.HasClaim(c => c.Type == ClaimTypes.Surname))
                        {
                            identity.AddClaim(new Claim(ClaimTypes.Surname, identityUser.LastName));
                        }
                        if (!identity.HasClaim(c => c.Type == ClaimTypes.GivenName))
                        {
                            identity.AddClaim(new Claim(ClaimTypes.GivenName, identityUser.FirstName));
                        }
                        if (!identity.HasClaim(c => c.Type == ClaimTypes.Email))
                        {
                            identity.AddClaim(new Claim(ClaimTypes.Email, identityUser.Email));
                        }
                    }
                    else
                    {
                        Log.Error($"IAM Id Not Found with identity service. For Kerb: {kerbId}");
                    }
                }
                else
                {
                    Log.Error($"CAS IAM Id Missing. Kerb Not Found");
                }
            }

            // Ensure user exists in the db
            var userService = context.HttpContext.RequestServices.GetRequiredService<IUserService>();
            await userService.GetUser(identity.Claims.ToArray());
        };
    }
}
</file>

<file path="CruSibyl.Web/Middleware/Auth/PermissionHandler.cs">
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using CruSibyl.Core.Models;
using CruSibyl.Core.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace CruSibyl.Web.Middleware.Auth;

public class PermissionHandler : AuthorizationHandler<PermissionRequirement>
{
    private readonly AppDbContext _dbContext;

    public PermissionHandler(AppDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)
    {
        var userIamId = context.User.Claims.SingleOrDefault(c => c.Type == "ucdPersonIAMID")?.Value;

        if (string.IsNullOrWhiteSpace(userIamId))
            return;

        // Check if the user is a system admin
        var isSystemAdmin = await _dbContext.Permissions
            .Include(p => p.Role)
            .AnyAsync(p =>
                p.User.Iam == userIamId &&
                p.Role.Name == Role.Codes.System);
        if (isSystemAdmin)
        {
            context.Succeed(requirement);
            return;
        }

        // Simple role check
        if (requirement.AllowedRoles != null && requirement.AllowedRoles.Count > 0)
        {
            var hasRole = await _dbContext.Permissions
                .Include(p => p.Role)
                .AnyAsync(p =>
                    p.User.Iam == userIamId &&
                    requirement.AllowedRoles.Contains(p.Role.Name));
            if (hasRole)
            {
                context.Succeed(requirement);
                return;
            }
        }

        // RBAC check (Resource + Operation)
        if (!string.IsNullOrEmpty(requirement.Resource) && !string.IsNullOrEmpty(requirement.Operation))
        {
            // Get all roles for this user
            var hasRoleWithResourceAccess = await _dbContext.Permissions
                .Where(p => p.User.Iam == userIamId
                    && p.Role.Operations
                        .Any(o => o.Resource.Name == requirement.Resource && o.Operation.Name == requirement.Operation))
                .AnyAsync();
            if (hasRoleWithResourceAccess)
            {
                context.Succeed(requirement);
                return;
            }
        }
    }
}
</file>

<file path="CruSibyl.Web/Middleware/Auth/PermissionRequirement.cs">
using Htmx.Components.Authorization;
using Microsoft.AspNetCore.Authorization;

namespace CruSibyl.Web.Middleware.Auth;

public class PermissionRequirement : IAuthorizationRequirement
{
    public IReadOnlyList<string>? AllowedRoles { get; }
    public string? Resource { get; }
    public string? Operation { get; }

    private PermissionRequirement(IReadOnlyList<string>? allowedRoles, string? typeId, string? operation)
    {
        AllowedRoles = allowedRoles;
        Resource = typeId;
        Operation = operation;
    }

    // Factory for role check
    public static PermissionRequirement ForRoles(params string[] roles) =>
        new PermissionRequirement(roles, null, null);

    // Factory for model-operation check
    public static PermissionRequirement ForOperation(string resource, string operation) =>
        new PermissionRequirement(null, resource, operation);
}

/// <summary>
/// Factory for creating permission requirements, needed by Htmx.Components
/// </summary>
public class PermissionRequirementFactory : IPermissionRequirementFactory
{
    public IAuthorizationRequirement ForOperation(string resource, string operation)
        => PermissionRequirement.ForOperation(resource, operation);

    public IAuthorizationRequirement ForRoles(params string[] roles)
        => PermissionRequirement.ForRoles(roles);
}
</file>

<file path="CruSibyl.Web/Middleware/LogUserNameMiddleware.cs">
using System.Threading.Tasks;
using Serilog.Context;

namespace CruSibyl.Web.Middleware;

public class LogUserNameMiddleware
{
    private readonly RequestDelegate _next;

    public LogUserNameMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task Invoke(HttpContext context)
    {
        using (LogContext.PushProperty("User", context?.User?.Identity?.Name ?? "anonymous"))
        {
            if (context != null)
            {
                await _next(context);
            }
        }
    }
}
</file>

<file path="CruSibyl.Web/Middleware/SerilogControllerActionFilter.cs">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Filters;
using Serilog;

namespace CruSibyl.Web.Middleware;

public class SerilogControllerActionFilter : IActionFilter
{
    private readonly IDiagnosticContext _diagnosticContext;
    public SerilogControllerActionFilter(IDiagnosticContext diagnosticContext)
    {
        _diagnosticContext = diagnosticContext;
    }

    public void OnActionExecuting(ActionExecutingContext context)
    {
        _diagnosticContext.Set("RouteData", context.ActionDescriptor.RouteValues);
        _diagnosticContext.Set("ActionName", context.ActionDescriptor.DisplayName);
        _diagnosticContext.Set("ActionId", context.ActionDescriptor.Id);
        _diagnosticContext.Set("ValidationState", context.ModelState.IsValid);
    }

    public void OnActionExecuted(ActionExecutedContext context)
    {
        var httpContext = context.HttpContext;
        var request = httpContext.Request;

        // Set all the common properties available for every request
        _diagnosticContext.Set("Host", request.Host);
        _diagnosticContext.Set("Protocol", request.Protocol);
        _diagnosticContext.Set("Scheme", request.Scheme);

        // Only set it if available. You're not sending sensitive data in a querystring right?!
        if (request.QueryString.HasValue)
        {
            _diagnosticContext.Set("QueryString", request.QueryString.Value);
        }

        // Set the content-type of the Response at this point
        _diagnosticContext.Set("ResponseContentType", httpContext.Response.ContentType);

        // Retrieve the IEndpointFeature selected for the request
        var endpoint = httpContext.GetEndpoint();
        if (endpoint is object) // endpoint != null
        {
            _diagnosticContext.Set("EndpointName", endpoint.DisplayName);
        }

    }
}
</file>

<file path="CruSibyl.Web/Pages/_ViewImports.cshtml">
@using CruSibyl.Web
@namespace CruSibyl.Web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
</file>

<file path="CruSibyl.Web/Pages/Error.cshtml">
@page
@model ErrorModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to the <strong>Development</strong> environment displays detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>
</file>

<file path="CruSibyl.Web/Pages/Error.cshtml.cs">
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace CruSibyl.Web.Pages;

[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
public class ErrorModel : PageModel
{
    private readonly ILogger<ErrorModel> _logger;

    public ErrorModel(ILogger<ErrorModel> logger)
    {
        _logger = logger;
    }

    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    public void OnGet()
    {
        RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
    }
}
</file>

<file path="CruSibyl.Web/Views/Auth/PopupLogin.cshtml">
<!DOCTYPE html>
<html>
<head>
    <title>Login Success</title>
</head>
<body>
    <script>
        // Notify the opener window and close the popup
        window.opener?.postMessage('login-success', '*');
        window.close();
    </script>
</body>
</html>
</file>

<file path="CruSibyl.Web/Views/Shared/MainContent.cshtml">
@{
    ViewData["Title"] = "Tabbed App";
}

@await Html.PartialAsync(ViewData["InitialMainPartial"]?.ToString() ?? "FallbackPartial", ViewData["InitialMainModel"])
</file>

<file path="CruSibyl.Web/Views/_ViewStart.cshtml">
@{
    Layout = "_Layout";
}
</file>

<file path="CruSibyl.Web/wwwroot/css/.gitignore">
# tailwind-generated css
site.css
</file>

<file path="CruSibyl.Web/wwwroot/js/htmx.min.js">
var htmx=function(){"use strict";const Q={onLoad:null,process:null,on:null,off:null,trigger:null,ajax:null,find:null,findAll:null,closest:null,values:function(e,t){const n=cn(e,t||"post");return n.values},remove:null,addClass:null,removeClass:null,toggleClass:null,takeClass:null,swap:null,defineExtension:null,removeExtension:null,logAll:null,logNone:null,logger:null,config:{historyEnabled:true,historyCacheSize:10,refreshOnHistoryMiss:false,defaultSwapStyle:"innerHTML",defaultSwapDelay:0,defaultSettleDelay:20,includeIndicatorStyles:true,indicatorClass:"htmx-indicator",requestClass:"htmx-request",addedClass:"htmx-added",settlingClass:"htmx-settling",swappingClass:"htmx-swapping",allowEval:true,allowScriptTags:true,inlineScriptNonce:"",inlineStyleNonce:"",attributesToSettle:["class","style","width","height"],withCredentials:false,timeout:0,wsReconnectDelay:"full-jitter",wsBinaryType:"blob",disableSelector:"[hx-disable], [data-hx-disable]",scrollBehavior:"instant",defaultFocusScroll:false,getCacheBusterParam:false,globalViewTransitions:false,methodsThatUseUrlParams:["get","delete"],selfRequestsOnly:true,ignoreTitle:false,scrollIntoViewOnBoost:true,triggerSpecsCache:null,disableInheritance:false,responseHandling:[{code:"204",swap:false},{code:"[23]..",swap:true},{code:"[45]..",swap:false,error:true}],allowNestedOobSwaps:true},parseInterval:null,_:null,version:"2.0.4"};Q.onLoad=j;Q.process=kt;Q.on=ye;Q.off=be;Q.trigger=he;Q.ajax=Rn;Q.find=u;Q.findAll=x;Q.closest=g;Q.remove=z;Q.addClass=K;Q.removeClass=G;Q.toggleClass=W;Q.takeClass=Z;Q.swap=$e;Q.defineExtension=Fn;Q.removeExtension=Bn;Q.logAll=V;Q.logNone=_;Q.parseInterval=d;Q._=e;const n={addTriggerHandler:St,bodyContains:le,canAccessLocalStorage:B,findThisElement:Se,filterValues:hn,swap:$e,hasAttribute:s,getAttributeValue:te,getClosestAttributeValue:re,getClosestMatch:o,getExpressionVars:En,getHeaders:fn,getInputValues:cn,getInternalData:ie,getSwapSpecification:gn,getTriggerSpecs:st,getTarget:Ee,makeFragment:P,mergeObjects:ce,makeSettleInfo:xn,oobSwap:He,querySelectorExt:ae,settleImmediately:Kt,shouldCancel:ht,triggerEvent:he,triggerErrorEvent:fe,withExtensions:Ft};const r=["get","post","put","delete","patch"];const H=r.map(function(e){return"[hx-"+e+"], [data-hx-"+e+"]"}).join(", ");function d(e){if(e==undefined){return undefined}let t=NaN;if(e.slice(-2)=="ms"){t=parseFloat(e.slice(0,-2))}else if(e.slice(-1)=="s"){t=parseFloat(e.slice(0,-1))*1e3}else if(e.slice(-1)=="m"){t=parseFloat(e.slice(0,-1))*1e3*60}else{t=parseFloat(e)}return isNaN(t)?undefined:t}function ee(e,t){return e instanceof Element&&e.getAttribute(t)}function s(e,t){return!!e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute("data-"+t))}function te(e,t){return ee(e,t)||ee(e,"data-"+t)}function c(e){const t=e.parentElement;if(!t&&e.parentNode instanceof ShadowRoot)return e.parentNode;return t}function ne(){return document}function m(e,t){return e.getRootNode?e.getRootNode({composed:t}):ne()}function o(e,t){while(e&&!t(e)){e=c(e)}return e||null}function i(e,t,n){const r=te(t,n);const o=te(t,"hx-disinherit");var i=te(t,"hx-inherit");if(e!==t){if(Q.config.disableInheritance){if(i&&(i==="*"||i.split(" ").indexOf(n)>=0)){return r}else{return null}}if(o&&(o==="*"||o.split(" ").indexOf(n)>=0)){return"unset"}}return r}function re(t,n){let r=null;o(t,function(e){return!!(r=i(t,ue(e),n))});if(r!=="unset"){return r}}function h(e,t){const n=e instanceof Element&&(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector);return!!n&&n.call(e,t)}function T(e){const t=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i;const n=t.exec(e);if(n){return n[1].toLowerCase()}else{return""}}function q(e){const t=new DOMParser;return t.parseFromString(e,"text/html")}function L(e,t){while(t.childNodes.length>0){e.append(t.childNodes[0])}}function A(e){const t=ne().createElement("script");se(e.attributes,function(e){t.setAttribute(e.name,e.value)});t.textContent=e.textContent;t.async=false;if(Q.config.inlineScriptNonce){t.nonce=Q.config.inlineScriptNonce}return t}function N(e){return e.matches("script")&&(e.type==="text/javascript"||e.type==="module"||e.type==="")}function I(e){Array.from(e.querySelectorAll("script")).forEach(e=>{if(N(e)){const t=A(e);const n=e.parentNode;try{n.insertBefore(t,e)}catch(e){O(e)}finally{e.remove()}}})}function P(e){const t=e.replace(/<head(\s[^>]*)?>[\s\S]*?<\/head>/i,"");const n=T(t);let r;if(n==="html"){r=new DocumentFragment;const i=q(e);L(r,i.body);r.title=i.title}else if(n==="body"){r=new DocumentFragment;const i=q(t);L(r,i.body);r.title=i.title}else{const i=q('<body><template class="internal-htmx-wrapper">'+t+"</template></body>");r=i.querySelector("template").content;r.title=i.title;var o=r.querySelector("title");if(o&&o.parentNode===r){o.remove();r.title=o.innerText}}if(r){if(Q.config.allowScriptTags){I(r)}else{r.querySelectorAll("script").forEach(e=>e.remove())}}return r}function oe(e){if(e){e()}}function t(e,t){return Object.prototype.toString.call(e)==="[object "+t+"]"}function k(e){return typeof e==="function"}function D(e){return t(e,"Object")}function ie(e){const t="htmx-internal-data";let n=e[t];if(!n){n=e[t]={}}return n}function M(t){const n=[];if(t){for(let e=0;e<t.length;e++){n.push(t[e])}}return n}function se(t,n){if(t){for(let e=0;e<t.length;e++){n(t[e])}}}function X(e){const t=e.getBoundingClientRect();const n=t.top;const r=t.bottom;return n<window.innerHeight&&r>=0}function le(e){return e.getRootNode({composed:true})===document}function F(e){return e.trim().split(/\s+/)}function ce(e,t){for(const n in t){if(t.hasOwnProperty(n)){e[n]=t[n]}}return e}function S(e){try{return JSON.parse(e)}catch(e){O(e);return null}}function B(){const e="htmx:localStorageTest";try{localStorage.setItem(e,e);localStorage.removeItem(e);return true}catch(e){return false}}function U(t){try{const e=new URL(t);if(e){t=e.pathname+e.search}if(!/^\/$/.test(t)){t=t.replace(/\/+$/,"")}return t}catch(e){return t}}function e(e){return vn(ne().body,function(){return eval(e)})}function j(t){const e=Q.on("htmx:load",function(e){t(e.detail.elt)});return e}function V(){Q.logger=function(e,t,n){if(console){console.log(t,e,n)}}}function _(){Q.logger=null}function u(e,t){if(typeof e!=="string"){return e.querySelector(t)}else{return u(ne(),e)}}function x(e,t){if(typeof e!=="string"){return e.querySelectorAll(t)}else{return x(ne(),e)}}function E(){return window}function z(e,t){e=y(e);if(t){E().setTimeout(function(){z(e);e=null},t)}else{c(e).removeChild(e)}}function ue(e){return e instanceof Element?e:null}function $(e){return e instanceof HTMLElement?e:null}function J(e){return typeof e==="string"?e:null}function f(e){return e instanceof Element||e instanceof Document||e instanceof DocumentFragment?e:null}function K(e,t,n){e=ue(y(e));if(!e){return}if(n){E().setTimeout(function(){K(e,t);e=null},n)}else{e.classList&&e.classList.add(t)}}function G(e,t,n){let r=ue(y(e));if(!r){return}if(n){E().setTimeout(function(){G(r,t);r=null},n)}else{if(r.classList){r.classList.remove(t);if(r.classList.length===0){r.removeAttribute("class")}}}}function W(e,t){e=y(e);e.classList.toggle(t)}function Z(e,t){e=y(e);se(e.parentElement.children,function(e){G(e,t)});K(ue(e),t)}function g(e,t){e=ue(y(e));if(e&&e.closest){return e.closest(t)}else{do{if(e==null||h(e,t)){return e}}while(e=e&&ue(c(e)));return null}}function l(e,t){return e.substring(0,t.length)===t}function Y(e,t){return e.substring(e.length-t.length)===t}function ge(e){const t=e.trim();if(l(t,"<")&&Y(t,"/>")){return t.substring(1,t.length-2)}else{return t}}function p(t,r,n){if(r.indexOf("global ")===0){return p(t,r.slice(7),true)}t=y(t);const o=[];{let t=0;let n=0;for(let e=0;e<r.length;e++){const l=r[e];if(l===","&&t===0){o.push(r.substring(n,e));n=e+1;continue}if(l==="<"){t++}else if(l==="/"&&e<r.length-1&&r[e+1]===">"){t--}}if(n<r.length){o.push(r.substring(n))}}const i=[];const s=[];while(o.length>0){const r=ge(o.shift());let e;if(r.indexOf("closest ")===0){e=g(ue(t),ge(r.substr(8)))}else if(r.indexOf("find ")===0){e=u(f(t),ge(r.substr(5)))}else if(r==="next"||r==="nextElementSibling"){e=ue(t).nextElementSibling}else if(r.indexOf("next ")===0){e=pe(t,ge(r.substr(5)),!!n)}else if(r==="previous"||r==="previousElementSibling"){e=ue(t).previousElementSibling}else if(r.indexOf("previous ")===0){e=me(t,ge(r.substr(9)),!!n)}else if(r==="document"){e=document}else if(r==="window"){e=window}else if(r==="body"){e=document.body}else if(r==="root"){e=m(t,!!n)}else if(r==="host"){e=t.getRootNode().host}else{s.push(r)}if(e){i.push(e)}}if(s.length>0){const e=s.join(",");const c=f(m(t,!!n));i.push(...M(c.querySelectorAll(e)))}return i}var pe=function(t,e,n){const r=f(m(t,n)).querySelectorAll(e);for(let e=0;e<r.length;e++){const o=r[e];if(o.compareDocumentPosition(t)===Node.DOCUMENT_POSITION_PRECEDING){return o}}};var me=function(t,e,n){const r=f(m(t,n)).querySelectorAll(e);for(let e=r.length-1;e>=0;e--){const o=r[e];if(o.compareDocumentPosition(t)===Node.DOCUMENT_POSITION_FOLLOWING){return o}}};function ae(e,t){if(typeof e!=="string"){return p(e,t)[0]}else{return p(ne().body,e)[0]}}function y(e,t){if(typeof e==="string"){return u(f(t)||document,e)}else{return e}}function xe(e,t,n,r){if(k(t)){return{target:ne().body,event:J(e),listener:t,options:n}}else{return{target:y(e),event:J(t),listener:n,options:r}}}function ye(t,n,r,o){Vn(function(){const e=xe(t,n,r,o);e.target.addEventListener(e.event,e.listener,e.options)});const e=k(n);return e?n:r}function be(t,n,r){Vn(function(){const e=xe(t,n,r);e.target.removeEventListener(e.event,e.listener)});return k(n)?n:r}const ve=ne().createElement("output");function we(e,t){const n=re(e,t);if(n){if(n==="this"){return[Se(e,t)]}else{const r=p(e,n);if(r.length===0){O('The selector "'+n+'" on '+t+" returned no matches!");return[ve]}else{return r}}}}function Se(e,t){return ue(o(e,function(e){return te(ue(e),t)!=null}))}function Ee(e){const t=re(e,"hx-target");if(t){if(t==="this"){return Se(e,"hx-target")}else{return ae(e,t)}}else{const n=ie(e);if(n.boosted){return ne().body}else{return e}}}function Ce(t){const n=Q.config.attributesToSettle;for(let e=0;e<n.length;e++){if(t===n[e]){return true}}return false}function Oe(t,n){se(t.attributes,function(e){if(!n.hasAttribute(e.name)&&Ce(e.name)){t.removeAttribute(e.name)}});se(n.attributes,function(e){if(Ce(e.name)){t.setAttribute(e.name,e.value)}})}function Re(t,e){const n=Un(e);for(let e=0;e<n.length;e++){const r=n[e];try{if(r.isInlineSwap(t)){return true}}catch(e){O(e)}}return t==="outerHTML"}function He(e,o,i,t){t=t||ne();let n="#"+ee(o,"id");let s="outerHTML";if(e==="true"){}else if(e.indexOf(":")>0){s=e.substring(0,e.indexOf(":"));n=e.substring(e.indexOf(":")+1)}else{s=e}o.removeAttribute("hx-swap-oob");o.removeAttribute("data-hx-swap-oob");const r=p(t,n,false);if(r){se(r,function(e){let t;const n=o.cloneNode(true);t=ne().createDocumentFragment();t.appendChild(n);if(!Re(s,e)){t=f(n)}const r={shouldSwap:true,target:e,fragment:t};if(!he(e,"htmx:oobBeforeSwap",r))return;e=r.target;if(r.shouldSwap){qe(t);_e(s,e,e,t,i);Te()}se(i.elts,function(e){he(e,"htmx:oobAfterSwap",r)})});o.parentNode.removeChild(o)}else{o.parentNode.removeChild(o);fe(ne().body,"htmx:oobErrorNoTarget",{content:o})}return e}function Te(){const e=u("#--htmx-preserve-pantry--");if(e){for(const t of[...e.children]){const n=u("#"+t.id);n.parentNode.moveBefore(t,n);n.remove()}e.remove()}}function qe(e){se(x(e,"[hx-preserve], [data-hx-preserve]"),function(e){const t=te(e,"id");const n=ne().getElementById(t);if(n!=null){if(e.moveBefore){let e=u("#--htmx-preserve-pantry--");if(e==null){ne().body.insertAdjacentHTML("afterend","<div id='--htmx-preserve-pantry--'></div>");e=u("#--htmx-preserve-pantry--")}e.moveBefore(n,null)}else{e.parentNode.replaceChild(n,e)}}})}function Le(l,e,c){se(e.querySelectorAll("[id]"),function(t){const n=ee(t,"id");if(n&&n.length>0){const r=n.replace("'","\\'");const o=t.tagName.replace(":","\\:");const e=f(l);const i=e&&e.querySelector(o+"[id='"+r+"']");if(i&&i!==e){const s=t.cloneNode();Oe(t,i);c.tasks.push(function(){Oe(t,s)})}}})}function Ae(e){return function(){G(e,Q.config.addedClass);kt(ue(e));Ne(f(e));he(e,"htmx:load")}}function Ne(e){const t="[autofocus]";const n=$(h(e,t)?e:e.querySelector(t));if(n!=null){n.focus()}}function a(e,t,n,r){Le(e,n,r);while(n.childNodes.length>0){const o=n.firstChild;K(ue(o),Q.config.addedClass);e.insertBefore(o,t);if(o.nodeType!==Node.TEXT_NODE&&o.nodeType!==Node.COMMENT_NODE){r.tasks.push(Ae(o))}}}function Ie(e,t){let n=0;while(n<e.length){t=(t<<5)-t+e.charCodeAt(n++)|0}return t}function Pe(t){let n=0;if(t.attributes){for(let e=0;e<t.attributes.length;e++){const r=t.attributes[e];if(r.value){n=Ie(r.name,n);n=Ie(r.value,n)}}}return n}function ke(t){const n=ie(t);if(n.onHandlers){for(let e=0;e<n.onHandlers.length;e++){const r=n.onHandlers[e];be(t,r.event,r.listener)}delete n.onHandlers}}function De(e){const t=ie(e);if(t.timeout){clearTimeout(t.timeout)}if(t.listenerInfos){se(t.listenerInfos,function(e){if(e.on){be(e.on,e.trigger,e.listener)}})}ke(e);se(Object.keys(t),function(e){if(e!=="firstInitCompleted")delete t[e]})}function b(e){he(e,"htmx:beforeCleanupElement");De(e);if(e.children){se(e.children,function(e){b(e)})}}function Me(t,e,n){if(t instanceof Element&&t.tagName==="BODY"){return Ve(t,e,n)}let r;const o=t.previousSibling;const i=c(t);if(!i){return}a(i,t,e,n);if(o==null){r=i.firstChild}else{r=o.nextSibling}n.elts=n.elts.filter(function(e){return e!==t});while(r&&r!==t){if(r instanceof Element){n.elts.push(r)}r=r.nextSibling}b(t);if(t instanceof Element){t.remove()}else{t.parentNode.removeChild(t)}}function Xe(e,t,n){return a(e,e.firstChild,t,n)}function Fe(e,t,n){return a(c(e),e,t,n)}function Be(e,t,n){return a(e,null,t,n)}function Ue(e,t,n){return a(c(e),e.nextSibling,t,n)}function je(e){b(e);const t=c(e);if(t){return t.removeChild(e)}}function Ve(e,t,n){const r=e.firstChild;a(e,r,t,n);if(r){while(r.nextSibling){b(r.nextSibling);e.removeChild(r.nextSibling)}b(r);e.removeChild(r)}}function _e(t,e,n,r,o){switch(t){case"none":return;case"outerHTML":Me(n,r,o);return;case"afterbegin":Xe(n,r,o);return;case"beforebegin":Fe(n,r,o);return;case"beforeend":Be(n,r,o);return;case"afterend":Ue(n,r,o);return;case"delete":je(n);return;default:var i=Un(e);for(let e=0;e<i.length;e++){const s=i[e];try{const l=s.handleSwap(t,n,r,o);if(l){if(Array.isArray(l)){for(let e=0;e<l.length;e++){const c=l[e];if(c.nodeType!==Node.TEXT_NODE&&c.nodeType!==Node.COMMENT_NODE){o.tasks.push(Ae(c))}}}return}}catch(e){O(e)}}if(t==="innerHTML"){Ve(n,r,o)}else{_e(Q.config.defaultSwapStyle,e,n,r,o)}}}function ze(e,n,r){var t=x(e,"[hx-swap-oob], [data-hx-swap-oob]");se(t,function(e){if(Q.config.allowNestedOobSwaps||e.parentElement===null){const t=te(e,"hx-swap-oob");if(t!=null){He(t,e,n,r)}}else{e.removeAttribute("hx-swap-oob");e.removeAttribute("data-hx-swap-oob")}});return t.length>0}function $e(e,t,r,o){if(!o){o={}}e=y(e);const i=o.contextElement?m(o.contextElement,false):ne();const n=document.activeElement;let s={};try{s={elt:n,start:n?n.selectionStart:null,end:n?n.selectionEnd:null}}catch(e){}const l=xn(e);if(r.swapStyle==="textContent"){e.textContent=t}else{let n=P(t);l.title=n.title;if(o.selectOOB){const u=o.selectOOB.split(",");for(let t=0;t<u.length;t++){const a=u[t].split(":",2);let e=a[0].trim();if(e.indexOf("#")===0){e=e.substring(1)}const f=a[1]||"true";const h=n.querySelector("#"+e);if(h){He(f,h,l,i)}}}ze(n,l,i);se(x(n,"template"),function(e){if(e.content&&ze(e.content,l,i)){e.remove()}});if(o.select){const d=ne().createDocumentFragment();se(n.querySelectorAll(o.select),function(e){d.appendChild(e)});n=d}qe(n);_e(r.swapStyle,o.contextElement,e,n,l);Te()}if(s.elt&&!le(s.elt)&&ee(s.elt,"id")){const g=document.getElementById(ee(s.elt,"id"));const p={preventScroll:r.focusScroll!==undefined?!r.focusScroll:!Q.config.defaultFocusScroll};if(g){if(s.start&&g.setSelectionRange){try{g.setSelectionRange(s.start,s.end)}catch(e){}}g.focus(p)}}e.classList.remove(Q.config.swappingClass);se(l.elts,function(e){if(e.classList){e.classList.add(Q.config.settlingClass)}he(e,"htmx:afterSwap",o.eventInfo)});if(o.afterSwapCallback){o.afterSwapCallback()}if(!r.ignoreTitle){kn(l.title)}const c=function(){se(l.tasks,function(e){e.call()});se(l.elts,function(e){if(e.classList){e.classList.remove(Q.config.settlingClass)}he(e,"htmx:afterSettle",o.eventInfo)});if(o.anchor){const e=ue(y("#"+o.anchor));if(e){e.scrollIntoView({block:"start",behavior:"auto"})}}yn(l.elts,r);if(o.afterSettleCallback){o.afterSettleCallback()}};if(r.settleDelay>0){E().setTimeout(c,r.settleDelay)}else{c()}}function Je(e,t,n){const r=e.getResponseHeader(t);if(r.indexOf("{")===0){const o=S(r);for(const i in o){if(o.hasOwnProperty(i)){let e=o[i];if(D(e)){n=e.target!==undefined?e.target:n}else{e={value:e}}he(n,i,e)}}}else{const s=r.split(",");for(let e=0;e<s.length;e++){he(n,s[e].trim(),[])}}}const Ke=/\s/;const v=/[\s,]/;const Ge=/[_$a-zA-Z]/;const We=/[_$a-zA-Z0-9]/;const Ze=['"',"'","/"];const w=/[^\s]/;const Ye=/[{(]/;const Qe=/[})]/;function et(e){const t=[];let n=0;while(n<e.length){if(Ge.exec(e.charAt(n))){var r=n;while(We.exec(e.charAt(n+1))){n++}t.push(e.substring(r,n+1))}else if(Ze.indexOf(e.charAt(n))!==-1){const o=e.charAt(n);var r=n;n++;while(n<e.length&&e.charAt(n)!==o){if(e.charAt(n)==="\\"){n++}n++}t.push(e.substring(r,n+1))}else{const i=e.charAt(n);t.push(i)}n++}return t}function tt(e,t,n){return Ge.exec(e.charAt(0))&&e!=="true"&&e!=="false"&&e!=="this"&&e!==n&&t!=="."}function nt(r,o,i){if(o[0]==="["){o.shift();let e=1;let t=" return (function("+i+"){ return (";let n=null;while(o.length>0){const s=o[0];if(s==="]"){e--;if(e===0){if(n===null){t=t+"true"}o.shift();t+=")})";try{const l=vn(r,function(){return Function(t)()},function(){return true});l.source=t;return l}catch(e){fe(ne().body,"htmx:syntax:error",{error:e,source:t});return null}}}else if(s==="["){e++}if(tt(s,n,i)){t+="(("+i+"."+s+") ? ("+i+"."+s+") : (window."+s+"))"}else{t=t+s}n=o.shift()}}}function C(e,t){let n="";while(e.length>0&&!t.test(e[0])){n+=e.shift()}return n}function rt(e){let t;if(e.length>0&&Ye.test(e[0])){e.shift();t=C(e,Qe).trim();e.shift()}else{t=C(e,v)}return t}const ot="input, textarea, select";function it(e,t,n){const r=[];const o=et(t);do{C(o,w);const l=o.length;const c=C(o,/[,\[\s]/);if(c!==""){if(c==="every"){const u={trigger:"every"};C(o,w);u.pollInterval=d(C(o,/[,\[\s]/));C(o,w);var i=nt(e,o,"event");if(i){u.eventFilter=i}r.push(u)}else{const a={trigger:c};var i=nt(e,o,"event");if(i){a.eventFilter=i}C(o,w);while(o.length>0&&o[0]!==","){const f=o.shift();if(f==="changed"){a.changed=true}else if(f==="once"){a.once=true}else if(f==="consume"){a.consume=true}else if(f==="delay"&&o[0]===":"){o.shift();a.delay=d(C(o,v))}else if(f==="from"&&o[0]===":"){o.shift();if(Ye.test(o[0])){var s=rt(o)}else{var s=C(o,v);if(s==="closest"||s==="find"||s==="next"||s==="previous"){o.shift();const h=rt(o);if(h.length>0){s+=" "+h}}}a.from=s}else if(f==="target"&&o[0]===":"){o.shift();a.target=rt(o)}else if(f==="throttle"&&o[0]===":"){o.shift();a.throttle=d(C(o,v))}else if(f==="queue"&&o[0]===":"){o.shift();a.queue=C(o,v)}else if(f==="root"&&o[0]===":"){o.shift();a[f]=rt(o)}else if(f==="threshold"&&o[0]===":"){o.shift();a[f]=C(o,v)}else{fe(e,"htmx:syntax:error",{token:o.shift()})}C(o,w)}r.push(a)}}if(o.length===l){fe(e,"htmx:syntax:error",{token:o.shift()})}C(o,w)}while(o[0]===","&&o.shift());if(n){n[t]=r}return r}function st(e){const t=te(e,"hx-trigger");let n=[];if(t){const r=Q.config.triggerSpecsCache;n=r&&r[t]||it(e,t,r)}if(n.length>0){return n}else if(h(e,"form")){return[{trigger:"submit"}]}else if(h(e,'input[type="button"], input[type="submit"]')){return[{trigger:"click"}]}else if(h(e,ot)){return[{trigger:"change"}]}else{return[{trigger:"click"}]}}function lt(e){ie(e).cancelled=true}function ct(e,t,n){const r=ie(e);r.timeout=E().setTimeout(function(){if(le(e)&&r.cancelled!==true){if(!gt(n,e,Mt("hx:poll:trigger",{triggerSpec:n,target:e}))){t(e)}ct(e,t,n)}},n.pollInterval)}function ut(e){return location.hostname===e.hostname&&ee(e,"href")&&ee(e,"href").indexOf("#")!==0}function at(e){return g(e,Q.config.disableSelector)}function ft(t,n,e){if(t instanceof HTMLAnchorElement&&ut(t)&&(t.target===""||t.target==="_self")||t.tagName==="FORM"&&String(ee(t,"method")).toLowerCase()!=="dialog"){n.boosted=true;let r,o;if(t.tagName==="A"){r="get";o=ee(t,"href")}else{const i=ee(t,"method");r=i?i.toLowerCase():"get";o=ee(t,"action");if(o==null||o===""){o=ne().location.href}if(r==="get"&&o.includes("?")){o=o.replace(/\?[^#]+/,"")}}e.forEach(function(e){pt(t,function(e,t){const n=ue(e);if(at(n)){b(n);return}de(r,o,n,t)},n,e,true)})}}function ht(e,t){const n=ue(t);if(!n){return false}if(e.type==="submit"||e.type==="click"){if(n.tagName==="FORM"){return true}if(h(n,'input[type="submit"], button')&&(h(n,"[form]")||g(n,"form")!==null)){return true}if(n instanceof HTMLAnchorElement&&n.href&&(n.getAttribute("href")==="#"||n.getAttribute("href").indexOf("#")!==0)){return true}}return false}function dt(e,t){return ie(e).boosted&&e instanceof HTMLAnchorElement&&t.type==="click"&&(t.ctrlKey||t.metaKey)}function gt(e,t,n){const r=e.eventFilter;if(r){try{return r.call(t,n)!==true}catch(e){const o=r.source;fe(ne().body,"htmx:eventFilter:error",{error:e,source:o});return true}}return false}function pt(l,c,e,u,a){const f=ie(l);let t;if(u.from){t=p(l,u.from)}else{t=[l]}if(u.changed){if(!("lastValue"in f)){f.lastValue=new WeakMap}t.forEach(function(e){if(!f.lastValue.has(u)){f.lastValue.set(u,new WeakMap)}f.lastValue.get(u).set(e,e.value)})}se(t,function(i){const s=function(e){if(!le(l)){i.removeEventListener(u.trigger,s);return}if(dt(l,e)){return}if(a||ht(e,l)){e.preventDefault()}if(gt(u,l,e)){return}const t=ie(e);t.triggerSpec=u;if(t.handledFor==null){t.handledFor=[]}if(t.handledFor.indexOf(l)<0){t.handledFor.push(l);if(u.consume){e.stopPropagation()}if(u.target&&e.target){if(!h(ue(e.target),u.target)){return}}if(u.once){if(f.triggeredOnce){return}else{f.triggeredOnce=true}}if(u.changed){const n=event.target;const r=n.value;const o=f.lastValue.get(u);if(o.has(n)&&o.get(n)===r){return}o.set(n,r)}if(f.delayed){clearTimeout(f.delayed)}if(f.throttle){return}if(u.throttle>0){if(!f.throttle){he(l,"htmx:trigger");c(l,e);f.throttle=E().setTimeout(function(){f.throttle=null},u.throttle)}}else if(u.delay>0){f.delayed=E().setTimeout(function(){he(l,"htmx:trigger");c(l,e)},u.delay)}else{he(l,"htmx:trigger");c(l,e)}}};if(e.listenerInfos==null){e.listenerInfos=[]}e.listenerInfos.push({trigger:u.trigger,listener:s,on:i});i.addEventListener(u.trigger,s)})}let mt=false;let xt=null;function yt(){if(!xt){xt=function(){mt=true};window.addEventListener("scroll",xt);window.addEventListener("resize",xt);setInterval(function(){if(mt){mt=false;se(ne().querySelectorAll("[hx-trigger*='revealed'],[data-hx-trigger*='revealed']"),function(e){bt(e)})}},200)}}function bt(e){if(!s(e,"data-hx-revealed")&&X(e)){e.setAttribute("data-hx-revealed","true");const t=ie(e);if(t.initHash){he(e,"revealed")}else{e.addEventListener("htmx:afterProcessNode",function(){he(e,"revealed")},{once:true})}}}function vt(e,t,n,r){const o=function(){if(!n.loaded){n.loaded=true;he(e,"htmx:trigger");t(e)}};if(r>0){E().setTimeout(o,r)}else{o()}}function wt(t,n,e){let i=false;se(r,function(r){if(s(t,"hx-"+r)){const o=te(t,"hx-"+r);i=true;n.path=o;n.verb=r;e.forEach(function(e){St(t,e,n,function(e,t){const n=ue(e);if(g(n,Q.config.disableSelector)){b(n);return}de(r,o,n,t)})})}});return i}function St(r,e,t,n){if(e.trigger==="revealed"){yt();pt(r,n,t,e);bt(ue(r))}else if(e.trigger==="intersect"){const o={};if(e.root){o.root=ae(r,e.root)}if(e.threshold){o.threshold=parseFloat(e.threshold)}const i=new IntersectionObserver(function(t){for(let e=0;e<t.length;e++){const n=t[e];if(n.isIntersecting){he(r,"intersect");break}}},o);i.observe(ue(r));pt(ue(r),n,t,e)}else if(!t.firstInitCompleted&&e.trigger==="load"){if(!gt(e,r,Mt("load",{elt:r}))){vt(ue(r),n,t,e.delay)}}else if(e.pollInterval>0){t.polling=true;ct(ue(r),n,e)}else{pt(r,n,t,e)}}function Et(e){const t=ue(e);if(!t){return false}const n=t.attributes;for(let e=0;e<n.length;e++){const r=n[e].name;if(l(r,"hx-on:")||l(r,"data-hx-on:")||l(r,"hx-on-")||l(r,"data-hx-on-")){return true}}return false}const Ct=(new XPathEvaluator).createExpression('.//*[@*[ starts-with(name(), "hx-on:") or starts-with(name(), "data-hx-on:") or'+' starts-with(name(), "hx-on-") or starts-with(name(), "data-hx-on-") ]]');function Ot(e,t){if(Et(e)){t.push(ue(e))}const n=Ct.evaluate(e);let r=null;while(r=n.iterateNext())t.push(ue(r))}function Rt(e){const t=[];if(e instanceof DocumentFragment){for(const n of e.childNodes){Ot(n,t)}}else{Ot(e,t)}return t}function Ht(e){if(e.querySelectorAll){const n=", [hx-boost] a, [data-hx-boost] a, a[hx-boost], a[data-hx-boost]";const r=[];for(const i in Mn){const s=Mn[i];if(s.getSelectors){var t=s.getSelectors();if(t){r.push(t)}}}const o=e.querySelectorAll(H+n+", form, [type='submit'],"+" [hx-ext], [data-hx-ext], [hx-trigger], [data-hx-trigger]"+r.flat().map(e=>", "+e).join(""));return o}else{return[]}}function Tt(e){const t=g(ue(e.target),"button, input[type='submit']");const n=Lt(e);if(n){n.lastButtonClicked=t}}function qt(e){const t=Lt(e);if(t){t.lastButtonClicked=null}}function Lt(e){const t=g(ue(e.target),"button, input[type='submit']");if(!t){return}const n=y("#"+ee(t,"form"),t.getRootNode())||g(t,"form");if(!n){return}return ie(n)}function At(e){e.addEventListener("click",Tt);e.addEventListener("focusin",Tt);e.addEventListener("focusout",qt)}function Nt(t,e,n){const r=ie(t);if(!Array.isArray(r.onHandlers)){r.onHandlers=[]}let o;const i=function(e){vn(t,function(){if(at(t)){return}if(!o){o=new Function("event",n)}o.call(t,e)})};t.addEventListener(e,i);r.onHandlers.push({event:e,listener:i})}function It(t){ke(t);for(let e=0;e<t.attributes.length;e++){const n=t.attributes[e].name;const r=t.attributes[e].value;if(l(n,"hx-on")||l(n,"data-hx-on")){const o=n.indexOf("-on")+3;const i=n.slice(o,o+1);if(i==="-"||i===":"){let e=n.slice(o+1);if(l(e,":")){e="htmx"+e}else if(l(e,"-")){e="htmx:"+e.slice(1)}else if(l(e,"htmx-")){e="htmx:"+e.slice(5)}Nt(t,e,r)}}}}function Pt(t){if(g(t,Q.config.disableSelector)){b(t);return}const n=ie(t);const e=Pe(t);if(n.initHash!==e){De(t);n.initHash=e;he(t,"htmx:beforeProcessNode");const r=st(t);const o=wt(t,n,r);if(!o){if(re(t,"hx-boost")==="true"){ft(t,n,r)}else if(s(t,"hx-trigger")){r.forEach(function(e){St(t,e,n,function(){})})}}if(t.tagName==="FORM"||ee(t,"type")==="submit"&&s(t,"form")){At(t)}n.firstInitCompleted=true;he(t,"htmx:afterProcessNode")}}function kt(e){e=y(e);if(g(e,Q.config.disableSelector)){b(e);return}Pt(e);se(Ht(e),function(e){Pt(e)});se(Rt(e),It)}function Dt(e){return e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}function Mt(e,t){let n;if(window.CustomEvent&&typeof window.CustomEvent==="function"){n=new CustomEvent(e,{bubbles:true,cancelable:true,composed:true,detail:t})}else{n=ne().createEvent("CustomEvent");n.initCustomEvent(e,true,true,t)}return n}function fe(e,t,n){he(e,t,ce({error:t},n))}function Xt(e){return e==="htmx:afterProcessNode"}function Ft(e,t){se(Un(e),function(e){try{t(e)}catch(e){O(e)}})}function O(e){if(console.error){console.error(e)}else if(console.log){console.log("ERROR: ",e)}}function he(e,t,n){e=y(e);if(n==null){n={}}n.elt=e;const r=Mt(t,n);if(Q.logger&&!Xt(t)){Q.logger(e,t,n)}if(n.error){O(n.error);he(e,"htmx:error",{errorInfo:n})}let o=e.dispatchEvent(r);const i=Dt(t);if(o&&i!==t){const s=Mt(i,r.detail);o=o&&e.dispatchEvent(s)}Ft(ue(e),function(e){o=o&&(e.onEvent(t,r)!==false&&!r.defaultPrevented)});return o}let Bt=location.pathname+location.search;function Ut(){const e=ne().querySelector("[hx-history-elt],[data-hx-history-elt]");return e||ne().body}function jt(t,e){if(!B()){return}const n=_t(e);const r=ne().title;const o=window.scrollY;if(Q.config.historyCacheSize<=0){localStorage.removeItem("htmx-history-cache");return}t=U(t);const i=S(localStorage.getItem("htmx-history-cache"))||[];for(let e=0;e<i.length;e++){if(i[e].url===t){i.splice(e,1);break}}const s={url:t,content:n,title:r,scroll:o};he(ne().body,"htmx:historyItemCreated",{item:s,cache:i});i.push(s);while(i.length>Q.config.historyCacheSize){i.shift()}while(i.length>0){try{localStorage.setItem("htmx-history-cache",JSON.stringify(i));break}catch(e){fe(ne().body,"htmx:historyCacheError",{cause:e,cache:i});i.shift()}}}function Vt(t){if(!B()){return null}t=U(t);const n=S(localStorage.getItem("htmx-history-cache"))||[];for(let e=0;e<n.length;e++){if(n[e].url===t){return n[e]}}return null}function _t(e){const t=Q.config.requestClass;const n=e.cloneNode(true);se(x(n,"."+t),function(e){G(e,t)});se(x(n,"[data-disabled-by-htmx]"),function(e){e.removeAttribute("disabled")});return n.innerHTML}function zt(){const e=Ut();const t=Bt||location.pathname+location.search;let n;try{n=ne().querySelector('[hx-history="false" i],[data-hx-history="false" i]')}catch(e){n=ne().querySelector('[hx-history="false"],[data-hx-history="false"]')}if(!n){he(ne().body,"htmx:beforeHistorySave",{path:t,historyElt:e});jt(t,e)}if(Q.config.historyEnabled)history.replaceState({htmx:true},ne().title,window.location.href)}function $t(e){if(Q.config.getCacheBusterParam){e=e.replace(/org\.htmx\.cache-buster=[^&]*&?/,"");if(Y(e,"&")||Y(e,"?")){e=e.slice(0,-1)}}if(Q.config.historyEnabled){history.pushState({htmx:true},"",e)}Bt=e}function Jt(e){if(Q.config.historyEnabled)history.replaceState({htmx:true},"",e);Bt=e}function Kt(e){se(e,function(e){e.call(undefined)})}function Gt(o){const e=new XMLHttpRequest;const i={path:o,xhr:e};he(ne().body,"htmx:historyCacheMiss",i);e.open("GET",o,true);e.setRequestHeader("HX-Request","true");e.setRequestHeader("HX-History-Restore-Request","true");e.setRequestHeader("HX-Current-URL",ne().location.href);e.onload=function(){if(this.status>=200&&this.status<400){he(ne().body,"htmx:historyCacheMissLoad",i);const e=P(this.response);const t=e.querySelector("[hx-history-elt],[data-hx-history-elt]")||e;const n=Ut();const r=xn(n);kn(e.title);qe(e);Ve(n,t,r);Te();Kt(r.tasks);Bt=o;he(ne().body,"htmx:historyRestore",{path:o,cacheMiss:true,serverResponse:this.response})}else{fe(ne().body,"htmx:historyCacheMissLoadError",i)}};e.send()}function Wt(e){zt();e=e||location.pathname+location.search;const t=Vt(e);if(t){const n=P(t.content);const r=Ut();const o=xn(r);kn(t.title);qe(n);Ve(r,n,o);Te();Kt(o.tasks);E().setTimeout(function(){window.scrollTo(0,t.scroll)},0);Bt=e;he(ne().body,"htmx:historyRestore",{path:e,item:t})}else{if(Q.config.refreshOnHistoryMiss){window.location.reload(true)}else{Gt(e)}}}function Zt(e){let t=we(e,"hx-indicator");if(t==null){t=[e]}se(t,function(e){const t=ie(e);t.requestCount=(t.requestCount||0)+1;e.classList.add.call(e.classList,Q.config.requestClass)});return t}function Yt(e){let t=we(e,"hx-disabled-elt");if(t==null){t=[]}se(t,function(e){const t=ie(e);t.requestCount=(t.requestCount||0)+1;e.setAttribute("disabled","");e.setAttribute("data-disabled-by-htmx","")});return t}function Qt(e,t){se(e.concat(t),function(e){const t=ie(e);t.requestCount=(t.requestCount||1)-1});se(e,function(e){const t=ie(e);if(t.requestCount===0){e.classList.remove.call(e.classList,Q.config.requestClass)}});se(t,function(e){const t=ie(e);if(t.requestCount===0){e.removeAttribute("disabled");e.removeAttribute("data-disabled-by-htmx")}})}function en(t,n){for(let e=0;e<t.length;e++){const r=t[e];if(r.isSameNode(n)){return true}}return false}function tn(e){const t=e;if(t.name===""||t.name==null||t.disabled||g(t,"fieldset[disabled]")){return false}if(t.type==="button"||t.type==="submit"||t.tagName==="image"||t.tagName==="reset"||t.tagName==="file"){return false}if(t.type==="checkbox"||t.type==="radio"){return t.checked}return true}function nn(t,e,n){if(t!=null&&e!=null){if(Array.isArray(e)){e.forEach(function(e){n.append(t,e)})}else{n.append(t,e)}}}function rn(t,n,r){if(t!=null&&n!=null){let e=r.getAll(t);if(Array.isArray(n)){e=e.filter(e=>n.indexOf(e)<0)}else{e=e.filter(e=>e!==n)}r.delete(t);se(e,e=>r.append(t,e))}}function on(t,n,r,o,i){if(o==null||en(t,o)){return}else{t.push(o)}if(tn(o)){const s=ee(o,"name");let e=o.value;if(o instanceof HTMLSelectElement&&o.multiple){e=M(o.querySelectorAll("option:checked")).map(function(e){return e.value})}if(o instanceof HTMLInputElement&&o.files){e=M(o.files)}nn(s,e,n);if(i){sn(o,r)}}if(o instanceof HTMLFormElement){se(o.elements,function(e){if(t.indexOf(e)>=0){rn(e.name,e.value,n)}else{t.push(e)}if(i){sn(e,r)}});new FormData(o).forEach(function(e,t){if(e instanceof File&&e.name===""){return}nn(t,e,n)})}}function sn(e,t){const n=e;if(n.willValidate){he(n,"htmx:validation:validate");if(!n.checkValidity()){t.push({elt:n,message:n.validationMessage,validity:n.validity});he(n,"htmx:validation:failed",{message:n.validationMessage,validity:n.validity})}}}function ln(n,e){for(const t of e.keys()){n.delete(t)}e.forEach(function(e,t){n.append(t,e)});return n}function cn(e,t){const n=[];const r=new FormData;const o=new FormData;const i=[];const s=ie(e);if(s.lastButtonClicked&&!le(s.lastButtonClicked)){s.lastButtonClicked=null}let l=e instanceof HTMLFormElement&&e.noValidate!==true||te(e,"hx-validate")==="true";if(s.lastButtonClicked){l=l&&s.lastButtonClicked.formNoValidate!==true}if(t!=="get"){on(n,o,i,g(e,"form"),l)}on(n,r,i,e,l);if(s.lastButtonClicked||e.tagName==="BUTTON"||e.tagName==="INPUT"&&ee(e,"type")==="submit"){const u=s.lastButtonClicked||e;const a=ee(u,"name");nn(a,u.value,o)}const c=we(e,"hx-include");se(c,function(e){on(n,r,i,ue(e),l);if(!h(e,"form")){se(f(e).querySelectorAll(ot),function(e){on(n,r,i,e,l)})}});ln(r,o);return{errors:i,formData:r,values:An(r)}}function un(e,t,n){if(e!==""){e+="&"}if(String(n)==="[object Object]"){n=JSON.stringify(n)}const r=encodeURIComponent(n);e+=encodeURIComponent(t)+"="+r;return e}function an(e){e=qn(e);let n="";e.forEach(function(e,t){n=un(n,t,e)});return n}function fn(e,t,n){const r={"HX-Request":"true","HX-Trigger":ee(e,"id"),"HX-Trigger-Name":ee(e,"name"),"HX-Target":te(t,"id"),"HX-Current-URL":ne().location.href};bn(e,"hx-headers",false,r);if(n!==undefined){r["HX-Prompt"]=n}if(ie(e).boosted){r["HX-Boosted"]="true"}return r}function hn(n,e){const t=re(e,"hx-params");if(t){if(t==="none"){return new FormData}else if(t==="*"){return n}else if(t.indexOf("not ")===0){se(t.slice(4).split(","),function(e){e=e.trim();n.delete(e)});return n}else{const r=new FormData;se(t.split(","),function(t){t=t.trim();if(n.has(t)){n.getAll(t).forEach(function(e){r.append(t,e)})}});return r}}else{return n}}function dn(e){return!!ee(e,"href")&&ee(e,"href").indexOf("#")>=0}function gn(e,t){const n=t||re(e,"hx-swap");const r={swapStyle:ie(e).boosted?"innerHTML":Q.config.defaultSwapStyle,swapDelay:Q.config.defaultSwapDelay,settleDelay:Q.config.defaultSettleDelay};if(Q.config.scrollIntoViewOnBoost&&ie(e).boosted&&!dn(e)){r.show="top"}if(n){const s=F(n);if(s.length>0){for(let e=0;e<s.length;e++){const l=s[e];if(l.indexOf("swap:")===0){r.swapDelay=d(l.slice(5))}else if(l.indexOf("settle:")===0){r.settleDelay=d(l.slice(7))}else if(l.indexOf("transition:")===0){r.transition=l.slice(11)==="true"}else if(l.indexOf("ignoreTitle:")===0){r.ignoreTitle=l.slice(12)==="true"}else if(l.indexOf("scroll:")===0){const c=l.slice(7);var o=c.split(":");const u=o.pop();var i=o.length>0?o.join(":"):null;r.scroll=u;r.scrollTarget=i}else if(l.indexOf("show:")===0){const a=l.slice(5);var o=a.split(":");const f=o.pop();var i=o.length>0?o.join(":"):null;r.show=f;r.showTarget=i}else if(l.indexOf("focus-scroll:")===0){const h=l.slice("focus-scroll:".length);r.focusScroll=h=="true"}else if(e==0){r.swapStyle=l}else{O("Unknown modifier in hx-swap: "+l)}}}}return r}function pn(e){return re(e,"hx-encoding")==="multipart/form-data"||h(e,"form")&&ee(e,"enctype")==="multipart/form-data"}function mn(t,n,r){let o=null;Ft(n,function(e){if(o==null){o=e.encodeParameters(t,r,n)}});if(o!=null){return o}else{if(pn(n)){return ln(new FormData,qn(r))}else{return an(r)}}}function xn(e){return{tasks:[],elts:[e]}}function yn(e,t){const n=e[0];const r=e[e.length-1];if(t.scroll){var o=null;if(t.scrollTarget){o=ue(ae(n,t.scrollTarget))}if(t.scroll==="top"&&(n||o)){o=o||n;o.scrollTop=0}if(t.scroll==="bottom"&&(r||o)){o=o||r;o.scrollTop=o.scrollHeight}}if(t.show){var o=null;if(t.showTarget){let e=t.showTarget;if(t.showTarget==="window"){e="body"}o=ue(ae(n,e))}if(t.show==="top"&&(n||o)){o=o||n;o.scrollIntoView({block:"start",behavior:Q.config.scrollBehavior})}if(t.show==="bottom"&&(r||o)){o=o||r;o.scrollIntoView({block:"end",behavior:Q.config.scrollBehavior})}}}function bn(r,e,o,i){if(i==null){i={}}if(r==null){return i}const s=te(r,e);if(s){let e=s.trim();let t=o;if(e==="unset"){return null}if(e.indexOf("javascript:")===0){e=e.slice(11);t=true}else if(e.indexOf("js:")===0){e=e.slice(3);t=true}if(e.indexOf("{")!==0){e="{"+e+"}"}let n;if(t){n=vn(r,function(){return Function("return ("+e+")")()},{})}else{n=S(e)}for(const l in n){if(n.hasOwnProperty(l)){if(i[l]==null){i[l]=n[l]}}}}return bn(ue(c(r)),e,o,i)}function vn(e,t,n){if(Q.config.allowEval){return t()}else{fe(e,"htmx:evalDisallowedError");return n}}function wn(e,t){return bn(e,"hx-vars",true,t)}function Sn(e,t){return bn(e,"hx-vals",false,t)}function En(e){return ce(wn(e),Sn(e))}function Cn(t,n,r){if(r!==null){try{t.setRequestHeader(n,r)}catch(e){t.setRequestHeader(n,encodeURIComponent(r));t.setRequestHeader(n+"-URI-AutoEncoded","true")}}}function On(t){if(t.responseURL&&typeof URL!=="undefined"){try{const e=new URL(t.responseURL);return e.pathname+e.search}catch(e){fe(ne().body,"htmx:badResponseUrl",{url:t.responseURL})}}}function R(e,t){return t.test(e.getAllResponseHeaders())}function Rn(t,n,r){t=t.toLowerCase();if(r){if(r instanceof Element||typeof r==="string"){return de(t,n,null,null,{targetOverride:y(r)||ve,returnPromise:true})}else{let e=y(r.target);if(r.target&&!e||r.source&&!e&&!y(r.source)){e=ve}return de(t,n,y(r.source),r.event,{handler:r.handler,headers:r.headers,values:r.values,targetOverride:e,swapOverride:r.swap,select:r.select,returnPromise:true})}}else{return de(t,n,null,null,{returnPromise:true})}}function Hn(e){const t=[];while(e){t.push(e);e=e.parentElement}return t}function Tn(e,t,n){let r;let o;if(typeof URL==="function"){o=new URL(t,document.location.href);const i=document.location.origin;r=i===o.origin}else{o=t;r=l(t,document.location.origin)}if(Q.config.selfRequestsOnly){if(!r){return false}}return he(e,"htmx:validateUrl",ce({url:o,sameHost:r},n))}function qn(e){if(e instanceof FormData)return e;const t=new FormData;for(const n in e){if(e.hasOwnProperty(n)){if(e[n]&&typeof e[n].forEach==="function"){e[n].forEach(function(e){t.append(n,e)})}else if(typeof e[n]==="object"&&!(e[n]instanceof Blob)){t.append(n,JSON.stringify(e[n]))}else{t.append(n,e[n])}}}return t}function Ln(r,o,e){return new Proxy(e,{get:function(t,e){if(typeof e==="number")return t[e];if(e==="length")return t.length;if(e==="push"){return function(e){t.push(e);r.append(o,e)}}if(typeof t[e]==="function"){return function(){t[e].apply(t,arguments);r.delete(o);t.forEach(function(e){r.append(o,e)})}}if(t[e]&&t[e].length===1){return t[e][0]}else{return t[e]}},set:function(e,t,n){e[t]=n;r.delete(o);e.forEach(function(e){r.append(o,e)});return true}})}function An(o){return new Proxy(o,{get:function(e,t){if(typeof t==="symbol"){const r=Reflect.get(e,t);if(typeof r==="function"){return function(){return r.apply(o,arguments)}}else{return r}}if(t==="toJSON"){return()=>Object.fromEntries(o)}if(t in e){if(typeof e[t]==="function"){return function(){return o[t].apply(o,arguments)}}else{return e[t]}}const n=o.getAll(t);if(n.length===0){return undefined}else if(n.length===1){return n[0]}else{return Ln(e,t,n)}},set:function(t,n,e){if(typeof n!=="string"){return false}t.delete(n);if(e&&typeof e.forEach==="function"){e.forEach(function(e){t.append(n,e)})}else if(typeof e==="object"&&!(e instanceof Blob)){t.append(n,JSON.stringify(e))}else{t.append(n,e)}return true},deleteProperty:function(e,t){if(typeof t==="string"){e.delete(t)}return true},ownKeys:function(e){return Reflect.ownKeys(Object.fromEntries(e))},getOwnPropertyDescriptor:function(e,t){return Reflect.getOwnPropertyDescriptor(Object.fromEntries(e),t)}})}function de(t,n,r,o,i,D){let s=null;let l=null;i=i!=null?i:{};if(i.returnPromise&&typeof Promise!=="undefined"){var e=new Promise(function(e,t){s=e;l=t})}if(r==null){r=ne().body}const M=i.handler||Dn;const X=i.select||null;if(!le(r)){oe(s);return e}const c=i.targetOverride||ue(Ee(r));if(c==null||c==ve){fe(r,"htmx:targetError",{target:te(r,"hx-target")});oe(l);return e}let u=ie(r);const a=u.lastButtonClicked;if(a){const L=ee(a,"formaction");if(L!=null){n=L}const A=ee(a,"formmethod");if(A!=null){if(A.toLowerCase()!=="dialog"){t=A}}}const f=re(r,"hx-confirm");if(D===undefined){const K=function(e){return de(t,n,r,o,i,!!e)};const G={target:c,elt:r,path:n,verb:t,triggeringEvent:o,etc:i,issueRequest:K,question:f};if(he(r,"htmx:confirm",G)===false){oe(s);return e}}let h=r;let d=re(r,"hx-sync");let g=null;let F=false;if(d){const N=d.split(":");const I=N[0].trim();if(I==="this"){h=Se(r,"hx-sync")}else{h=ue(ae(r,I))}d=(N[1]||"drop").trim();u=ie(h);if(d==="drop"&&u.xhr&&u.abortable!==true){oe(s);return e}else if(d==="abort"){if(u.xhr){oe(s);return e}else{F=true}}else if(d==="replace"){he(h,"htmx:abort")}else if(d.indexOf("queue")===0){const W=d.split(" ");g=(W[1]||"last").trim()}}if(u.xhr){if(u.abortable){he(h,"htmx:abort")}else{if(g==null){if(o){const P=ie(o);if(P&&P.triggerSpec&&P.triggerSpec.queue){g=P.triggerSpec.queue}}if(g==null){g="last"}}if(u.queuedRequests==null){u.queuedRequests=[]}if(g==="first"&&u.queuedRequests.length===0){u.queuedRequests.push(function(){de(t,n,r,o,i)})}else if(g==="all"){u.queuedRequests.push(function(){de(t,n,r,o,i)})}else if(g==="last"){u.queuedRequests=[];u.queuedRequests.push(function(){de(t,n,r,o,i)})}oe(s);return e}}const p=new XMLHttpRequest;u.xhr=p;u.abortable=F;const m=function(){u.xhr=null;u.abortable=false;if(u.queuedRequests!=null&&u.queuedRequests.length>0){const e=u.queuedRequests.shift();e()}};const B=re(r,"hx-prompt");if(B){var x=prompt(B);if(x===null||!he(r,"htmx:prompt",{prompt:x,target:c})){oe(s);m();return e}}if(f&&!D){if(!confirm(f)){oe(s);m();return e}}let y=fn(r,c,x);if(t!=="get"&&!pn(r)){y["Content-Type"]="application/x-www-form-urlencoded"}if(i.headers){y=ce(y,i.headers)}const U=cn(r,t);let b=U.errors;const j=U.formData;if(i.values){ln(j,qn(i.values))}const V=qn(En(r));const v=ln(j,V);let w=hn(v,r);if(Q.config.getCacheBusterParam&&t==="get"){w.set("org.htmx.cache-buster",ee(c,"id")||"true")}if(n==null||n===""){n=ne().location.href}const S=bn(r,"hx-request");const _=ie(r).boosted;let E=Q.config.methodsThatUseUrlParams.indexOf(t)>=0;const C={boosted:_,useUrlParams:E,formData:w,parameters:An(w),unfilteredFormData:v,unfilteredParameters:An(v),headers:y,target:c,verb:t,errors:b,withCredentials:i.credentials||S.credentials||Q.config.withCredentials,timeout:i.timeout||S.timeout||Q.config.timeout,path:n,triggeringEvent:o};if(!he(r,"htmx:configRequest",C)){oe(s);m();return e}n=C.path;t=C.verb;y=C.headers;w=qn(C.parameters);b=C.errors;E=C.useUrlParams;if(b&&b.length>0){he(r,"htmx:validation:halted",C);oe(s);m();return e}const z=n.split("#");const $=z[0];const O=z[1];let R=n;if(E){R=$;const Z=!w.keys().next().done;if(Z){if(R.indexOf("?")<0){R+="?"}else{R+="&"}R+=an(w);if(O){R+="#"+O}}}if(!Tn(r,R,C)){fe(r,"htmx:invalidPath",C);oe(l);return e}p.open(t.toUpperCase(),R,true);p.overrideMimeType("text/html");p.withCredentials=C.withCredentials;p.timeout=C.timeout;if(S.noHeaders){}else{for(const k in y){if(y.hasOwnProperty(k)){const Y=y[k];Cn(p,k,Y)}}}const H={xhr:p,target:c,requestConfig:C,etc:i,boosted:_,select:X,pathInfo:{requestPath:n,finalRequestPath:R,responsePath:null,anchor:O}};p.onload=function(){try{const t=Hn(r);H.pathInfo.responsePath=On(p);M(r,H);if(H.keepIndicators!==true){Qt(T,q)}he(r,"htmx:afterRequest",H);he(r,"htmx:afterOnLoad",H);if(!le(r)){let e=null;while(t.length>0&&e==null){const n=t.shift();if(le(n)){e=n}}if(e){he(e,"htmx:afterRequest",H);he(e,"htmx:afterOnLoad",H)}}oe(s);m()}catch(e){fe(r,"htmx:onLoadError",ce({error:e},H));throw e}};p.onerror=function(){Qt(T,q);fe(r,"htmx:afterRequest",H);fe(r,"htmx:sendError",H);oe(l);m()};p.onabort=function(){Qt(T,q);fe(r,"htmx:afterRequest",H);fe(r,"htmx:sendAbort",H);oe(l);m()};p.ontimeout=function(){Qt(T,q);fe(r,"htmx:afterRequest",H);fe(r,"htmx:timeout",H);oe(l);m()};if(!he(r,"htmx:beforeRequest",H)){oe(s);m();return e}var T=Zt(r);var q=Yt(r);se(["loadstart","loadend","progress","abort"],function(t){se([p,p.upload],function(e){e.addEventListener(t,function(e){he(r,"htmx:xhr:"+t,{lengthComputable:e.lengthComputable,loaded:e.loaded,total:e.total})})})});he(r,"htmx:beforeSend",H);const J=E?null:mn(p,r,w);p.send(J);return e}function Nn(e,t){const n=t.xhr;let r=null;let o=null;if(R(n,/HX-Push:/i)){r=n.getResponseHeader("HX-Push");o="push"}else if(R(n,/HX-Push-Url:/i)){r=n.getResponseHeader("HX-Push-Url");o="push"}else if(R(n,/HX-Replace-Url:/i)){r=n.getResponseHeader("HX-Replace-Url");o="replace"}if(r){if(r==="false"){return{}}else{return{type:o,path:r}}}const i=t.pathInfo.finalRequestPath;const s=t.pathInfo.responsePath;const l=re(e,"hx-push-url");const c=re(e,"hx-replace-url");const u=ie(e).boosted;let a=null;let f=null;if(l){a="push";f=l}else if(c){a="replace";f=c}else if(u){a="push";f=s||i}if(f){if(f==="false"){return{}}if(f==="true"){f=s||i}if(t.pathInfo.anchor&&f.indexOf("#")===-1){f=f+"#"+t.pathInfo.anchor}return{type:a,path:f}}else{return{}}}function In(e,t){var n=new RegExp(e.code);return n.test(t.toString(10))}function Pn(e){for(var t=0;t<Q.config.responseHandling.length;t++){var n=Q.config.responseHandling[t];if(In(n,e.status)){return n}}return{swap:false}}function kn(e){if(e){const t=u("title");if(t){t.innerHTML=e}else{window.document.title=e}}}function Dn(o,i){const s=i.xhr;let l=i.target;const e=i.etc;const c=i.select;if(!he(o,"htmx:beforeOnLoad",i))return;if(R(s,/HX-Trigger:/i)){Je(s,"HX-Trigger",o)}if(R(s,/HX-Location:/i)){zt();let e=s.getResponseHeader("HX-Location");var t;if(e.indexOf("{")===0){t=S(e);e=t.path;delete t.path}Rn("get",e,t).then(function(){$t(e)});return}const n=R(s,/HX-Refresh:/i)&&s.getResponseHeader("HX-Refresh")==="true";if(R(s,/HX-Redirect:/i)){i.keepIndicators=true;location.href=s.getResponseHeader("HX-Redirect");n&&location.reload();return}if(n){i.keepIndicators=true;location.reload();return}if(R(s,/HX-Retarget:/i)){if(s.getResponseHeader("HX-Retarget")==="this"){i.target=o}else{i.target=ue(ae(o,s.getResponseHeader("HX-Retarget")))}}const u=Nn(o,i);const r=Pn(s);const a=r.swap;let f=!!r.error;let h=Q.config.ignoreTitle||r.ignoreTitle;let d=r.select;if(r.target){i.target=ue(ae(o,r.target))}var g=e.swapOverride;if(g==null&&r.swapOverride){g=r.swapOverride}if(R(s,/HX-Retarget:/i)){if(s.getResponseHeader("HX-Retarget")==="this"){i.target=o}else{i.target=ue(ae(o,s.getResponseHeader("HX-Retarget")))}}if(R(s,/HX-Reswap:/i)){g=s.getResponseHeader("HX-Reswap")}var p=s.response;var m=ce({shouldSwap:a,serverResponse:p,isError:f,ignoreTitle:h,selectOverride:d,swapOverride:g},i);if(r.event&&!he(l,r.event,m))return;if(!he(l,"htmx:beforeSwap",m))return;l=m.target;p=m.serverResponse;f=m.isError;h=m.ignoreTitle;d=m.selectOverride;g=m.swapOverride;i.target=l;i.failed=f;i.successful=!f;if(m.shouldSwap){if(s.status===286){lt(o)}Ft(o,function(e){p=e.transformResponse(p,s,o)});if(u.type){zt()}var x=gn(o,g);if(!x.hasOwnProperty("ignoreTitle")){x.ignoreTitle=h}l.classList.add(Q.config.swappingClass);let n=null;let r=null;if(c){d=c}if(R(s,/HX-Reselect:/i)){d=s.getResponseHeader("HX-Reselect")}const y=re(o,"hx-select-oob");const b=re(o,"hx-select");let e=function(){try{if(u.type){he(ne().body,"htmx:beforeHistoryUpdate",ce({history:u},i));if(u.type==="push"){$t(u.path);he(ne().body,"htmx:pushedIntoHistory",{path:u.path})}else{Jt(u.path);he(ne().body,"htmx:replacedInHistory",{path:u.path})}}$e(l,p,x,{select:d||b,selectOOB:y,eventInfo:i,anchor:i.pathInfo.anchor,contextElement:o,afterSwapCallback:function(){if(R(s,/HX-Trigger-After-Swap:/i)){let e=o;if(!le(o)){e=ne().body}Je(s,"HX-Trigger-After-Swap",e)}},afterSettleCallback:function(){if(R(s,/HX-Trigger-After-Settle:/i)){let e=o;if(!le(o)){e=ne().body}Je(s,"HX-Trigger-After-Settle",e)}oe(n)}})}catch(e){fe(o,"htmx:swapError",i);oe(r);throw e}};let t=Q.config.globalViewTransitions;if(x.hasOwnProperty("transition")){t=x.transition}if(t&&he(o,"htmx:beforeTransition",i)&&typeof Promise!=="undefined"&&document.startViewTransition){const v=new Promise(function(e,t){n=e;r=t});const w=e;e=function(){document.startViewTransition(function(){w();return v})}}if(x.swapDelay>0){E().setTimeout(e,x.swapDelay)}else{e()}}if(f){fe(o,"htmx:responseError",ce({error:"Response Status Error Code "+s.status+" from "+i.pathInfo.requestPath},i))}}const Mn={};function Xn(){return{init:function(e){return null},getSelectors:function(){return null},onEvent:function(e,t){return true},transformResponse:function(e,t,n){return e},isInlineSwap:function(e){return false},handleSwap:function(e,t,n,r){return false},encodeParameters:function(e,t,n){return null}}}function Fn(e,t){if(t.init){t.init(n)}Mn[e]=ce(Xn(),t)}function Bn(e){delete Mn[e]}function Un(e,n,r){if(n==undefined){n=[]}if(e==undefined){return n}if(r==undefined){r=[]}const t=te(e,"hx-ext");if(t){se(t.split(","),function(e){e=e.replace(/ /g,"");if(e.slice(0,7)=="ignore:"){r.push(e.slice(7));return}if(r.indexOf(e)<0){const t=Mn[e];if(t&&n.indexOf(t)<0){n.push(t)}}})}return Un(ue(c(e)),n,r)}var jn=false;ne().addEventListener("DOMContentLoaded",function(){jn=true});function Vn(e){if(jn||ne().readyState==="complete"){e()}else{ne().addEventListener("DOMContentLoaded",e)}}function _n(){if(Q.config.includeIndicatorStyles!==false){const e=Q.config.inlineStyleNonce?` nonce="${Q.config.inlineStyleNonce}"`:"";ne().head.insertAdjacentHTML("beforeend","<style"+e+">      ."+Q.config.indicatorClass+"{opacity:0}      ."+Q.config.requestClass+" ."+Q.config.indicatorClass+"{opacity:1; transition: opacity 200ms ease-in;}      ."+Q.config.requestClass+"."+Q.config.indicatorClass+"{opacity:1; transition: opacity 200ms ease-in;}      </style>")}}function zn(){const e=ne().querySelector('meta[name="htmx-config"]');if(e){return S(e.content)}else{return null}}function $n(){const e=zn();if(e){Q.config=ce(Q.config,e)}}Vn(function(){$n();_n();let e=ne().body;kt(e);const t=ne().querySelectorAll("[hx-trigger='restored'],[data-hx-trigger='restored']");e.addEventListener("htmx:abort",function(e){const t=e.target;const n=ie(t);if(n&&n.xhr){n.xhr.abort()}});const n=window.onpopstate?window.onpopstate.bind(window):null;window.onpopstate=function(e){if(e.state&&e.state.htmx){Wt();se(t,function(e){he(e,"htmx:restored",{document:ne(),triggerEvent:he})})}else{if(n){n(e)}}};E().setTimeout(function(){he(e,"htmx:load",{});e=null},0)});return Q}();
</file>

<file path="CruSibyl.Web/appsettings.Development.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.AspNetCore.SpaProxy": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
</file>

<file path="CruSibyl.Web/WeatherForecast.cs">
namespace CruSibyl.Web;

public class WeatherForecast
{
    public DateOnly Date { get; set; }

    public int TemperatureC { get; set; }

    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    public string? Summary { get; set; }
}
</file>

<file path="Htmx.Components/Attributes/TableActionAttributes.cs">
namespace Htmx.Components.Attributes;

[AttributeUsage(AttributeTargets.Method)]
public class TableEditActionAttribute : Attribute { }


[AttributeUsage(AttributeTargets.Method)]
public class TableRefreshActionAttribute : Attribute { }
</file>

<file path="Htmx.Components/Authorization/IPermissionRequirementFactory.cs">
using Microsoft.AspNetCore.Authorization;

namespace Htmx.Components.Authorization;

/// <summary>
/// Factory for creating authorization requirements based on roles or on resource and operation.
/// </summary>
public interface IPermissionRequirementFactory
{
    IAuthorizationRequirement ForOperation(string resource, string operation);
    IAuthorizationRequirement ForRoles(params string[] roles);
}
</file>

<file path="Htmx.Components/Authorization/IResourceOperationRegistry.cs">
namespace Htmx.Components.Authorization;

/// <summary>
/// Ensures that given resource and operation are registered with the authorization system.
/// </summary>
public interface IResourceOperationRegistry
{
    Task Register(string resource, string operation);
}
</file>

<file path="Htmx.Components/Configuration/ModelHandlerAttributeRegistrar.cs">
using System.Linq.Expressions;
using System.Reflection;
using FastExpressionCompiler;
using Htmx.Components.Attributes;
using Htmx.Components.Models;
using Htmx.Components.Services;
using Microsoft.Extensions.DependencyInjection;

namespace Htmx.Components.Configuration;

public static class ModelHandlerAttributeRegistrar
{
    private static readonly List<HandlerRegistration> _registrations = new();

    public static void RegisterAll(IModelRegistry registry)
    {
        // Ensure we only scan controllers once to avoid performance issues
        if (_registrations.Count == 0)
            ScanControllers();

        foreach (var reg in _registrations)
            reg.RegisterWithRegistry(registry);
    }

    private static void ScanControllers()
    {
        var controllerTypes = AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(a => a.GetTypes())
            .Where(t => typeof(Microsoft.AspNetCore.Mvc.Controller).IsAssignableFrom(t) && !t.IsAbstract);

        foreach (var controllerType in controllerTypes)
        {
            var configMethod = controllerType.GetMethods(BindingFlags.NonPublic | BindingFlags.Instance)
                .FirstOrDefault(m => m.GetCustomAttribute<ModelConfigAttribute>() != null);

            if (configMethod == null)
                continue;

            var configParam = configMethod.GetParameters().FirstOrDefault();
            if (configParam == null || !configParam.ParameterType.IsGenericType)
                continue;

            var builderType = configParam.ParameterType;
            var modelType = builderType.GetGenericArguments()[0];
            var keyType = builderType.GetGenericArguments()[1];

            // Find CRUD methods
            var methods = controllerType.GetMethods(BindingFlags.NonPublic | BindingFlags.Instance);
            var createMethod = methods.FirstOrDefault(m => m.GetCustomAttribute<ModelCreateAttribute>() != null);
            var readMethod = methods.FirstOrDefault(m => m.GetCustomAttribute<ModelReadAttribute>() != null);
            var updateMethod = methods.FirstOrDefault(m => m.GetCustomAttribute<ModelUpdateAttribute>() != null);
            var deleteMethod = methods.FirstOrDefault(m => m.GetCustomAttribute<ModelDeleteAttribute>() != null);

            // Get typeId from attribute (mandatory)
            string typeId = null!;
            if (configMethod != null)
            {
                var attr = configMethod.GetCustomAttribute<ModelConfigAttribute>();
                if (attr != null)
                    typeId = attr.ModelTypeId;
            }
            else if (createMethod != null)
            {
                var attr = createMethod.GetCustomAttribute<ModelCreateAttribute>();
                if (attr != null)
                    typeId = attr.ModelTypeId;
            }
            else if (readMethod != null)
            {
                var attr = readMethod.GetCustomAttribute<ModelReadAttribute>();
                if (attr != null)
                    typeId = attr.ModelTypeId;
            }
            else if (updateMethod != null)
            {
                var attr = updateMethod.GetCustomAttribute<ModelUpdateAttribute>();
                if (attr != null)
                    typeId = attr.ModelTypeId;
            }
            else if (deleteMethod != null)
            {
                var attr = deleteMethod.GetCustomAttribute<ModelDeleteAttribute>();
                if (attr != null)
                    typeId = attr.ModelTypeId;
            }
            if (typeId == null)
                throw new InvalidOperationException($"No Model* attribute with typeId found on controller {controllerType.Name}.");

            // Compile delegates using FastExpressionCompiler
            var controllerParam = Expression.Parameter(typeof(object), "controller");
            var argParam = Expression.Parameter(typeof(object), "arg");

            Func<object, object, Task<Result>>? createDelegate = null;
            if (createMethod != null)
            {
                var call = Expression.Call(
                    Expression.Convert(controllerParam, controllerType),
                    createMethod,
                    Expression.Convert(argParam, modelType));
                var lambda = Expression.Lambda<Func<object, object, Task<Result>>>(call, controllerParam, argParam);
                createDelegate = lambda.CompileFast();
            }

            Func<object, IQueryable>? readDelegate = null;
            if (readMethod != null)
            {
                var call = Expression.Call(
                    Expression.Convert(controllerParam, controllerType),
                    readMethod);
                var lambda = Expression.Lambda<Func<object, IQueryable>>(call, controllerParam);
                readDelegate = lambda.CompileFast();
            }

            Func<object, object, Task<Result>>? updateDelegate = null;
            if (updateMethod != null)
            {
                var call = Expression.Call(
                    Expression.Convert(controllerParam, controllerType),
                    updateMethod,
                    Expression.Convert(argParam, modelType));
                var lambda = Expression.Lambda<Func<object, object, Task<Result>>>(call, controllerParam, argParam);
                updateDelegate = lambda.CompileFast();
            }

            Func<object, object, Task<Result>>? deleteDelegate = null;
            if (deleteMethod != null)
            {
                var keyParam = Expression.Parameter(typeof(object), "key");
                var call = Expression.Call(
                    Expression.Convert(controllerParam, controllerType),
                    deleteMethod,
                    Expression.Convert(keyParam, keyType));
                var lambda = Expression.Lambda<Func<object, object, Task<Result>>>(call, controllerParam, keyParam);
                deleteDelegate = lambda.CompileFast();
            }

            _registrations.Add(new HandlerRegistration
            {
                TypeId = typeId,
                ModelType = modelType,
                KeyType = keyType,
                ControllerType = controllerType,
                ConfigMethod = configMethod!,
                CreateDelegate = createDelegate,
                ReadDelegate = readDelegate,
                UpdateDelegate = updateDelegate,
                DeleteDelegate = deleteDelegate
            });
        }
    }

    private class HandlerRegistration
    {
        public string TypeId = null!;
        public Type ModelType = null!;
        public Type KeyType = null!;
        public Type ControllerType = null!;
        public MethodInfo ConfigMethod = null!;
        public Func<object, object, Task<Result>>? CreateDelegate;
        public Func<object, IQueryable>? ReadDelegate;
        public Func<object, object, Task<Result>>? UpdateDelegate;
        public Func<object, object, Task<Result>>? DeleteDelegate;

        public void RegisterWithRegistry(IModelRegistry registry)
        {
            var registerMethod = typeof(IModelRegistry).GetMethod("Register")
                ?.MakeGenericMethod(ModelType, KeyType);

            registerMethod?.Invoke(registry,
            [
                TypeId,
                (Action<IServiceProvider, object>)((sp, builder) =>
                {
                    var controller = ActivatorUtilities.CreateInstance(sp, ControllerType);

                    // Call config method
                    ConfigMethod.Invoke(controller, new object[] { builder });

                    // Use reflection to get strongly-typed builder methods
                    var builderType = builder.GetType();

                    // WithCreate
                    if (CreateDelegate != null)
                    {
                        var withCreateMethod = builderType.GetMethod("WithCreate");
                        var param = Expression.Parameter(ModelType, "entity");
                        var body = Expression.Call(
                            Expression.Constant(CreateDelegate),
                            CreateDelegate.GetType().GetMethod("Invoke")!,
                            Expression.Constant(controller),
                            Expression.Convert(param, typeof(object))
                        );
                        var lambda = Expression.Lambda(
                            typeof(Func<,>).MakeGenericType(ModelType, typeof(Task<Result>)),
                            body, param);
                        var typedDelegate = lambda.CompileFast();
                        withCreateMethod!.Invoke(builder, new object[] { typedDelegate });
                    }

                    // WithUpdate
                    if (UpdateDelegate != null)
                    {
                        var withUpdateMethod = builderType.GetMethod("WithUpdate");
                        var param = Expression.Parameter(ModelType, "entity");
                        var body = Expression.Call(
                            Expression.Constant(UpdateDelegate),
                            UpdateDelegate.GetType().GetMethod("Invoke")!,
                            Expression.Constant(controller),
                            Expression.Convert(param, typeof(object))
                        );
                        var lambda = Expression.Lambda(
                            typeof(Func<,>).MakeGenericType(ModelType, typeof(Task<Result>)),
                            body, param);
                        var typedDelegate = lambda.CompileFast();
                        withUpdateMethod!.Invoke(builder, new object[] { typedDelegate });
                    }

                    // WithDelete
                    if (DeleteDelegate != null)
                    {
                        var withDeleteMethod = builderType.GetMethod("WithDelete");
                        var param = Expression.Parameter(KeyType, "key");
                        var body = Expression.Call(
                            Expression.Constant(DeleteDelegate),
                            DeleteDelegate.GetType().GetMethod("Invoke")!,
                            Expression.Constant(controller),
                            Expression.Convert(param, typeof(object))
                        );
                        var lambda = Expression.Lambda(
                            typeof(Func<,>).MakeGenericType(KeyType, typeof(Task<Result>)),
                            body, param);
                        var typedDelegate = lambda.CompileFast();
                        withDeleteMethod!.Invoke(builder, new object[] { typedDelegate });
                    }

                    // WithQueryable
                    if (ReadDelegate != null)
                    {
                        var withQueryableMethod = builderType.GetMethod("WithQueryable");
                        var funcType = typeof(Func<>).MakeGenericType(typeof(IQueryable<>).MakeGenericType(ModelType));
                        var body = Expression.Convert(
                            Expression.Call(
                                Expression.Constant(ReadDelegate),
                                ReadDelegate.GetType().GetMethod("Invoke")!,
                                Expression.Constant(controller)
                            ),
                            typeof(IQueryable<>).MakeGenericType(ModelType)
                        );
                        var lambda = Expression.Lambda(funcType, body);
                        var typedDelegate = lambda.CompileFast();
                        withQueryableMethod!.Invoke(builder, new object[] { typedDelegate });
                    }
                })
            ]);
        }
    }
}
</file>

<file path="Htmx.Components/Extensions/ActionContextExtensions.cs">
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;

namespace Htmx.Components.Extensions;

public static class ActionContextExtensions
{
    /// <summary>
    /// Provides a sanity check to fail early if IActionContextAccessor is not initialized
    /// </summary>
    public static ActionContext GetValidActionContext(this IActionContextAccessor actionContextAccessor)
    {
        if (actionContextAccessor.ActionContext?.HttpContext == null)
            throw new InvalidOperationException("HttpContext is not available.");
        if (actionContextAccessor.ActionContext?.RouteData == null)
            throw new InvalidOperationException("RouteData is not available.");
        if (actionContextAccessor.ActionContext?.ActionDescriptor == null)
            throw new InvalidOperationException("ActionDescriptor is not available.");

        return actionContextAccessor.ActionContext;
    }
}
</file>

<file path="Htmx.Components/Extensions/OidcOptionsExtensions.cs">
using Microsoft.AspNetCore.Authentication.OpenIdConnect;

namespace Htmx.Components;

public static class OidcOptionsExtensions
{
    public static void ConfigureHtmxAuthPopup(this OpenIdConnectOptions oidc, string url)
    {
        oidc.Events.OnRedirectToIdentityProvider = context =>
        {
            if (context.Request.IsHtmx())
            {
                // We need to tell HTMX to redirect to the login page and skip the default redirect
                context.Response.StatusCode = 401;
                context.Response.Headers["X-Auth-Failure"] = $"popup-login:{url}";
                context.HandleResponse();
            }
            return Task.CompletedTask;
        };
        oidc.Events.OnAccessDenied = context =>
        {
            if (context.Request.IsHtmx())
            {
                // We need to tell HTMX that auth was denied and skip the default redirect
                context.Response.StatusCode = 403;
                context.Response.Headers["HX-Trigger"] = "auth-denied";
                context.HandleResponse();
            }
            return Task.CompletedTask;
        };
    }
}
</file>

<file path="Htmx.Components/Extensions/PageStateExtensions.cs">
using Htmx.Components.State;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Htmx.Components;

public static class PageStateExtensions
{
    public static IPageState GetPageState(this HttpContext context)
    {
        if (context.Items.TryGetValue(PageStateMiddleware.HttpContextPageStateKey, out var value) && value is IPageState manager)
            return manager;
        throw new InvalidOperationException("PageState not found. Is PageStateMiddleware registered?");
    }

    public static IPageState GetPageState(this Controller controller)
        => controller.HttpContext.GetPageState();
}
</file>

<file path="Htmx.Components/Filters/NavActionResultFilter.cs">
using Htmx.Components.Attributes;
using Htmx.Components.NavBar;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Htmx.Components.Filters;

public class NavActionResultFilter : OobResultFilterBase<NavActionAttribute>
{
    private readonly INavProvider _navProvider;

    public NavActionResultFilter(INavProvider navProvider)
    {
        _navProvider = navProvider;
    }

    protected override Task<string?> GetViewNameForNonHtmxRequest(NavActionAttribute attribute, ControllerActionDescriptor cad)
    {
        return Task.FromResult(attribute.ViewName);
    }

    protected override async Task UpdateMultiSwapViewResultAsync(NavActionAttribute attribute,
        MultiSwapViewResult multiSwapViewResult, ResultExecutingContext context)
    {
        if (multiSwapViewResult.Model == null)
        {
            throw new InvalidOperationException($"MultiSwapViewResult must have a model set when filtering via {nameof(NavActionAttribute)}.");
        }
        var navbar = await _navProvider.BuildAsync();
        // TODO: Make default view and component names configurable
        multiSwapViewResult
            .WithOobContent("NavBar", navbar)
            .WithOobContent(attribute.ViewName ?? "MainContent", multiSwapViewResult.Model);
    }
}
</file>

<file path="Htmx.Components/Filters/OobResultFilterBase.cs">
using Htmx.Components.Attributes;
using Htmx.Components.NavBar;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.ViewFeatures;

namespace Htmx.Components.Filters;

/// <summary>
/// Base class for OOB result filters that handle specific attributes. Does most of the work,
/// so that derived classes only need to implement the view name retrieval and multi-swap update logic. 
/// </summary>
/// <typeparam name="T">The</typeparam>
public abstract class OobResultFilterBase<T> : IAsyncResultFilter
    where T : Attribute
{
    public async Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next)
    {
        if (context.ActionDescriptor is ControllerActionDescriptor cad)
        {
            var attribute = cad.MethodInfo.GetCustomAttributes(typeof(T), true).Cast<T>().FirstOrDefault();
            if (attribute != null && (context.Result is ObjectResult || context.Result is MultiSwapViewResult))
            {
                if (context.HttpContext.Request.IsHtmx())
                {
                    MultiSwapViewResult multiSwapViewResult = null!;
                    if (context.Result is ObjectResult objResult)
                    {
                        multiSwapViewResult = new MultiSwapViewResult
                        {
                            Model = objResult.Value
                        };
                    }
                    else
                    {
                        multiSwapViewResult = (MultiSwapViewResult)context.Result;
                    }
                    await UpdateMultiSwapViewResultAsync(attribute, multiSwapViewResult, context);
                    context.Result = multiSwapViewResult;
                }
                else
                {
                    var viewName = await GetViewNameForNonHtmxRequest(attribute, cad);
                    var controller = (Controller)context.Controller;
                    context.Result = new ViewResult
                    {
                        ViewName = viewName,
                        ViewData = new ViewDataDictionary(controller.ViewData)
                        {
                            Model = context.Result is ObjectResult obj ? obj.Value : null
                        },
                        TempData = controller.TempData
                    };
                }
            }
        }
        await next();
    }

    /// <summary>
    /// Gets the view name for non-HTMX requests. This method should be overridden by derived classes to provide a specific view name.
    /// If this filter is not applicable to non-HTMX requests, it should be overridden to throw an exception.
    /// </summary>
    /// <param name="attribute"></param>
    /// <param name="cad"></param>
    /// <returns></returns>
    protected virtual Task<string?> GetViewNameForNonHtmxRequest(T attribute, ControllerActionDescriptor cad)
    {
        // Default implementation returns null, derived classes should override this to provide a view name.
        return Task.FromResult<string?>(null);
    }
    protected abstract Task UpdateMultiSwapViewResultAsync(T attribute, MultiSwapViewResult multiSwapViewResult, ResultExecutingContext context);

}
</file>

<file path="Htmx.Components/Filters/PageStateOobInjectorFilter.cs">
using Htmx.Components.Models;
using Htmx.Components.State;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Htmx.Components.Filters;

public class PageStateOobInjectorFilter : IAsyncResultFilter
{
    private readonly IPageState _pageState;

    public PageStateOobInjectorFilter(IPageState pageState)
    {
        _pageState = pageState;
    }

    public async Task OnResultExecutionAsync(ResultExecutingContext context, ResultExecutionDelegate next)
    {
        if (context.Result is MultiSwapViewResult multiSwap && _pageState.IsDirty)
        {
            var oobView = new HtmxViewInfo
            {
                ViewName = "_PageStateHiddenInput",
                Model = _pageState.Encrypted,
                TargetDisposition = OobTargetDisposition.OuterHtml
            };

            multiSwap.WithOobContent(oobView);
        }

        await next();
    }
}
</file>

<file path="Htmx.Components/Filters/TableOobEditFilter.cs">
using Htmx.Components.Attributes;
using Htmx.Components.Models;
using Htmx.Components.Models.Table;
using Htmx.Components.Table;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Htmx.Components.Filters;

public class TableOobEditFilter : OobResultFilterBase<TableEditActionAttribute>
{
    private readonly ITableProvider _tableProvider;

    public TableOobEditFilter(ITableProvider tableProvider)
    {
        _tableProvider = tableProvider;
    }

    protected override Task UpdateMultiSwapViewResultAsync(TableEditActionAttribute attribute, MultiSwapViewResult multiSwapViewResult, ResultExecutingContext context)
    {
        if (multiSwapViewResult.Model == null)
        {
            throw new InvalidOperationException($"MultiSwapViewResult must have a model set when filtering via {nameof(TableEditActionAttribute)}.");
        }
        var tableModel = (ITableModel)multiSwapViewResult.Model;
        multiSwapViewResult
            .WithOobContent(tableModel.TableViewPaths.EditClassToggle, tableModel)
            .WithOobContent(tableModel.TableViewPaths.TableActionList, tableModel);
        foreach (var row in tableModel.Rows)
        {
            multiSwapViewResult.WithOobContent(tableModel.TableViewPaths.Row, (tableModel, row),
                row.TargetDisposition ?? OobTargetDisposition.OuterHtml, row.TargetSelector);
        }
        return Task.CompletedTask;
    }

    protected override Task<string?> GetViewNameForNonHtmxRequest(TableEditActionAttribute attribute, ControllerActionDescriptor cad)
    {
        throw new InvalidOperationException($"{nameof(TableEditActionAttribute)} does not support non-HTMX requests.");
    }
}
</file>

<file path="Htmx.Components/Filters/TableOobRefreshFilter.cs">
using Htmx.Components.Attributes;
using Htmx.Components.Models;
using Htmx.Components.Models.Table;
using Htmx.Components.Table;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Filters;

namespace Htmx.Components.Filters;

public class TableOobRefreshFilter : OobResultFilterBase<TableRefreshActionAttribute>
{
    protected override Task UpdateMultiSwapViewResultAsync(TableRefreshActionAttribute attribute, MultiSwapViewResult multiSwapViewResult, ResultExecutingContext context)
    {
        if (multiSwapViewResult.Model == null)
        {
            throw new InvalidOperationException($"MultiSwapViewResult must have a model set when filtering via {nameof(TableRefreshActionAttribute)}.");
        }
        var tableModel = (ITableModel)multiSwapViewResult.Model;
        multiSwapViewResult
            .WithOobContent(tableModel.TableViewPaths.TableActionList, tableModel)
            .WithOobContent(tableModel.TableViewPaths.EditClassToggle, tableModel)
            .WithOobContent(tableModel.TableViewPaths.Body, tableModel)
            .WithOobContent(tableModel.TableViewPaths.Pagination, tableModel)
            .WithOobContent(tableModel.TableViewPaths.Header, tableModel);
        return Task.CompletedTask;
    }

    protected override Task<string?> GetViewNameForNonHtmxRequest(TableRefreshActionAttribute attribute, ControllerActionDescriptor cad)
    {
        throw new InvalidOperationException($"{nameof(TableRefreshActionAttribute)} does not support non-HTMX requests.");
    }

}
</file>

<file path="Htmx.Components/Input/Validation.cs">
namespace Htmx.Components.Input.Validation;

public interface IValidator
{
    string Id { get; }
    ValidationResult Validate(string? value);
}

public class ValidationResult
{
    public bool IsValid { get; set; }
    public string? ErrorMessage { get; set; }

    public static ValidationResult Success() => new() { IsValid = true };
    public static ValidationResult Fail(string message) => new() { IsValid = false, ErrorMessage = message };
}

public class ValidatorRegistry
{
    private readonly Dictionary<string, IValidator> _validators = new();

    public void Register(IValidator validator)
    {
        if (_validators.ContainsKey(validator.Id))
            throw new InvalidOperationException($"Validator with ID '{validator.Id}' already registered.");
        _validators.Add(validator.Id, validator);
    }

    public IValidator? Get(string id)
    {
        _validators.TryGetValue(id, out var validator);
        return validator;
    }
}
</file>

<file path="Htmx.Components/Models/Table/TableState.cs">
namespace Htmx.Components.Models.Table;

public class TableState
{
    public string? SortColumn { get; set; }
    public string? SortDirection { get; set; } = "asc";
    public int Page { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    
    public Dictionary<string, string> Filters { get; set; } = new();
    public Dictionary<string, (string Min, string Max)> RangeFilters { get; set; } = new();
}
</file>

<file path="Htmx.Components/Models/Table/TableViewPaths.cs">
namespace Htmx.Components.Models.Table;

public class TableViewPaths
{
    public string Table { get; set; } = "_Table";
    public string Body { get; set; } = "_TableBody";
    public string Cell { get; set; } = "_TableCell";
    public string CellActionList { get; set; } = "_TableCellActionList";
    public string TableActionList { get; set; } = "_TableActionList";
    public string FilterDateRange { get; set; } = "_TableFilterDateRange";
    public string FilterText { get; set; } = "_TableFilterText";
    public string Header { get; set; } = "_TableHeader";
    public string Pagination { get; set; } = "_TablePagination";
    public string CellEditText { get; set; } = "_TableCellEditText";
    public string Row { get; set; } = "_TableRow";
    public string EditClassToggle { get; set; } = "_TableEditClassToggle";
}
</file>

<file path="Htmx.Components/Models/Result.cs">
using System.Runtime.CompilerServices;
using Htmx.Components.Extensions;
using Serilog;
using Serilog.Context;
using Serilog.Events;

namespace Htmx.Components.Models;

public class Result<T> : Result
{
    public T Value { get; }

    public Result(T value, string message = "") : base(message)
    {
        Value = value;
    }

    public static implicit operator Result<T>(Result.ResultError error) => new Result<T>(default!) { Message = error.ErrorMessage, IsError = true };
}

// It turned out VS caused some auto-fill headaches when mistyping/fatfingering "Result<int>.Error(...". And it's kind of verbose having to always type
// the generic argument. So adding a bit of type inference and implicit casting makes for a better experience without getting too fancy...
public class Result
{
    public bool IsError { get; protected set; }
    public string Message { get; protected set; } = "";

    public Result(string message)
    {
        Message = message;
    }

    public static implicit operator Result(ResultError error) => new Result(error.ErrorMessage) { IsError = true };

    public static ResultError Error(string messageTemplate,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate);
        return new ResultError(messageTemplate);
    }

    public static ResultError Error(string messageTemplate, object prop0, object prop1, object prop2,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0, prop1, prop2);
        return new ResultError(messageTemplate.FormatTemplate(prop0, prop1, prop2));
    }

    public static ResultError Error(string messageTemplate, object prop0, object prop1,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0, prop1);
        return new ResultError(messageTemplate.FormatTemplate(prop0, prop1));
    }

    public static ResultError Error(string messageTemplate, object prop0,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0);
        return new ResultError(messageTemplate.FormatTemplate(prop0));
    }

    public static Result<T> Value<T>(T value, string message = "") => new Result<T>(value, message);

    public static Result Ok(string message = "") => new Result(message);

    public class ResultError
    {
        public string ErrorMessage { get; }
        public ResultError(string errorMessage) => ErrorMessage = errorMessage;
    }

}
</file>

<file path="Htmx.Components/State/PageStateMiddleware.cs">
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Primitives;

namespace Htmx.Components.State;

public class PageStateMiddleware
{
    private readonly RequestDelegate _next;
    internal const string HttpContextPageStateKey = "PageState";
    internal const string PageStateHeaderKey = "X-Page-State";

    public PageStateMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context, IPageState pageState)
    {
        string? encryptedState = null;

        if (context.Request.Headers.TryGetValue(PageStateHeaderKey, out var headerValue))
        {
            encryptedState = headerValue.FirstOrDefault();
        }

        if (!string.IsNullOrEmpty(encryptedState))
        {
            pageState.Load(encryptedState);
        }

        // Attach to HttpContext
        context.Items[HttpContextPageStateKey] = pageState;

        await _next(context);
    }

    public static IPageState GetPageState(HttpContext context)
    {
        return context.Items[HttpContextPageStateKey] as IPageState 
            ?? throw new InvalidOperationException("PageState not available");
    }
}
</file>

<file path="Htmx.Components/TagHelpers/PageStateTagHelper.cs">
using Htmx.Components.State;
using Microsoft.AspNetCore.Razor.TagHelpers;

namespace Htmx.Components.TagHelpers;

[HtmlTargetElement("htmx-page-state")]
public class PageStateTagHelper : TagHelper
{
    private readonly IPageState _pageState;

    public PageStateTagHelper(IPageState pageState)
    {
        _pageState = pageState;
    }

    /// <summary>
    /// Optional override for the container div id. Defaults to 'page_state_container'.
    /// </summary>
    public string ContainerId { get; set; } = "page_state_container";

    public override void Process(TagHelperContext context, TagHelperOutput output)
    {
        // We want to render a <div> containing the hidden input
        output.TagName = "div";
        output.Attributes.SetAttribute("id", ContainerId);

        var serializedState = _pageState.Encrypted;

        output.Content.SetHtmlContent($@"
            <input type=""hidden"" id=""page_state"" name=""page_state"" value=""{serializedState}"">
        ");
    }
}
</file>

<file path="Htmx.Components/Utilities/GenericMethodInvoker.cs">
using System.Collections.Concurrent;
using System.Linq.Expressions;
using System.Reflection;
using FastExpressionCompiler;

namespace Htmx.Components.Utilities;

public static class GenericMethodInvoker
{
    private static readonly ConcurrentDictionary<string, Delegate> _delegateCache = new();

    private static Delegate GetOrAddDelegate(
        Type targetType,
        string methodName,
        Type[] genericTypes,
        Type[] paramTypes,
        bool isStatic,
        Type? expectedReturnType = null)
    {
        var cacheKey = $"{targetType.FullName}|{methodName}|{string.Join("|", genericTypes.Select(t => t.FullName))}|{string.Join("|", paramTypes.Select(t => t.FullName))}|{expectedReturnType?.FullName}";
        return _delegateCache.GetOrAdd(cacheKey, _ =>
        {
            var flags = BindingFlags.NonPublic | BindingFlags.Public | (isStatic ? BindingFlags.Static : BindingFlags.Instance);
            var method = targetType.GetMethod(methodName, flags);
            if (method == null)
                throw new InvalidOperationException($"Method '{methodName}' not found on {targetType.Name}.");

            if (genericTypes.Length > 0)
                method = method.MakeGenericMethod(genericTypes);

            var instanceParam = Expression.Parameter(typeof(object), "instance");
            var argsParam = Expression.Parameter(typeof(object[]), "args");

            var callParams = method.GetParameters()
                .Select((p, i) =>
                    Expression.Convert(
                        Expression.ArrayIndex(argsParam, Expression.Constant(i)),
                        p.ParameterType))
                .ToArray();

            Expression callExpr = method.IsStatic
                ? Expression.Call(method, callParams)
                : Expression.Call(Expression.Convert(instanceParam, targetType), method, callParams);

            // Handle void return
            if (method.ReturnType == typeof(void))
            {
                var lambda = Expression.Lambda<Action<object, object[]>>(callExpr, instanceParam, argsParam);
                return lambda.CompileFast();
            }

            // Handle all other return types
            var converted = Expression.Convert(callExpr, typeof(object));
            var lambda2 = Expression.Lambda<Func<object, object[], object>>(converted, instanceParam, argsParam);
            return lambda2.CompileFast();
        });
    }

    // Synchronous void or value-returning methods
    public static void InvokeVoid(
        object instance,
        string methodName,
        Type[] genericTypes,
        params object[] parameters)
    {
        var type = instance.GetType();
        var paramTypes = parameters.Select(p => p?.GetType() ?? typeof(object)).ToArray();
        var del = GetOrAddDelegate(type, methodName, genericTypes, paramTypes, false, typeof(void));
        if (del is Action<object, object[]> action)
            action(instance, parameters);
        else
            throw new InvalidOperationException("Delegate type not supported for void method.");
    }

    public static TReturn Invoke<TReturn>(
        object instance,
        string methodName,
        Type[] genericTypes,
        params object[] parameters)
    {
        var type = instance.GetType();
        var paramTypes = parameters.Select(p => p?.GetType() ?? typeof(object)).ToArray();
        var del = GetOrAddDelegate(type, methodName, genericTypes, paramTypes, false, typeof(TReturn));
        if (del is Func<object, object[], object> func)
            return (TReturn)func(instance, parameters)!;
        throw new InvalidOperationException("Delegate type not supported for value-returning method.");
    }

    // Async Task-returning methods
    public static async Task InvokeAsync(
        object instance,
        string methodName,
        Type[] genericTypes,
        params object[] parameters)
    {
        var result = Invoke<object>(instance, methodName, genericTypes, parameters);
        if (result is Task task)
            await task;
        else
            throw new InvalidOperationException("Method does not return Task.");
    }

    // Async Task<TResult>-returning methods
    public static async Task<TResult> InvokeAsync<TResult>(
        object instance,
        string methodName,
        Type[] genericTypes,
        params object[] parameters)
    {
        var result = Invoke<object>(instance, methodName, genericTypes, parameters);
        if (result is Task<TResult> task)
            return await task;
        throw new InvalidOperationException("Method does not return Task<TResult>.");
    }
}
</file>

<file path="Htmx.Components/Views/Shared/_PageStateHiddenInput.cshtml">
@model string

<div id="page_state_container">
    <input type="hidden" id="page_state" name="page_state" value="@Model" />
</div>
</file>

<file path="Htmx.Components/wwwroot/css/table-overrides.css">
/* Dim and disable everything except the editing row */
.editing-mode tbody > tr:not(.editing-row),
.editing-mode thead,
.editing-mode #table-pagination,
.editing-mode #table-filter-row {
  opacity: 0.4;
  pointer-events: none;
  user-select: none;
}

/* Re-enable interactivity for the row being edited */
.editing-mode .editing-row {
  opacity: 1;
  pointer-events: auto;
}

/* Disable all buttons globally in editing mode */
.editing-mode .btn,
.editing-mode input,
.editing-mode select,
.editing-mode textarea,
.editing-mode a {
  pointer-events: none;
  opacity: 0.4;
}

/* Enable interaction inside the editing row */
.editing-mode .editing-row .btn,
.editing-mode .editing-row input,
.editing-mode .editing-row select,
.editing-mode .editing-row textarea,
.editing-mode .editing-row a {
  pointer-events: auto;
  opacity: 1;
}
</file>

<file path="Htmx.Components/wwwroot/js/htmx-auth-retry.js">
// always capture details of the last htmx event in order to
// refire it after error recovery, such as login after a 401 error
let lastRequestContext = null;
let retryInProgress = false;

// capture the triggering event and metadata
document.body.addEventListener("htmx:beforeRequest", function (evt) {
    const config = evt.detail.requestConfig;
    const triggeringEvent = config.triggeringEvent;

    if (!(triggeringEvent instanceof Event)) return;

    lastRequestContext = {
        elt: config.elt,
        eventType: triggeringEvent.type,
        eventClass: triggeringEvent.constructor.name,
        eventInit: getEventInit(triggeringEvent),
    };
});

document.body.addEventListener('htmx:responseError', async function (evt) {
    const xhr = evt.detail.xhr;

    const failureHeader = xhr.getResponseHeader("X-Auth-Failure");
    if (!retryInProgress && xhr.status === 401 && failureHeader?.startsWith("popup-login:")) {
        // get the URL from the header
        const loginUrl = failureHeader.substring("popup-login:".length);
        const popup = window.open(loginUrl, 'authPopup', 'width=600,height=700');

        const loginSuccess = await new Promise(resolve => {
            window.addEventListener('message', function listener(e) {
                if (e.data === 'login-success') {
                    window.removeEventListener('message', listener);
                    resolve(true);
                }
            });
        });

        if (loginSuccess && lastRequestContext?.elt) {
            const { elt, eventType, eventClass, eventInit } = lastRequestContext;

            const EventCtor = window[eventClass] || Event;
            const retryEvent = new EventCtor(eventType, eventInit);

            // dispatch the reconstructed event
            elt.dispatchEvent(retryEvent);
        }

        // cleanup
        retryInProgress = false;
        lastRequestContext = null;
    }
});

// capture information neccessary to reconstruct the triggering event
function getEventInit(event) {
    const base = {
        bubbles: event.bubbles,
        cancelable: event.cancelable,
        composed: event.composed,
    };

    if (event instanceof MouseEvent) {
        return {
            ...base,
            screenX: event.screenX,
            screenY: event.screenY,
            clientX: event.clientX,
            clientY: event.clientY,
            ctrlKey: event.ctrlKey,
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            metaKey: event.metaKey,
            button: event.button,
            buttons: event.buttons,
            relatedTarget: event.relatedTarget,
        };
    }

    if (event instanceof KeyboardEvent) {
        return {
            ...base,
            key: event.key,
            code: event.code,
            location: event.location,
            ctrlKey: event.ctrlKey,
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            metaKey: event.metaKey,
            repeat: event.repeat,
            isComposing: event.isComposing,
        };
    }

    if (event instanceof CustomEvent) {
        return {
            ...base,
            detail: event.detail,
        };
    }

    return base;
}
</file>

<file path="Htmx.Components/wwwroot/js/page-state-behavior.js">
document.addEventListener('htmx:configRequest', function (event) {
  // Add the page state value to the request headers
  const pageStateInput = document.querySelector('input[name="page_state"]');

  if (!pageStateInput) return;

  const pageStateValue = pageStateInput.value;

  if (!pageStateValue) return;

  event.detail.headers['X-Page-State'] = pageStateValue;
});
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 UC Davis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="README.md">
# Crucible
</file>

<file path="CruSibyl.Core/Domain/Dependency.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(ManifestId), nameof(PackageVersionId), IsUnique = true)]
public class Dependency
{
    public int Id { get; set; }

    [Required]
    public int ManifestId { get; set; }

    [ForeignKey(nameof(ManifestId))]
    public Manifest Manifest { get; set; } = null!;

    [Required]
    public int PackageVersionId { get; set; }

    [ForeignKey(nameof(PackageVersionId))]
    public PackageVersion PackageVersion { get; set; } = null!;

    public bool? IsDevDependency { get; set; } = null;
}
</file>

<file path="CruSibyl.Core/Domain/Manifest.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(RepoId), nameof(FilePath), IsUnique = true)]
public class Manifest
{
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public int Id { get; set; }

    [Required]
    public int RepoId { get; set; }

    [ForeignKey(nameof(RepoId))]
    public Repo Repo { get; set; } = null!;

    [Required]
    public int PlatformVersionId { get; set; }

    [ForeignKey(nameof(PlatformVersionId))]
    public PlatformVersion PlatformVersion { get; set; } = null!;

    [Required, MaxLength(500)]
    public string FilePath { get; set; } = null!;

    public List<Dependency> Dependencies { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Domain/Package.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using CruSibyl.Core.Models;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(Name), nameof(PlatformId), IsUnique = true)]
[Index(nameof(ScanStatus))]
[Index(nameof(LastScannedAt))]
[Index(nameof(ScanNumber))]
public class Package
{
    public int Id { get; set; }

    [Required, MaxLength(255)]
    public string Name { get; set; } = null!;

    [Required]
    public int PlatformId { get; set; }

    [ForeignKey(nameof(PlatformId))]
    public Platform Platform { get; set; } = null!;

    public DateTime? LastScannedAt { get; set; }

    public ScanStatus? ScanStatus { get; set; }

    public string? ScanMessage { get; set; }

    public int? ScanNumber { get; set; }

    public List<PackageVersion> Versions { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Domain/PackageVersion.cs">
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(PackageId), nameof(Version), IsUnique = true)]
public class PackageVersion
{
    public int Id { get; set; }

    [Required]
    public int PackageId { get; set; }

    [ForeignKey(nameof(PackageId))]
    public Package Package { get; set; } = null!;

    [Required, MaxLength(50)]
    public string Version { get; set; } = null!;

    public int? Major { get; set; }

    public int? Minor { get; set; }

    public int? Patch { get; set; }

    public string? PreRelease { get; set; }
}
</file>

<file path="CruSibyl.Core/Domain/Repo.cs">
using System.ComponentModel.DataAnnotations;
using CruSibyl.Core.Models;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(Name), IsUnique = true)]
[Index(nameof(ScanStatus))]
[Index(nameof(LastScannedAt))]
[Index(nameof(ScanNumber))]
public class Repo
{
    public int Id { get; set; }

    [Required, MaxLength(255)]
    public string Name { get; set; } = null!;

    public string? Description { get; set; }

    public DateTime? LastScannedAt { get; set; }

    public ScanStatus? ScanStatus { get; set; }

    public string? ScanMessage { get; set; }

    public int? ScanNumber { get; set; }


    public List<Manifest> Manifests { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/20231219174004_Initial.Designer.cs">
// <auto-generated />
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    [Migration("20231218214009_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Models/Settings/AuthSettings.cs">
namespace CruSibyl.Core.Models.Settings;
public class AuthSettings
{
    public string IamKey { get; set; } = "";
    public string Authority { get; set; } = "";
}
</file>

<file path="CruSibyl.Core/Models/Settings/GitHubSettings.cs">
public class GitHubSettings
    {
        public string RepoOwner { get; set; } = "ucdavis";
        public string AccessToken { get; set; } = "";
    }
</file>

<file path="CruSibyl.Core/Models/Result.cs">
using System.Runtime.CompilerServices;
using CruSibyl.Core.Extensions;
using Serilog;
using Serilog.Context;
using Serilog.Events;

namespace CruSibyl.Core.Models;

public class Result<T> : Result
{
    public T Value { get; }

    public Result(T value, string message = "") : base(message)
    {
        Value = value;
    }

    public static implicit operator Result<T>(Result.ResultError error) => new Result<T>(default!) { Message = error.ErrorMessage, IsError = true };
}

// It turned out VS caused some auto-fill headaches when mistyping/fatfingering "Result<int>.Error(...". And it's kind of verbose having to always type
// the generic argument. So adding a bit of type inference and implicit casting makes for a better experience without getting too fancy...
public class Result
{
    public bool IsError { get; protected set; }
    public string Message { get; protected set; } = "";

    public Result(string message)
    {
        Message = message;
    }

    public static implicit operator Result(ResultError error) => new Result(error.ErrorMessage) { IsError = true };

    public static ResultError Error(string messageTemplate,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate);
        return new ResultError(messageTemplate);
    }

    public static ResultError Error(string messageTemplate, object prop0, object prop1, object prop2,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0, prop1, prop2);
        return new ResultError(messageTemplate.FormatTemplate(prop0, prop1, prop2));
    }

    public static ResultError Error(string messageTemplate, object prop0, object prop1,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0, prop1);
        return new ResultError(messageTemplate.FormatTemplate(prop0, prop1));
    }

    public static ResultError Error(string messageTemplate, object prop0,
        LogEventLevel logLevel = LogEventLevel.Error,
        [CallerFilePath] string callerFilePath = "",
        [CallerLineNumber] int callerLineNumber = 0)
    {
        using var _ = LogContext.PushProperty("FileName", Path.GetFileName(callerFilePath));
        LogContext.PushProperty("LineNumber", callerLineNumber);
        Log.Write(logLevel, messageTemplate, prop0);
        return new ResultError(messageTemplate.FormatTemplate(prop0));
    }

    public static Result<T> Value<T>(T value, string message = "") => new Result<T>(value, message);

    public static Result Ok(string message = "") => new Result(message);

    public class ResultError
    {
        public string ErrorMessage { get; }
        public ResultError(string errorMessage) => ErrorMessage = errorMessage;
    }

}
</file>

<file path="CruSibyl.Core/Services/IdentityService.cs">
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using CruSibyl.Core.Models.Settings;
using Ietws;
using Microsoft.Extensions.Options;

namespace CruSibyl.Core.Services;

public interface IIdentityService
{
    Task<User?> GetByEmail(string email);
    Task<User?> GetByKerberos(string kerb);
}

public class IdentityService : IIdentityService
{
    private readonly AppDbContext _dbContext;
    private readonly AuthSettings _authSettings;

    public IdentityService(AppDbContext dbContext, IOptions<AuthSettings> authSettings)
    {
        _dbContext = dbContext;
        _authSettings = authSettings.Value;
    }

    public async Task<User?> GetByEmail(string email)
    {
        var clientws = new IetClient(_authSettings.IamKey);
        // get IAM from email
        var iamResult = await clientws.Contacts.Search(ContactSearchField.email, email);
        var iamId = iamResult.ResponseData.Results.Length > 0 ? iamResult.ResponseData.Results[0].IamId : "";
        if (string.IsNullOrWhiteSpace(iamId))
        {
            return null;
        }
        // return info for the user identified by this IAM 
        var result = await clientws.Kerberos.Search(KerberosSearchField.iamId, iamId);

        if (result.ResponseData.Results.Length > 0)
        {
            var ucdKerbPerson = result.ResponseData.Results.First();
            var user = CreateUser(email, ucdKerbPerson, iamId);
            return user;
        }
        return null;
    }

    public async Task<User?> GetByKerberos(string kerb)
    {
        var clientws = new IetClient(_authSettings.IamKey);
        var ucdKerbResult = await clientws.Kerberos.Search(KerberosSearchField.userId, kerb);

        if (ucdKerbResult.ResponseData.Results.Length == 0)
        {
            return null;
        }

        if (ucdKerbResult.ResponseData.Results.Length != 1)
        {
            var iamIds = ucdKerbResult.ResponseData.Results.Select(a => a.IamId).Distinct().ToArray();
            var userIDs = ucdKerbResult.ResponseData.Results.Select(a => a.UserId).Distinct().ToArray();
            if (iamIds.Length != 1 && userIDs.Length != 1)
            {
                throw new Exception($"IAM issue with non unique values for kerbs: {string.Join(',', userIDs)} IAM: {string.Join(',', iamIds)}");
            }
        }

        var ucdKerbPerson = ucdKerbResult.ResponseData.Results.First();

        // find their email
        var ucdContactResult = await clientws.Contacts.Get(ucdKerbPerson.IamId);

        if (ucdContactResult.ResponseData.Results.Length == 0)
        {
            return null;
        }

        var ucdContact = ucdContactResult.ResponseData.Results.First();
        var rtValue = CreateUser(ucdContact.Email, ucdKerbPerson, ucdKerbPerson.IamId);

        if (string.IsNullOrWhiteSpace(rtValue.Email))
        {
            if (!string.IsNullOrWhiteSpace(ucdKerbPerson.UserId))
            {
                rtValue.Email = $"{ucdKerbPerson.UserId}@ucdavis.edu";
            }
        }

        return rtValue;
    }

    private User CreateUser(string email, KerberosResult ucdKerbPerson, string iamId)
    {
        var user = new User()
        {
            FirstName = ucdKerbPerson.FirstName,
            LastName = ucdKerbPerson.LastName,
            Kerberos = ucdKerbPerson.UserId,
            Email = email,
            Iam = iamId,
            MothraId = ucdKerbPerson.MothraId
        };
        return user;
    }
}
</file>

<file path="CruSibyl.Core/CreateMigration.sh">
[ "$#" -eq 1 ] || { echo "1 argument required, $# provided. Useage: sh CreateMigration <MigrationName>"; exit 1; }

export Migration__UseSql=false
dotnet ef migrations add $1 --context AppDbContextSqlite --output-dir Migrations/Sqlite --project CruSibyl.Core.csproj --startup-project ../CruSibyl.Web/CruSibyl.Web.csproj -- --provider Sqlite
export Migration__UseSql=true
dotnet ef migrations add $1 --context AppDbContextSqlServer --output-dir Migrations/SqlServer --project CruSibyl.Core.csproj --startup-project ../CruSibyl.Web/CruSibyl.Web.csproj -- --provider SqlServer
# usage from PM console in the CruSibyl.Core directory: ./CreateMigration.sh <MigrationName>

echo 'All done';
</file>

<file path="CruSibyl.Jobs.ManifestSync/appsettings.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "Serilog": {
    "AppName": "CruSibyl.Jobs.ManifestSync",
    "Environment": "[External]",
    "ElasticUrl": "[External]"
  },
  "ElasticApm": {
    "Enabled": false,
    "SecretToken": "[External]",
    "ServerUrls": "[External]",
    "ServiceName": "CruSibyl",
    "Environment": "Development"
  },
  "ConnectionStrings": {
    "DefaultConnection": "[External]"
  },
  "GitHub": {
    "RepoOwner": "ucdavis",
    "AccessToken": "[External]"
  }
}
</file>

<file path="CruSibyl.Jobs.ManifestSync/Program.cs">
using System;
using System.Threading.Tasks;
using CruSibyl.Core.Data;
using CruSibyl.Core.Models.Settings;
using CruSibyl.Core.Services;
using CruSibyl.Jobs.Core;
using Microsoft.AspNetCore.Http;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Serilog;

namespace CruSibyl.Jobs.ManifestSync
{
    class Program : JobBase
    {
        static int Main(string[] args)
        {
            try
            {
                Configure(jobName: typeof(Program).Assembly.GetName().Name, jobId: Guid.NewGuid());
                var assembyName = typeof(Program).Assembly.GetName();

                Log.Information("Running {job} build {build}", assembyName.Name, assembyName.Version);

                // setup di
                var provider = ConfigureServices();

                var syncService = provider.GetRequiredService<IManifestSyncService>();

                var result = SyncManifests(syncService).GetAwaiter().GetResult();

                if (result.IsError)
                {
                    Log.Error("There was an error syncing repository manifests. See previous log entries for details.");
                    return 1;
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Unhandled exception");
                return 1;
            }
            finally
            {
                Log.CloseAndFlush();
            }

            return 0;
        }


        private static ServiceProvider ConfigureServices()
        {
            IServiceCollection services = new ServiceCollection();
            services.AddOptions();

            var efProvider = Configuration.GetValue("Provider", "none");
            if (efProvider == "SqlServer" || (efProvider == "none" && Configuration.GetValue<bool>("Dev:UseSql")))
            {
                services.AddDbContextPool<AppDbContext, AppDbContextSqlServer>((serviceProvider, o) =>
                {
                    o.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"),
                        sqlOptions =>
                        {
                            sqlOptions.MigrationsAssembly("CruSibyl.Core");
                        });
#if DEBUG
                    o.EnableSensitiveDataLogging();
                    o.LogTo(message => System.Diagnostics.Debug.WriteLine(message));
#endif
                });
            }
            else
            {
                services.AddDbContextPool<AppDbContext, AppDbContextSqlite>((serviceProvider, o) =>
                {
                    o.UseSqlite(Configuration.GetConnectionString("DefaultConnection"),
                        sqliteOptions =>
                        {
                            sqliteOptions.MigrationsAssembly("CruSibyl.Core");
                        });

#if DEBUG
                    o.EnableSensitiveDataLogging();
                    o.LogTo(message => System.Diagnostics.Debug.WriteLine(message));
#endif
                });
            }
            services.AddMemoryCache();
            services.Configure<GitHubSettings>(Configuration.GetSection("GitHub"));
            services.AddSingleton<IGitHubService, GitHubService>();
            services.AddSingleton<IManifestSyncService, ManifestSyncService>();


            return services.BuildServiceProvider();
        }

        private static async Task<Result> SyncManifests(IManifestSyncService syncService)
        {
            Log.Information("Syncing repository manifests");

            return await syncService.SyncManifests();
        }
    }
}
</file>

<file path="CruSibyl.Web/Configuration/NavConfig.cs">
using Htmx.Components.Models.Builders;

namespace CruSibyl.Web.Configuration;

public static class NavConfig
{
    public static Action<ActionSetBuilder> RegisterNavigation => actionSet =>
    {
        // we can use the ActionContext to get the current path or other context
        // var path = builder.ActionContext.HttpContext.Request.Path.ToString();
        actionSet.AddAction(action => action
            .WithLabel("Home")
            .WithIcon("fas fa-home")
            .WithHxGet("/Dashboard")
            .WithHxPushUrl())

        .AddGroup(group => group
            .WithLabel("Admin")
            .WithIcon("fas fa-cogs")
            .AddAction(action => action
                .WithLabel("Repos")
                .WithHxGet("/Admin")
                .WithHxPushUrl()));
    };
}
</file>

<file path="CruSibyl.Web/Middleware/Auth/ResourceOperationRegistry.cs">
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using Htmx.Components.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;

namespace CruSibyl.Web.Middleware.Auth;

public class ResourceOperationRegistry : IResourceOperationRegistry
{
    private readonly IDbContextFactory<AppDbContext> _dbContextFactory;
    private readonly IMemoryCache _cache;

    // We're caching the resources and operations to reduce the number of queries generated.
    private static readonly string ResourcesCacheKey = "RegisteredResources";
    private static readonly string OperationsCacheKey = "RegisteredOperations";

    public ResourceOperationRegistry(IDbContextFactory<AppDbContext> dbContextFactory, IMemoryCache memoryCache)
    {
        _dbContextFactory = dbContextFactory;
        _cache = memoryCache;
    }

    public async Task<Dictionary<string, Resource>> GetRegisteredResourcesAsync()
    {
        var resources = await _cache.GetOrCreateAsync(ResourcesCacheKey, async entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10); // or your preferred duration
            using var dbContext = _dbContextFactory.CreateDbContext();
            return await dbContext.Resources.AsNoTracking()
                .ToDictionaryAsync(r => r.Name, r => r, StringComparer.OrdinalIgnoreCase);
        });
        return resources!;
    }

    public async Task<Dictionary<string, Operation>> GetRegisteredOperationsAsync()
    {
        var operations = await _cache.GetOrCreateAsync(OperationsCacheKey, async entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(10); // or your preferred duration
            using var dbContext = _dbContextFactory.CreateDbContext();
            return await dbContext.Operations.AsNoTracking()
                .ToDictionaryAsync(o => o.Name, o => o, StringComparer.OrdinalIgnoreCase);
        });
        return operations!;
    }

    public async Task Register(string resource, string operation)
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(resource, nameof(resource));
        ArgumentException.ThrowIfNullOrWhiteSpace(operation, nameof(operation));

        using var dbContext = _dbContextFactory.CreateDbContext();

        var saveChanges = false;
        var resources = await GetRegisteredResourcesAsync();
        if (!resources.ContainsKey(resource))
        {
            var resourceEntity = new Resource { Name = resource };
            dbContext.Resources.Add(resourceEntity);
            resources[resource] = resourceEntity;
            saveChanges = true;
        }

        var operations = await GetRegisteredOperationsAsync();
        if (!operations.ContainsKey(operation))
        {
            var operationEntity = new Operation { Name = operation };
            dbContext.Operations.Add(operationEntity);
            operations[operation] = operationEntity;
            saveChanges = true;
        }

        if (saveChanges)
        {
            await dbContext.SaveChangesAsync();
        }
    }
}
</file>

<file path="CruSibyl.Web/Properties/launchSettings.json">
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:3231",
      "sslPort": 44366
    }
  },
  "profiles": {
    "CruSibyl.Web": {
      "commandName": "Project",
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7182;http://localhost:5010",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
</file>

<file path="CruSibyl.Web/Tools/.gitignore">
# tailwind-generated css
site.css

# extra css extracted from cs files by extract-classes.js to pass into tailwind
tailwind.extra-classes.txt
</file>

<file path="CruSibyl.Web/Tools/package.json">
{
  "name": "build",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "build:findcss": "node extract-classes.js",
    "build:css": "npm run build:findcss && npx tailwindcss -i input.css -o site.css --minify && npx ncp site.css ../wwwroot/css/site.css",
    "watch:css": "npm run build:findcss && npx tailwindcss -i input.css -o site.css --watch"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "devDependencies": {
    "@tailwindcss/cli": "^4.0.15",
    "daisyui": "^5.0.9",
    "ncp": "^2.0.0",
    "tailwindcss": "^4.0.15"
  },
  "dependencies": {}
}
</file>

<file path="Htmx.Components/Attributes/ModelAttributes.cs">
namespace Htmx.Components.Attributes;

[AttributeUsage(AttributeTargets.Method)]
public class ModelCreateAttribute : Attribute
{
    public string ModelTypeId { get; }
    public ModelCreateAttribute(string modelTypeId) => ModelTypeId = modelTypeId;
}

[AttributeUsage(AttributeTargets.Method)]
public class ModelReadAttribute : Attribute
{
    public string ModelTypeId { get; }
    public ModelReadAttribute(string modelTypeId) => ModelTypeId = modelTypeId;
}

[AttributeUsage(AttributeTargets.Method)]
public class ModelUpdateAttribute : Attribute
{
    public string ModelTypeId { get; }
    public ModelUpdateAttribute(string modelTypeId) => ModelTypeId = modelTypeId;
}

[AttributeUsage(AttributeTargets.Method)]
public class ModelDeleteAttribute : Attribute
{
    public string ModelTypeId { get; }
    public ModelDeleteAttribute(string modelTypeId) => ModelTypeId = modelTypeId;
}

[AttributeUsage(AttributeTargets.Method)]
public class ModelConfigAttribute : Attribute
{
    public string ModelTypeId { get; }
    public ModelConfigAttribute(string modelTypeId) => ModelTypeId = modelTypeId;
}
</file>

<file path="Htmx.Components/Attributes/NavActionAttribute.cs">
namespace Htmx.Components.Attributes;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
public class NavActionGroupAttribute : Attribute
{
    public int Order { get; set; } = 0;
    public string? Icon { get; set; }
    public string? DisplayName { get; set; }
}

[AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
public class NavActionAttribute : Attribute
{
    public int Order { get; set; } = 0;
    public string? Icon { get; set; }
    public string? DisplayName { get; set; }
    public string? HttpMethod { get; set; } = "GET";
    public bool PushUrl { get; set; }
    public string? ViewName { get; set; }
}
</file>

<file path="Htmx.Components/Components/NavBar/AttributeNavProvider.cs">
using System.Reflection;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.Filters;
using Htmx.Components.Attributes;
using Htmx.Components.Models.Builders;
using Microsoft.AspNetCore.Http;
using Htmx.Components.Models;
using Htmx.Components.Services;

namespace Htmx.Components.NavBar;

public class AttributeNavProvider : INavProvider
{
    private readonly IActionDescriptorCollectionProvider _actions;
    private readonly IAuthorizationService _authorizationService;
    private readonly IHttpContextAccessor _httpContextAccessor;
    private readonly IServiceProvider _serviceProvider;
    private readonly IAuthorizationMetadataService _authMetadataService;

    public AttributeNavProvider(
        IActionDescriptorCollectionProvider actions,
        IAuthorizationService authorizationService,
        IHttpContextAccessor httpContextAccessor,
        IServiceProvider serviceProvider,
        IAuthorizationMetadataService authMetadataService)
    {
        _actions = actions;
        _authorizationService = authorizationService;
        _httpContextAccessor = httpContextAccessor;
        _serviceProvider = serviceProvider;
        _authMetadataService = authMetadataService;
    }

    public async Task<IActionSet> BuildAsync()
    {
        var user = _httpContextAccessor.HttpContext?.User;
        if (user == null)
        {
            // If no user is available, return an empty ActionSet
            return new ActionSet(new ActionSetConfig());
        }
        var builder = new ActionSetBuilder(_serviceProvider);

        var descriptors = await Task.WhenAll(
            _actions.ActionDescriptors.Items.OfType<ControllerActionDescriptor>()
                .Where(desc => desc.MethodInfo.GetCustomAttribute<NavActionAttribute>() != null)
                .Select(async desc =>
                {
                    var meta = await _authMetadataService.GetMetadataAsync(desc);
                    return new NavActionDescriptor
                    {
                        MethodInfo = desc.MethodInfo,
                        ControllerTypeInfo = desc.ControllerTypeInfo,
                        ActionName = desc.ActionName,
                        ControllerName = desc.ControllerName,
                        ActionAttr = desc.MethodInfo.GetCustomAttribute<NavActionAttribute>()!,
                        GroupAttr = desc.MethodInfo.GetCustomAttribute<NavActionGroupAttribute>()
                            ?? desc.ControllerTypeInfo.GetCustomAttribute<NavActionGroupAttribute>(),
                        Metadata = meta,
                        Descriptor = desc
                    };
                })
        );
        var grouped = descriptors.GroupBy(x => (
            // attributes are transient, so we must explicitly specify the values
            ActionAttr: (
                x.ActionAttr.Order,
                x.ActionAttr.DisplayName,
                x.ActionAttr.Icon,
                x.ActionAttr.HttpMethod,
                x.ActionAttr.PushUrl
            ),
            GroupAttr: (
                x.GroupAttr?.Order,
                x.GroupAttr?.DisplayName,
                x.GroupAttr?.Icon
            )
        ))
        .OrderBy(g => g.Key.GroupAttr.Order ?? g.Key.ActionAttr.Order);

        foreach (var group in grouped)
        {
            var (actionAttr, groupAttr) = group.Key;
            if (groupAttr.Order == null)
            {
                var desc = group.First();
                bool isAuthorized = await _authMetadataService.IsAuthorizedAsync(desc.Descriptor, user);

                if (!isAuthorized)
                    continue;

                builder.AddAction(BuildActionModelBuilder(desc));
            }
            else
            {
                var actionModelBuilders = new List<Action<ActionModelBuilder>>();
                foreach (var desc in group)
                {
                    if (!await _authMetadataService.IsAuthorizedAsync(desc.Descriptor, user))
                        continue;
                    actionModelBuilders.Add(BuildActionModelBuilder(desc));
                }

                if (!actionModelBuilders.Any())
                    continue;

                builder.AddGroup(g =>
                {
                    g.WithLabel(groupAttr.DisplayName ?? groupAttr.DisplayName ?? group.First().ControllerName);
                    g.WithIcon(groupAttr.Icon ?? "");
                    foreach (var actionBuilder in actionModelBuilders)
                    {
                        g.AddAction(actionBuilder);
                    }
                });
            }
        }

        return await builder.Build();
    }

    private static Action<ActionModelBuilder> BuildActionModelBuilder(NavActionDescriptor desc)
    {
        return a =>
        {
            a.WithIcon(desc.ActionAttr.Icon ?? "");
            a.WithLabel(desc.ActionAttr.DisplayName ?? desc.ActionName);
            // We're assuming an action named "Index" is the default action for the controller
            string url = desc.ActionName.Equals("Index", StringComparison.OrdinalIgnoreCase)
                ? $"/{desc.ControllerName}"
                : $"/{desc.ControllerName}/{desc.ActionName}";

            if (string.Equals(desc.ActionAttr.HttpMethod, "POST", StringComparison.OrdinalIgnoreCase))
                a.WithHxPost(url);
            else
                a.WithHxGet(url);
            a.WithHxPushUrl(desc.ActionAttr.PushUrl.ToString().ToLowerInvariant());
        };
    }

    private class NavActionDescriptor
    {
        public MethodInfo MethodInfo { get; set; } = default!;
        public TypeInfo ControllerTypeInfo { get; set; } = default!;
        public string ActionName { get; set; } = "";
        public string ControllerName { get; set; } = "";
        public NavActionAttribute ActionAttr { get; set; } = default!;
        public NavActionGroupAttribute? GroupAttr { get; set; }
        public object? Metadata { get; set; }
        public ControllerActionDescriptor Descriptor { get; set; } = default!;
    }
}
</file>

<file path="Htmx.Components/Components/NavBar/NavBarViewComponent.cs">
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace Htmx.Components.NavBar;

public class NavBarViewComponent : ViewComponent
{
    private readonly INavProvider _navProvider;

    public NavBarViewComponent(INavProvider navProvider)
    {
        _navProvider = navProvider;
    }

    public async Task<IViewComponentResult> InvokeAsync()
    {
        var model = await _navProvider.BuildAsync();
        return View("Default", model);
    }
}
</file>

<file path="Htmx.Components/Extensions/ApplicationBuilderExtensions.cs">
using Htmx.Components.State;
using Microsoft.AspNetCore.Builder;

namespace Htmx.Components;

public static class ApplicationBuilderExtensions
{
    public static IApplicationBuilder UseHtmxPageState(this IApplicationBuilder app)
    {
        app.UseMiddleware<PageStateMiddleware>();
        return app;
    }
}
</file>

<file path="Htmx.Components/Models/Table/TableRowContext.cs">
using System.Text.Json;
using Htmx.Components.Extensions;
using Htmx.Components.Models;

namespace Htmx.Components.Models.Table;

public interface ITableRowContext : IOobTargetable
{
    object Item { get; }
    string RowId { get; } // E.g., "row_5f3e"
    int PageIndex { get; } // Row's index within current page
    string Key { get; }
    bool IsEditing { get; }
}

public class TableRowContext<T, TKey> : ITableRowContext
    where T : class
{
    public required T Item { get; set; }
    public required ModelHandler<T, TKey> ModelHandler { get; set; }
    public string RowId => "row_" + StringKey.SanitizeForHtmlId();
    public int PageIndex { get; set; } = 0; // Row's index within current page
    private TKey _key = default!;
    public TKey Key
    {
        get => _key;
        set
        {
            _key = value;
            StringKey = JsonSerializer.Serialize(value);
        }
    }
    public string StringKey { get; set; } = "";
    string ITableRowContext.Key => StringKey;
    object ITableRowContext.Item => Item!;
    public string? TargetSelector { get; set; } = null;
    public bool IsEditing { get; set; } = false;
    public OobTargetDisposition? TargetDisposition { get; set; } = OobTargetDisposition.OuterHtml;
}
</file>

<file path="Htmx.Components/Models/IOobTargetable.cs">
namespace Htmx.Components.Models;

/// <summary>
/// A model that can provide the target disposition and selector for an out-of-band (OOB) request.
/// </summary>
public interface IOobTargetable
{
    string? TargetSelector { get; }
    OobTargetDisposition? TargetDisposition { get; }
}

public enum OobTargetDisposition
{
    OuterHtml,
    InnerHtml,
    AfterBegin,
    BeforeEnd,
    BeforeBegin,
    AfterEnd,
    None,
    Delete,
}
</file>

<file path="Htmx.Components/Services/AuthorizationMetadataService.cs">
using System.Reflection;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Options;

namespace Htmx.Components.Services;

public interface IAuthorizationMetadataService
{
    Task<AuthorizationMetadata> GetMetadataAsync(ControllerActionDescriptor descriptor);
    Task<bool> IsAuthorizedAsync(ControllerActionDescriptor descriptor, ClaimsPrincipal user);
}

public class AuthorizationMetadata
{
    public string[] Policies { get; set; } = [];
    public string[] Roles { get; set; } = [];
    public bool OnlyRequiresAuthentication { get; set; }
    public bool AllowAnonymous { get; set; }
}

public class AuthorizationMetadataSettings
{
    public string UserIdClaimType { get; set; } = ClaimTypes.NameIdentifier;
}

public class AuthorizationMetadataService : IAuthorizationMetadataService
{
    private readonly IAuthorizationService _authorizationService;
    private readonly IMemoryCache _cache;
    private readonly AuthorizationMetadataSettings _settings;
    private const int MetadataCacheExpirationMinutes = 10;
    private const int AuthorizationCacheExpirationMinutes = 2;

    public AuthorizationMetadataService(
        IAuthorizationService authorizationService,
        IMemoryCache cache,
        IOptions<AuthorizationMetadataSettings> settings)
    {
        _authorizationService = authorizationService;
        _cache = cache;
        _settings = settings.Value ?? new AuthorizationMetadataSettings();
    }

    public async Task<AuthorizationMetadata> GetMetadataAsync(ControllerActionDescriptor descriptor)
    {
        // Extract and cache attribute metadata (not user-specific)
        var result = await _cache.GetOrCreateAsync(
            $"authmeta:{descriptor.UniqueId()}",
            entry =>
            {
                entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(MetadataCacheExpirationMinutes);
                var authorizeAttrs = descriptor.MethodInfo
                    .GetCustomAttributes<AuthorizeAttribute>(true)
                    .Concat(descriptor.ControllerTypeInfo.GetCustomAttributes<AuthorizeAttribute>(true))
                    .ToArray();

                var policies = authorizeAttrs
                    .Where(attr => !string.IsNullOrEmpty(attr.Policy))
                    .Select(attr => attr.Policy!)
                    .Distinct()
                    .ToArray();

                var roles = authorizeAttrs
                    .Where(attr => !string.IsNullOrEmpty(attr.Roles))
                    .SelectMany(attr => attr.Roles!.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
                    .Distinct()
                    .ToArray();

                var onlyRequiresAuthentication = authorizeAttrs.Any(attr =>
                    string.IsNullOrEmpty(attr.Policy) && string.IsNullOrEmpty(attr.Roles)
                );

                var allowAnonymous = descriptor.MethodInfo.GetCustomAttribute<AllowAnonymousAttribute>() != null
                    || descriptor.ControllerTypeInfo.GetCustomAttribute<AllowAnonymousAttribute>() != null
                    || (!policies.Any() && !roles.Any() && !onlyRequiresAuthentication);

                // Always return a non-null AuthorizationMetadata
                return Task.FromResult(new AuthorizationMetadata
                {
                    Policies = policies,
                    Roles = roles,
                    OnlyRequiresAuthentication = onlyRequiresAuthentication,
                    AllowAnonymous = allowAnonymous
                });
            });
        return result!;
    }

    public async Task<bool> IsAuthorizedAsync(ControllerActionDescriptor descriptor, ClaimsPrincipal user)
    {
        var meta = await GetMetadataAsync(descriptor);
        if (meta.AllowAnonymous)
            return true;

        var isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (meta.OnlyRequiresAuthentication && isAuthenticated)
            return true;

        foreach (var policy in meta.Policies)
        {
            var userId = user.FindFirst(_settings.UserIdClaimType)?.Value ?? "anonymous";
            var isAuthorized = await _cache.GetOrCreateAsync(
                $"authz:{userId}:{policy}",
                async entry =>
                {
                    entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(AuthorizationCacheExpirationMinutes);
                    var authResult = await _authorizationService.AuthorizeAsync(user, policy);
                    return authResult.Succeeded;
                });
            if (isAuthorized)
                return true;
        }

        var userRoles = user.Claims
            .Where(c => c.Type == ClaimTypes.Role)
            .Select(c => c.Value)
            .ToHashSet();

        if (meta.Roles.Any(role => userRoles.Contains(role)))
            return true;

        return false;
    }
}

// Helper for unique descriptor keying
public static class DescriptorExtensions
{
    public static string UniqueId(this ControllerActionDescriptor desc)
        => $"{desc.ControllerTypeInfo.FullName}.{desc.ActionName}";
}
</file>

<file path="Htmx.Components/ViewResults/MultiSwapViewResult.cs">
using System.Text.Encodings.Web;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;
using Htmx.Components.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewComponents;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.Extensions.DependencyInjection;

namespace Htmx.Components.ViewResults;

/// <summary>
/// Returns multple htmx views within a single response
/// </summary>
public class MultiSwapViewResult : IActionResult
{
    private HtmxViewInfo? _main;
    private readonly List<HtmxViewInfo> _oobs = new();

    // holds original model in case it's needed for further processing such as in result filters
    [JsonIgnore]
    public object? Model { get; set; }

    public MultiSwapViewResult()
    { }

    protected MultiSwapViewResult(
        (string PartialView, object Model)? main = null,
        params HtmxViewInfo[] oobs)
    {
        _main = main is not null
            ? new HtmxViewInfo
            {
                ViewName = main.Value.PartialView,
                Model = main.Value.Model,
                TargetDisposition = OobTargetDisposition.None
            }
            : null;
        _oobs.AddRange(oobs);
    }

    public MultiSwapViewResult WithMainContent(string viewName, object model)
    {
        _main = new HtmxViewInfo
        {
            ViewName = viewName,
            Model = model,
            TargetDisposition = OobTargetDisposition.None
        };
        return this;
    }

    public MultiSwapViewResult WithOobContent(string viewName, object model, 
        OobTargetDisposition targetDisposition = OobTargetDisposition.OuterHtml, string? targetSelector = null)
    {
        _oobs.Add(new HtmxViewInfo
        {
            ViewName = viewName,
            Model = model,
            TargetDisposition = targetDisposition,
            TargetSelector = targetSelector
        });
        return this;
    }

    public MultiSwapViewResult WithOobContent(string viewName, object model)
    {
        _oobs.Add(new HtmxViewInfo
        {
            ViewName = viewName,
            Model = model,
            TargetDisposition = model is IOobTargetable t1
                ? t1.TargetDisposition ?? OobTargetDisposition.OuterHtml
                : OobTargetDisposition.OuterHtml,
            TargetSelector = model is IOobTargetable t2
                ? t2.TargetSelector
                : null
        });
        return this;
    }


    public MultiSwapViewResult WithOobContent(IEnumerable<HtmxViewInfo> oobList)
    {
        _oobs.AddRange(oobList);
        return this;
    }

    public MultiSwapViewResult WithOobContent(HtmxViewInfo oob)
    {
        _oobs.Add(oob);
        return this;
    }

    public async Task ExecuteResultAsync(ActionContext context)
    {
        var response = context.HttpContext.Response;
        response.ContentType = "text/html";

        var writer = new StringWriter();

        // Render main view without OOB wrapping
        if (_main is not null)
        {
            string mainHtml = await RenderViewSmart(context, _main);
            writer.WriteLine(mainHtml.Trim());
        }

        // Render OOB views
        foreach (var htmxViewInfo in _oobs)
        {
            string html = await RenderViewSmart(context, htmxViewInfo);
            string wrapped = AddHxSwapToOuterElement(html.Trim(), htmxViewInfo);
            writer.WriteLine(wrapped);
        }

        await response.WriteAsync(writer.ToString());
    }

    private static Task<string> RenderViewSmart(ActionContext context, HtmxViewInfo oobViewInfo)
    {
        return IsViewComponent(context, oobViewInfo.ViewName)
            ? RenderViewComponentToString(context, oobViewInfo)
            : RenderPartialViewToString(context, oobViewInfo);
    }


    private static bool IsViewComponent(ActionContext context, string viewName)
    {
        // Try to resolve the view name to a view component
        try
        {
            var viewComponentSelector = context.HttpContext.RequestServices.GetRequiredService<IViewComponentSelector>();
            return viewComponentSelector.SelectComponent(viewName) != null;
        }
        catch
        {
            // If resolving fails, it's a regular view
            return false;
        }
    }

    private static string AddHxSwapToOuterElement(string html, HtmxViewInfo htmxViewInfo)
    {
        // Use a regex to identify the outermost tag and add hx-swap-oob="true" to it
        var regex = new Regex(@"<(\w+)([^>]*)>");
        var match = regex.Match(html);

        var targetDisposition = htmxViewInfo.TargetDisposition switch
        {
            OobTargetDisposition.OuterHtml => "outerHTML",
            OobTargetDisposition.InnerHtml => "innerHTML",
            OobTargetDisposition.AfterBegin => "afterbegin",
            OobTargetDisposition.BeforeEnd => "beforeend",
            OobTargetDisposition.BeforeBegin => "beforebegin",
            OobTargetDisposition.AfterEnd => "afterend",
            OobTargetDisposition.Delete => "delete",
            OobTargetDisposition.None => "none",
            _ => throw new ArgumentOutOfRangeException(nameof(htmxViewInfo.TargetDisposition), "Invalid target disposition")
        };
        var targetSelector = "";
        
        if (!string.IsNullOrWhiteSpace(htmxViewInfo.TargetSelector))
        {
            if (!Regex.IsMatch(htmxViewInfo.TargetSelector, @"^[a-zA-Z0-9\-_#.: \[\]=]*$"))
            {
                throw new ArgumentException("TargetSelector contains invalid characters for a CSS query selector.");
            }
            targetSelector = ":" + htmxViewInfo.TargetSelector;
        }

        if (match.Success)
        {
            // Check if the outermost tag already contains hx-swap-oob
            if (!match.Value.Contains("hx-swap-oob"))
            {
                var tagName = match.Groups[1].Value;
                var tagAttributes = match.Groups[2].Value;

                // Add the hx-swap-oob attribute to the outermost element's tag
                var updatedTag = $"<{tagName}{tagAttributes} hx-swap-oob=\"{targetDisposition}{targetSelector}\">";

                // Replace the opening tag with the updated one
                return $"<template>{regex.Replace(html, updatedTag, 1)}</template>";
                //return regex.Replace(html, updatedTag, 1);
            }
        }

        return html;
    }

    private static async Task<string> RenderPartialViewToString(ActionContext context, HtmxViewInfo htmxViewInfo)
    {
        var httpContext = context.HttpContext;
        var controller = context.RouteData.Values["controller"]?.ToString();
        var viewEngine = httpContext.RequestServices.GetService<ICompositeViewEngine>()!;
        var tempDataProvider = httpContext.RequestServices.GetService<ITempDataProvider>()!;

        var viewData = new ViewDataDictionary(new EmptyModelMetadataProvider(), new ModelStateDictionary())
        {
            Model = htmxViewInfo.Model
        };

        using var sw = new StringWriter();
        var viewResult = viewEngine.FindView(context, htmxViewInfo.ViewName, false);
        if (viewResult.View == null)
        {
            throw new InvalidOperationException($"The partial view '{htmxViewInfo.ViewName}' was not found. Searched locations: {string.Join(", ", viewResult.SearchedLocations ?? Enumerable.Empty<string>())}");
        }
        var tempData = new TempDataDictionary(httpContext, tempDataProvider);
        var viewContext = new ViewContext(context, viewResult.View, viewData, tempData, sw, new HtmlHelperOptions());

        await viewResult.View.RenderAsync(viewContext);
        return sw.ToString();
    }

    private static async Task<string> RenderViewComponentToString(ActionContext context, HtmxViewInfo htmxViewInfo)
    {
        var httpContext = context.HttpContext;

        var viewComponentHelper = httpContext.RequestServices.GetRequiredService<IViewComponentHelper>();

        // Contextualize the helper so it knows about the current request
        if (viewComponentHelper is IViewContextAware viewContextAware)
        {
            var viewData = new ViewDataDictionary(new EmptyModelMetadataProvider(), new ModelStateDictionary())
            {
                Model = null // you can pass in a real model if needed
            };

            var tempDataProvider = httpContext.RequestServices.GetRequiredService<ITempDataProvider>();
            var tempData = new TempDataDictionary(httpContext, tempDataProvider);

            using var sw = new StringWriter();
            var viewContext = new ViewContext(context, NullView.Instance, viewData, tempData, sw, new HtmlHelperOptions());

            viewContextAware.Contextualize(viewContext);

            var content = await viewComponentHelper.InvokeAsync(htmxViewInfo.ViewName, htmxViewInfo.Model);
            content.WriteTo(sw, HtmlEncoder.Default);
            return sw.ToString();
        }

        throw new InvalidOperationException("ViewComponentHelper does not implement IViewContextAware.");
    }

}



public class NullView : IView
{
    public static readonly NullView Instance = new();
    public string Path => "NullView";

    public Task RenderAsync(ViewContext context) => Task.CompletedTask;
}
</file>

<file path="Htmx.Components/Views/Shared/_Input.cshtml">
@using Htmx.Components.Models
@model IInputModel

@{
    var id = $"{Model.ModelHandler.TypeId}_{Model.Id}";
    var routeValues = new { typeId = Model.ModelHandler.TypeId, modelUI = Model.ModelHandler.ModelUI };
}

    @switch (Model.Kind)
    {
        case InputKind.Number:
        {
            <input name="value" id="@(id)" type="number" step="0.01"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Date:
        {
            <input name="value" id="@(id)" type="date"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Checkbox:
        {
            <input name="value" id="@(id)" type="checkbox"
            class="checkbox checkbox-primary" @(Model.ObjectValue != null && (bool)Model.ObjectValue ? "checked" : "") 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
        case InputKind.Radio:
        {
            <div class="flex flex-col">
                @foreach (var option in Model.Options ?? [])
                {
                    <label class="label cursor-pointer">
                        <span class="label-text">@option.Key</span>
                        <input name="value" id="@(id)" type="radio" value="@option.Value"
                        class="radio radio-primary" @(Model.Value != null && Model.Value.ToString() == option.Value ? "checked" : "")
                        hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
                    </label>
                }
            </div>
            break;
        }
        case InputKind.Select:
        {
            <select name="value" id="@(id)" 
            class="select select-bordered w-full" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}'>
                @foreach (var option in Model.Options ?? [])
                {
                    <option value="@option.Value" @(Model.Value != null && Model.Value.ToString() == option.Value ? "selected" : "")>@option.Key</option>
                }
            </select>
            break;
        }
        case InputKind.TextArea:
        {
            <textarea name="value" id="@(id)" 
            class="textarea textarea-bordered w-full" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}'>@Html.Encode(Model.Value?.ToString())</textarea>
            break;
        }
        case InputKind.Text:
        default:
        {
            <input name="value" id="@(id)" type="text"
            class="input input-bordered w-full" value="@(Model.Value)" 
            hx-post="@Url.Action("SetValue", "Form", routeValues)" hx-trigger="blur" hx-vals='{"propertyName": "@Model.PropName"}' />
            break;
        }
    }
</file>

<file path="Htmx.Components/wwwroot/js/table-behavior.js">
htmx.defineExtension('tableinline', {
  // ensures afterbegin:#table-body inserts entire <tr> element and not just the innerHTML
  isInlineSwap: function (swapStyle) { return true; },
});


document.addEventListener("htmx:afterSettle", () => {
  // detects if table is in edit mode and disables all parts except the row being edited...
  const toggle = document.getElementById("table-edit-class-toggle");
  const wrapper = document.getElementById("table-container");

  if (toggle && wrapper) {
    const editing = toggle.classList.contains("editing-mode");
    wrapper.classList.toggle("editing-mode", editing);
  }
});
</file>

<file path="Htmx.Components/Constants.cs">
namespace Htmx.Components;

public static class Constants
{
    public static class Authorization
    {
        public static class Operations
        {
            public const string Read = "Read";
            public const string Create = "Create";
            public const string Update = "Update";
            public const string Delete = "Delete";
        }
    }
}
</file>

<file path="CruSibyl.Core/Domain/Permission.cs">
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(RoleId))]
[Index(nameof(UserId))]
public class Permission
{
    [Key]
    public int Id { get; set; }

    [Required]
    public int RoleId { get; set; }

    [Required]
    public int UserId { get; set; }

    public Role Role { get; set; } = null!;

    public User User { get; set; } = null!;
}
</file>

<file path="CruSibyl.Core/Domain/Role.cs">
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(Name), IsUnique = true)]
public class Role
{
    [Key]
    public int Id { get; set; }

    [MaxLength(50)]
    [Required]
    public string Name { get; set; } = "";

    public List<RoleOperation> Operations { get; set; } = new();

    public List<Permission> Permissions { get; set; } = new();

    public class Codes
    {
        public const string System = "System";
        public const string Admin = "Admin";
    }
}
</file>

<file path="CruSibyl.Core/Domain/RoleOperation.cs">
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

public class RoleOperation
{
    [Key]
    public int Id { get; set; }

    public int ResourceId { get; set; }
    public Resource Resource { get; set; } = null!;
    public int OperationId { get; set; }
    public Operation Operation { get; set; } = null!;
    public int RoleId { get; set; }
    public Role Role { get; set; } = null!;

    internal static void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<RoleOperation>().HasIndex(a => new { a.ResourceId, a.OperationId, a.RoleId }).IsUnique();
    }
}
</file>

<file path="CruSibyl.Core/Domain/User.cs">
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Domain;

[Index(nameof(Iam), IsUnique = true)]
[Index(nameof(Email))]
public class User
{
    [Key]
    public int Id { get; set; }

    [Required]
    [MaxLength(50)]
    [Display(Name = "First Name")]
    public string FirstName { get; set; } = "";

    [Required]
    [MaxLength(50)]
    [Display(Name = "Last Name")]
    public string LastName { get; set; } = "";

    [Required]
    [MaxLength(300)]
    [EmailAddress]
    public string Email { get; set; } = "";

    [MaxLength(10)]
    public string Iam { get; set; } = "";

    [MaxLength(20)]
    public string Kerberos { get; set; } = "";

    [MaxLength(20)] //It probably isn't this long....
    public string MothraId { get; set; } = "";

    [Display(Name = "Name")]
    public string Name => FirstName + " " + LastName;

    [JsonIgnore]
    public List<Permission> Permissions { get; set; } = new();
}
</file>

<file path="CruSibyl.Core/Extensions/StringExtensions.cs">
using System.Security.Claims;
using System.Text;
using System.Text.RegularExpressions;
using CruSibyl.Core.Domain;
using CruSibyl.Core.Services;

namespace CruSibyl.Core.Extensions;

public static class StringExtensions
{
    public static string EncodeBase64(this string value)
    {
        var valueBytes = Encoding.UTF8.GetBytes(value);
        return Convert.ToBase64String(valueBytes);
    }

    public static string DecodeBase64(this string value)
    {
        var valueBytes = Convert.FromBase64String(value);
        return Encoding.UTF8.GetString(valueBytes);
    }

    // Naive utility for converting Serilog templates and arguments to a string
    public static string FormatTemplate(this string messageTemplate, object parameter, params object[] additionalParameters)
    {
        return FormatTemplate(messageTemplate, new[] { parameter }.Concat(additionalParameters));
    }

    // Naive utility for converting Serilog templates and arguments to a string
    public static string FormatTemplate(this string messageTemplate, IEnumerable<object> parameters)
    {
        var objects = parameters as object[] ?? parameters.ToArray();

        if (objects.Length == 0)
        {
            return messageTemplate;
        }

        if (objects.Length != Regex.Matches(messageTemplate, "{.*?}").Count)
        {
            throw new ArgumentException("Number of arguments does not match number of template parameters");
        }

        var i = 0;
        return Regex.Replace(messageTemplate, "{.*?}", _ => objects[i++]?.ToString() ?? "");
    }
    
    public static string SafeTruncate(this string value, int max)
    {
        if (string.IsNullOrWhiteSpace(value) || value.Length <= max)
        {
            return value;
        }

        if (max <= 0)
        {
            return "";
        }

        return value.Substring(0, max);
    }
}
</file>

<file path="CruSibyl.Core/Services/UserService.cs">
using CruSibyl.Core.Domain;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using CruSibyl.Core.Models;
using Serilog;

namespace CruSibyl.Core.Services;
public interface IUserService
{
    Task<User?> GetUser(Claim[] userClaims);
    Task<User?> GetCurrentUser();
    Task<IEnumerable<Permission>> GetCurrentPermissionsAsync();
    string? GetCurrentUserId();
}

public class UserService : IUserService
{
    private readonly IHttpContextAccessor _httpContextAccessor;
    private readonly IIdentityService _identityService;
    private readonly AppDbContext _dbContext;
    public const string IamIdClaimType = "ucdPersonIAMID";

    public UserService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor, IIdentityService identityService)
    {
        _httpContextAccessor = httpContextAccessor;
        _identityService = identityService;
        _dbContext = dbContext;
    }

    public string? GetCurrentUserId()
    {
        var userId = _httpContextAccessor.HttpContext?.User.FindFirstValue(IamIdClaimType);
        return userId;
    }

    public async Task<User?> GetCurrentUser()
    {
        if (_httpContextAccessor.HttpContext == null)
        {
            Log.Warning("No HttpContext found. Unable to retrieve or create User.");
            return null;
        }

        var userClaims = _httpContextAccessor.HttpContext.User.Claims.ToArray();

        return await GetUser(userClaims);
    }

    public async Task<IEnumerable<Permission>> GetCurrentPermissionsAsync()
    {
        if (_httpContextAccessor.HttpContext == null)
        {
            Log.Warning("No HttpContext found. Unable to retrieve User permissions.");
            return [];
        }

        var iamId = _httpContextAccessor.HttpContext.User.Claims.Single(c => c.Type == IamIdClaimType).Value;
        var permissions = await _dbContext.Permissions
            .Include(p => p.Role)
            .Where(p => p.User.Iam == iamId)
            .ToArrayAsync();
        return permissions;
    }

    // Get any user based on their claims, creating if necessary
    public async Task<User?> GetUser(Claim[] userClaims)
    {
        string iamId = userClaims.Single(c => c.Type == IamIdClaimType).Value;

        var dbUser = await _dbContext.Users.SingleOrDefaultAsync(a => a.Iam == iamId);

        if (dbUser != null)
        {
            if (dbUser.MothraId == null)
            {
                var foundUser = await _identityService.GetByKerberos(dbUser.Kerberos);
                if (foundUser != null)
                {
                    dbUser.MothraId = foundUser.MothraId;
                    await _dbContext.SaveChangesAsync();
                }
            }

            return dbUser; // already in the db, just return straight away
        }
        else
        {
            // not in the db yet, create new user and return
            var newUser = new User
            {
                FirstName = userClaims.Single(c => c.Type == ClaimTypes.GivenName).Value,
                LastName = userClaims.Single(c => c.Type == ClaimTypes.Surname).Value,
                Email = userClaims.Single(c => c.Type == ClaimTypes.Email).Value,
                Iam = iamId,
                Kerberos = userClaims.Single(c => c.Type == ClaimTypes.NameIdentifier).Value
            };

            var foundUser = await _identityService.GetByKerberos(newUser.Kerberos);
            if (foundUser != null)
            {
                newUser.MothraId = foundUser.MothraId;
            }

            await _dbContext.Users.AddAsync(newUser);

            await _dbContext.SaveChangesAsync();

            return newUser;
        }
    }

}
</file>

<file path="CruSibyl.Web/Extensions/AuthorizationExtensions.cs">
using CruSibyl.Core.Models;
using CruSibyl.Web.Middleware;
using CruSibyl.Web.Middleware.Auth;
using Microsoft.AspNetCore.Authorization;

namespace CruSibyl.Web.Extensions;

public static class AuthorizationExtensions
{
    public static void AddAccessPolicy(this AuthorizationOptions options, string policy)
    {
        options.AddPolicy(policy, builder => builder.Requirements.Add(PermissionRequirement.ForRoles(AccessPolicies.GetRoles(policy))));
    }
}
</file>

<file path="CruSibyl.Web/Tools/extract-classes.js">
// This script extracts css classes and styles from .cs files in the specified directory
const fs = require("fs");
const path = require("path");

const sourceDir = path.resolve(__dirname, ".."); // adjust if your .cs files live elsewhere
const outputFile = path.join(__dirname, "tailwind.extra-classes.txt");

// We're currently only applying classes via fluent With... methods. This might need to be adjusted
// if we start using other methods or if the pattern changes.
const CLASS_PATTERN = /\.With(Class|Icon)\s*\(\s*"([^"]*)"/g;
const STYLE_PATTERN = /\.With(Style)\s*\(\s*"([^"]*)"/g;

function walk(dir, fileCallback) {
  fs.readdirSync(dir, { withFileTypes: true }).forEach((entry) => {
    const fullPath = path.join(dir, entry.name);
    if (
      entry.isDirectory() &&
      !["bin", "obj", "node_modules", ".git"].includes(entry.name)
    ) {
      walk(fullPath, fileCallback);
    } else if (entry.isFile() && entry.name.endsWith(".cs")) {
      fileCallback(fullPath);
    }
  });
}

function extractMatches(content, regex) {
  const matches = [];
  let match;
  while ((match = regex.exec(content)) !== null) {
    matches.push(...match[2].split(/\s+/)); // split class list on whitespace
  }
  return matches;
}

const allClasses = new Set();

walk(sourceDir, (file) => {
  const content = fs.readFileSync(file, "utf-8");
  extractMatches(content, CLASS_PATTERN).forEach((cls) => allClasses.add(cls));
  extractMatches(content, STYLE_PATTERN).forEach((style) =>
    allClasses.add(style)
  ); // optional
});

fs.writeFileSync(outputFile, Array.from(allClasses).join("\n"));
console.log(`Extracted ${allClasses.size} classes to ${outputFile}`);
</file>

<file path="CruSibyl.Web/Views/Dashboard/_Content.cshtml">
<div id="main-content">
  <h2 class="text-2xl font-bold">Dashboard Content</h2>
  <p class="text-base text-gray-600">Welcome to the dashboard!</p>
</div>
</file>

<file path="Htmx.Components/Controllers/FormController.cs">
using System.Text.Json;
using Htmx.Components.Attributes;
using Htmx.Components.Authorization;
using Htmx.Components.Models;
using Htmx.Components.Models.Table;
using Htmx.Components.Services;
using Htmx.Components.Table;
using Htmx.Components.Utilities;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Operations = Htmx.Components.Constants.Authorization.Operations;

namespace Htmx.Components.Controllers;

[Route("Form")]
public class FormController : Controller
{
    private readonly ITableProvider _tableProvider;
    private readonly IModelRegistry _modelRegistry;
    private readonly IAuthorizationService _authorizationService;
    private readonly IPermissionRequirementFactory _permissionRequirementFactory;

    public FormController(ITableProvider tableProvider, IModelRegistry modelRegistry,
        IAuthorizationService authorizationService, IPermissionRequirementFactory permissionRequirementFactory)
    {
        _tableProvider = tableProvider;
        _modelRegistry = modelRegistry;
        _authorizationService = authorizationService;
        _permissionRequirementFactory = permissionRequirementFactory;
    }


    [HttpPost("{typeId}/{modelUI}/Save")]
    [TableEditAction]
    public async Task<IActionResult> Save(string typeId, ModelUI modelUI)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_Save),
            [modelHandler.ModelType, modelHandler.KeyType],
            modelHandler);

        return result;
    }

    private async Task<IActionResult> _Save<T, TKey>(ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (modelHandler.CreateModel == null)
            return BadRequest($"SaveModel not defined for type '{modelHandler.TypeId}'.");

        var pageState = this.GetPageState();
        var editingItem = pageState.Get<T>("Table", "EditingItem")!;
        var editingExistingRecord = pageState.Get<bool>("Table", "EditingExistingRecord")!;
        var tableModel = await modelHandler.BuildTableModel();
        if (editingExistingRecord)
        {
            if (!await IsAuthorized(modelHandler.TypeId, Operations.Update))
                return Forbid();
            await modelHandler.UpdateModel!(editingItem);
            tableModel.Rows.Add(new TableRowContext<T, TKey>
            {
                Item = editingItem,
                ModelHandler = modelHandler,
                Key = modelHandler.KeySelectorFunc(editingItem),
                TargetDisposition = OobTargetDisposition.OuterHtml,
            });
        }
        else
        {
            if (!await IsAuthorized(modelHandler.TypeId, Operations.Create))
                return Forbid();
            await modelHandler.CreateModel!(editingItem);
            tableModel.Rows.Add(new TableRowContext<T, TKey>
            {
                Item = null!,
                ModelHandler = modelHandler,
                StringKey = "new",
                TargetDisposition = OobTargetDisposition.Delete,
            });
            tableModel.Rows.Add(new TableRowContext<T, TKey>
            {
                Item = editingItem,
                ModelHandler = modelHandler,
                Key = modelHandler.KeySelectorFunc(editingItem),
                TargetDisposition = OobTargetDisposition.AfterBegin,
                TargetSelector = "#table-body",
            });
        }


        pageState.ClearKey("Table", "EditingItem");
        pageState.ClearKey("Table", "EditingExistingRecord");

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/CancelEdit")]
    [TableEditAction]
    public async Task<IActionResult> CancelEdit(string typeId, ModelUI modelUI)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_CancelEdit),
            [modelHandler.ModelType, modelHandler.KeyType],
            modelHandler);

        return result!;
    }

    private async Task<IActionResult> _CancelEdit<T, TKey>(ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        var tableModel = await modelHandler.BuildTableModel();
        var pageState = this.GetPageState();
        if (pageState.Get<bool>("Table", "EditingExistingRecord"))
        {
            // Check if the user is authorized to read the item
            if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
                return Forbid();

            var editingItem = pageState.Get<T>("Table", "EditingItem")!;
            var editingKey = modelHandler.KeySelectorFunc(editingItem);

            var originalItem = await modelHandler.GetQueryable!()
                .Where(modelHandler.GetKeyPredicate(editingKey))
                .SingleAsync();

            tableModel.Rows.Add(new TableRowContext<T, TKey>
            {
                Item = originalItem,
                ModelHandler = modelHandler,
                Key = editingKey,
                TargetDisposition = OobTargetDisposition.OuterHtml,
            });
        }
        else
        {
            tableModel.Rows.Add(new TableRowContext<T, TKey>
            {
                Item = null!,
                ModelHandler = modelHandler,
                StringKey = "new",
                TargetDisposition = OobTargetDisposition.Delete,
            });
        }

        pageState.ClearKey("Table", "EditingItem");
        pageState.ClearKey("Table", "EditingExistingRecord");
        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/Delete")]
    [TableEditAction]
    public async Task<IActionResult> Delete(string typeId, ModelUI modelUI, string key)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_Delete),
            [modelHandler.ModelType, modelHandler.KeyType],
            key, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _Delete<T, TKey>(string stringKey, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (modelHandler.DeleteModel == null)
            return BadRequest($"DeleteModel not defined for type '{modelHandler.TypeId}'.");

        if (!await IsAuthorized(modelHandler.TypeId, Operations.Delete))
            return Forbid();

        var key = (TKey)JsonSerializer.Deserialize(stringKey, modelHandler.KeyType)!;

        await modelHandler.DeleteModel!(key);

        var pageState = this.GetPageState();
        var tableModel = await modelHandler.BuildTableModel();
        tableModel.Rows.Add(new TableRowContext<T, TKey>
        {
            Item = default!,
            ModelHandler = modelHandler,
            Key = key,
            TargetDisposition = OobTargetDisposition.Delete,
        });

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/Edit")]
    [TableEditAction]
    public async Task<IActionResult> Edit(string typeId, ModelUI modelUI, string key)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_Edit),
            [modelHandler.ModelType, modelHandler.KeyType],
            key, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _Edit<T, TKey>(string stringKey, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
            return Forbid();
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Update))
            return Forbid();

        var key = (TKey)JsonSerializer.Deserialize(stringKey, modelHandler.KeyType)!;
        var editingItem = await modelHandler.GetQueryable!()
            .Where(modelHandler.GetKeyPredicate(key))
            .SingleOrDefaultAsync();
        if (editingItem == null)
            return BadRequest($"Model with key '{stringKey}' not found.");
        var pageState = this.GetPageState();
        pageState.Set("Table", "EditingItem", editingItem);
        pageState.Set("Table", "EditingExistingRecord", true);

        var tableModel = await modelHandler.BuildTableModel();
        tableModel.Rows.Add(new TableRowContext<T, TKey>
        {
            Item = editingItem,
            ModelHandler = modelHandler,
            Key = key,
            TargetDisposition = OobTargetDisposition.OuterHtml,
            IsEditing = true,
        });

        return Ok(tableModel);
    }


    [HttpPost("{typeId}/SetPage")]
    [TableRefreshAction]
    public async Task<IActionResult> SetPage(string typeId, int page)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, ModelUI.Table);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_SetPage),
            [modelHandler.ModelType, modelHandler.KeyType],
            page, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _SetPage<T, TKey>(int page, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
            return Forbid();

        var pageState = this.GetPageState();
        var tableState = pageState.GetOrCreate<TableState>("Table", "State", () => new());
        tableState.Page = page;
        pageState.Set("Table", "State", tableState);
        var tableModel = await modelHandler.BuildTableModel();
        await _tableProvider.FetchPage(tableModel, modelHandler.GetQueryable!(), tableState);

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/SetPageSize")]
    [TableRefreshAction]
    public async Task<IActionResult> SetPageSize(string typeId, int pageSize)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, ModelUI.Table);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_SetPageSize),
            [modelHandler.ModelType, modelHandler.KeyType],
            pageSize, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _SetPageSize<T, TKey>(int pageSize, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
            return Forbid();

        var pageState = this.GetPageState();
        var tableState = pageState.GetOrCreate<TableState>("Table", "State", () => new());
        tableState.PageSize = pageSize;
        pageState.Set("Table", "State", tableState);
        var tableModel = await modelHandler.BuildTableModel();
        await _tableProvider.FetchPage(tableModel, modelHandler.GetQueryable!(), tableState);

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/SetSort")]
    [TableRefreshAction]
    public async Task<IActionResult> SetSort(string typeId, string column, string direction)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, ModelUI.Table);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_SetSort),
            [modelHandler.ModelType, modelHandler.KeyType],
            column, direction, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _SetSort<T, TKey>(string column, string direction, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
            return Forbid();

        var pageState = this.GetPageState();
        var tableState = pageState.GetOrCreate<TableState>("Table", "State", () => new());
        tableState.SortColumn = column;
        tableState.SortDirection = direction;
        pageState.Set("Table", "State", tableState);
        var tableModel = await modelHandler.BuildTableModel();
        await _tableProvider.FetchPage(tableModel, modelHandler.GetQueryable!(), tableState);

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/SetValue")]
    public async Task<IActionResult> SetValue(string typeId, ModelUI modelUI, string propertyName, string value)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_SetValue),
            [modelHandler.ModelType, modelHandler.KeyType],
            propertyName, value, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _SetValue<T, TKey>(string propertyName, string value, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        var pageState = this.GetPageState();
        var editingExistingRecord = pageState.Get<bool>("Table", "EditingExistingRecord")!;
        if (editingExistingRecord)
        {
            if (!await IsAuthorized(modelHandler.TypeId, Operations.Update))
                return Forbid();
        }
        else
        {
            if (!await IsAuthorized(modelHandler.TypeId, Operations.Create))
                return Forbid();
        }

        var tableState = pageState.GetOrCreate<TableState>("Table", "State", () => new());
        var editingItem = pageState.Get<T>("Table", "EditingItem")!;
        var property = typeof(T).GetProperty(propertyName);
        if (property == null)
            return BadRequest($"Property '{propertyName}' not found.");

        try
        {
            var convertedValue = Convert.ChangeType(value, property.PropertyType);
            property.SetValue(editingItem, convertedValue);
        }
        catch (Exception ex)
        {
            return BadRequest($"Failed to set property '{propertyName}': {ex.Message}");
        }

        pageState.Set("Table", "EditingItem", editingItem);
        // We return a MultiSwapViewResult to allow the PageState to piggyback on the response
        return new MultiSwapViewResult();
    }

    [HttpPost("{typeId}/SetFilter")]
    [TableRefreshAction]
    public async Task<IActionResult> SetFilter(string typeId, string column, string filter, int input)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, ModelUI.Table);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_SetFilter),
            [modelHandler.ModelType, modelHandler.KeyType],
            column, filter, input, modelHandler);
        return result!;
    }

    private async Task<IActionResult> _SetFilter<T, TKey>(string column, string filter, int input, ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Read))
            return Forbid();

        var tableModel = await modelHandler.BuildTableModel();
        var columnModel = tableModel.Columns.FirstOrDefault(c => c.DataName == column);
        if (columnModel == null)
            return BadRequest($"Column '{column}' not found.");

        if (!columnModel.Filterable || (columnModel.RangeFilter == null && columnModel.Filter == null))
            return BadRequest($"Column '{column}' is not filterable.");

        var pageState = this.GetPageState();
        var tableState = pageState.GetOrCreate<TableState>("Table", "State", () => new());
        if (columnModel.Filter != null)
        {
            if (string.IsNullOrEmpty(filter))
                tableState.Filters.Remove(column);
            else
                tableState.Filters[column] = filter;
        }
        else if (columnModel.RangeFilter != null)
        {
            (var from, var to) = tableState.RangeFilters.TryGetValue(column, out var range) ? range : ("", "");
            if (input == 1)
                from = filter;
            else if (input == 2)
                to = filter;
            else
                return BadRequest($"Invalid input value: {input}");
            tableState.RangeFilters[column] = (from, to);
        }

        pageState.Set("Table", "State", tableState);
        await _tableProvider.FetchPage(tableModel, modelHandler.GetQueryable!(), tableState);
        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/Create")]
    [TableEditAction]
    public async Task<IActionResult> Create(string typeId, ModelUI modelUI)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_Create),
            [modelHandler.ModelType, modelHandler.KeyType],
            modelHandler);
        return result!;
    }

    private async Task<IActionResult> _Create<T, TKey>(ModelHandler<T, TKey> modelHandler)
        where T : class, new()
    {
        if (!await IsAuthorized(modelHandler.TypeId, Operations.Create))
            return Forbid();

        var editingItem = new T();

        var pageState = this.GetPageState();
        pageState.Set("Table", "EditingItem", editingItem);
        pageState.Set("Table", "EditingExistingRecord", false);

        var tableModel = await modelHandler.BuildTableModel();
        tableModel.Rows.Add(new TableRowContext<T, TKey>
        {
            Item = editingItem,
            ModelHandler = modelHandler,
            TargetDisposition = OobTargetDisposition.AfterBegin,
            TargetSelector = "#table-body",
            StringKey = "new",
            IsEditing = true,
        });

        return Ok(tableModel);
    }

    [HttpPost("{typeId}/{modelUI}/ValueChanged")]
    public async Task<IActionResult> ValueChanged(string typeId, ModelUI modelUI, string propertyName, string value)
    {
        var modelHandler = await _modelRegistry.GetModelHandler(typeId, modelUI);
        if (modelHandler == null)
            return BadRequest($"Model handler for type '{typeId}' not found.");

        var result = await GenericMethodInvoker.InvokeAsync<IActionResult>(
            this,
            nameof(_ValueChanged),
            [modelHandler.ModelType, modelHandler.KeyType],
            propertyName, value, modelHandler);
        return result!;
    }

    private Task<IActionResult> _ValueChanged<T, TKey>(string propertyName, string value,
        ModelHandler<T, TKey> modelHandler)
        where T : class
    {
        throw new NotImplementedException("This method is not implemented yet.");
    }


    private async Task<bool> IsAuthorized(string typeId, string operation)
    {
        var requirement = _permissionRequirementFactory.ForOperation(typeId, operation);
        var result = await _authorizationService.AuthorizeAsync(User, null, requirement);
        return result.Succeeded;
    }
}
</file>

<file path="Htmx.Components/Extensions/ExpressionExtensions.cs">
using System.Linq.Expressions;

namespace Htmx.Components.Extensions;

public static class ExpressionExtensions
{
    /// <summary>
    /// Extracts the property name from an expression like x => x.Property
    /// </summary>
    public static string GetPropertyName<T>(this Expression<Func<T, object>> expression)
    {
        if (expression.Body is UnaryExpression unary && unary.Operand is MemberExpression memberUnary)
        {
            return memberUnary.Member.Name;
        }
        else if (expression.Body is MemberExpression member)
        {
            return member.Member.Name;
        }

        throw new ArgumentException("Expression must be a member access", nameof(expression));
    }

    /// <summary>
    /// Extracts the property name from an expression like x => x.Property
    /// </summary>
    public static string GetPropertyName<T, TProp>(this Expression<Func<T, TProp>> expression)
    {
        if (expression.Body is UnaryExpression unary && unary.Operand is MemberExpression memberUnary)
        {
            return memberUnary.Member.Name;
        }
        else if (expression.Body is MemberExpression member)
        {
            return member.Member.Name;
        }

        throw new ArgumentException("Expression must be a member access", nameof(expression));
    }

    /// <summary>
    /// Extracts the type of the property from an expression like x => x.Property
    /// </summary>
    public static Type GetMemberType<T>(this Expression<Func<T, object>> expression)
        where T : class
    {
        Type type;
        if (expression.Body is UnaryExpression unary && unary.Operand is MemberExpression memberUnary)
        {
            type = memberUnary.Type;
        }
        else if (expression.Body is MemberExpression member)
        {
            type = member.Type;
        }
        else
        {
            throw new ArgumentException("Expression must be a member access", nameof(expression));
        }

        // If the type is nullable, get the underlying type
        return Nullable.GetUnderlyingType(type) ?? type;
    }
}
</file>

<file path="Htmx.Components/Extensions/StringExtensions.cs">
using System.Globalization;
using System.Text.RegularExpressions;

namespace Htmx.Components.Extensions;

public static class StringExtensions
{
    public static string SanitizeForHtmlId(this string input)
    {
        // Replace invalid characters with underscores
        return string.Concat(input.Select(c => char.IsLetterOrDigit(c) || c == '-' || c == '_' || c == ':' ? c : '_'));
    }

    // Naive utility for converting Serilog templates and arguments to a string
    internal static string FormatTemplate(this string messageTemplate, object parameter, params object[] additionalParameters)
    {
        return FormatTemplate(messageTemplate, new[] { parameter }.Concat(additionalParameters));
    }

    // Naive utility for converting Serilog templates and arguments to a string
    internal static string FormatTemplate(this string messageTemplate, IEnumerable<object> parameters)
    {
        var objects = parameters as object[] ?? parameters.ToArray();

        if (objects.Length == 0)
        {
            return messageTemplate;
        }

        if (objects.Length != Regex.Matches(messageTemplate, "{.*?}").Count)
        {
            throw new ArgumentException("Number of arguments does not match number of template parameters");
        }

        var i = 0;
        return Regex.Replace(messageTemplate, "{.*?}", _ => objects[i++]?.ToString() ?? string.Empty);
    }

    public static string ConvertToInputString<T>(this T value)
    {
        if (value == null)
            return string.Empty;

        var type = Nullable.GetUnderlyingType(typeof(T)) ?? typeof(T);
        // If T is object, use the runtime type of value
        if (type == typeof(object))
            type = value.GetType();

        if (type == typeof(DateTime))
            return ((DateTime)(object)value).ToString("yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture);
        if (type == typeof(DateTimeOffset))
            return ((DateTimeOffset)(object)value).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        if (type == typeof(TimeSpan))
            return ((TimeSpan)(object)value).ToString("HH\\:mm\\:ss", CultureInfo.InvariantCulture);
        if (type == typeof(Guid))
            return ((Guid)(object)value).ToString();
        if (type == typeof(DateOnly))
            return ((DateOnly)(object)value).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        if (type == typeof(TimeOnly))
            return ((TimeOnly)(object)value).ToString("HH:mm:ss", CultureInfo.InvariantCulture);
        if (type == typeof(bool))
            return ((bool)(object)value) ? "true" : "false";
        if (type.IsEnum)
            return ((Enum)(object)value).ToString();

        return Convert.ToString(value, CultureInfo.InvariantCulture) ?? string.Empty;
    }
}
</file>

<file path="Htmx.Components/Models/ActionModels.cs">
namespace Htmx.Components.Models;

/// <summary>
/// A visual item that has a label and optional Icon and css properties
/// </summary>
public interface IActionItem
{
    string Label { get; set; }
    string? Icon { get; set; }
    string? CssClass { get; set; }
}

/// <summary>
/// A plain container for a group of IActionItem elements, without any display properties.
/// Useful for menus, toolbars, or navbars where no label/icon is needed.
/// </summary>
public interface IActionSet
{
    public List<IActionItem> Items { get; set; }
}

/// <summary>
/// A visual item that has a label and optional Icon and css properties
/// </summary>
public class ActionItem: IActionItem
{
    public string Label { get; set; } = "";
    public string? Icon { get; set; }
    public string? CssClass { get; set; }
}


/// <summary>
/// A plain container for a group of IActionItem elements, without any display properties.
/// Useful for menus, toolbars, or navbars where no label/icon is needed.
/// </summary>
public class ActionSet : IActionSet
{
    public List<IActionItem> Items { get; set; }

    public ActionSet(ActionSetConfig config)
    {
        Items = config.Items;
    }

    public ActionSet() : this(new ActionSetConfig()) { }
}

/// <summary>
/// An ActionItem that contains nested IActionItems
/// </summary>
public class ActionGroup : ActionItem, IActionSet
{
    public List<IActionItem> Items { get; set; }

    public ActionGroup(ActionGroupConfig config)
    {
        Label = config.Label;
        Icon = config.Icon;
        CssClass = config.CssClass;
        Items = config.Items;
    }

    public ActionGroup() : this(new ActionGroupConfig()) { }
}

/// <summary>
/// An ActionItem that takes additional attributes, primarily for adding hx-attributes
/// </summary>
public class ActionModel : ActionItem
{
    public Dictionary<string, string> Attributes { get; init; } = new();

    public ActionModel(ActionModelConfig config)
    {
        Label = config.Label;
        Icon = config.Icon;
        CssClass = config.CssClass;
        Attributes = new Dictionary<string, string>(config.Attributes);
    }
}

public class ActionModelConfig
{
    public string Label { get; set; } = "";
    public string? Icon { get; set; }
    public string? CssClass { get; set; }
    public Dictionary<string, string> Attributes { get; set; } = new();
}

public class ActionSetConfig
{
    public List<IActionItem> Items { get; set; } = new();
}

public class ActionGroupConfig : ActionSetConfig
{
    public string Label { get; set; } = "";
    public string? Icon { get; set; }
    public string? CssClass { get; set; }
}
</file>

<file path="Htmx.Components/Models/HtmxViewInfo.cs">
namespace Htmx.Components.Models;

public class HtmxViewInfo
{
    public string ViewName { get; set; } = "";
    public object Model { get; set; } = null!;
    public OobTargetDisposition TargetDisposition { get; set; } = OobTargetDisposition.None;
    public string? TargetSelector { get; set; } = null;
}
</file>

<file path="Htmx.Components/State/PageState.cs">
using System.Text.Json;
using Microsoft.AspNetCore.DataProtection;

namespace Htmx.Components.State;

public interface IPageState
{
    void Load(string? encrypted);
    string Encrypted { get; }
    T? Get<T>(string partition, string key);
    T GetOrCreate<T>(string partition, string key, Func<T> factory);
    void Set<T>(string partition, string key, T value);
    void ClearKey(string partition, string key);
    void ClearPartition(string partition);
    bool IsDirty { get; }
}


public class PageState : IPageState
{
    private readonly IDataProtector _protector;
    private const string MetaPartition = "__meta";
    private const string VersionKey = "__version";
    private int _version = 0;

    public Dictionary<string, Dictionary<string, string>> State { get; private set; }

    public PageState(IDataProtectionProvider dataProtectionProvider)
    {
        _protector = dataProtectionProvider.CreateProtector("PageState");
        State = InitialState;
    }

    private static Dictionary<string, Dictionary<string, string>> InitialState => new()
    {
        [MetaPartition] = new Dictionary<string, string>
        {
            [VersionKey] = "0"
        }
    };

    public void Load(string? encrypted)
    {
        if (string.IsNullOrWhiteSpace(encrypted))
        {
            State = InitialState;
        }
        else
        {
            var json = _protector.Unprotect(encrypted);
            State = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, string>>>(json)
                    ?? new Dictionary<string, Dictionary<string, string>>();
        }
        _version = Get<int>(MetaPartition, VersionKey);
    }

    public string Encrypted => _protector.Protect(JsonSerializer.Serialize(State));

    private Dictionary<string, string> GetPartition(string partition)
    {
        if (!State.TryGetValue(partition, out var values))
        {
            values = new Dictionary<string, string>();
            State[partition] = values;
        }
        return values;
    }

    private void BumpVersion()
    {
        var meta = GetPartition(MetaPartition);
        if (!meta.TryGetValue(VersionKey, out var versionStr) || !int.TryParse(versionStr, out var version))
        {
            version = 0;
        }
        meta[VersionKey] = (version + 1).ToString();
    }

    public T? Get<T>(string partition, string key)
    {
        var p = GetPartition(partition);
        if (!p.TryGetValue(key, out var value)) return default;

        return JsonSerializer.Deserialize<T>(value)!;
    }

    public T GetOrCreate<T>(string partition, string key, Func<T> factory)
    {
        var p = GetPartition(partition);
        if (!p.TryGetValue(key, out var value))
        {
            var newValue = factory();
            p[key] = JsonSerializer.Serialize(newValue);
            BumpVersion();
            return newValue;
        }

        return JsonSerializer.Deserialize<T>(value)!;
    }

    public void Set<T>(string partition, string key, T value)
    {
        var p = GetPartition(partition);
        p[key] = JsonSerializer.Serialize(value);
        BumpVersion();
    }

    public void ClearKey(string partition, string key)
    {
        var p = GetPartition(partition);
        if (p.Remove(key))
        {
            BumpVersion();
        }
    }

    public void ClearPartition(string partition)
    {
        if (State.Remove(partition))
        {
            BumpVersion();
        }
    }

    public bool IsDirty => _version != Get<int>(MetaPartition, VersionKey);
}
</file>

<file path="Htmx.Components/ViewResults/HtmxResultBuilder.cs">
using Htmx.Components.Extensions;
using Htmx.Components.Models;
using Htmx.Components.NavBar;
using Htmx.Components.ViewResults;
using Htmx.Components.State;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Abstractions;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.DependencyInjection;

namespace Htmx.Components.ViewResults;

public class HtmxResultBuilder
{
    private readonly List<Task<HtmxViewInfo>> _oobViewInfos = new();
    private Task<HtmxViewInfo>? _mainViewInfo;

    private readonly INavProvider _navProvider;
    private readonly IPageState _pageState;

    public HtmxResultBuilder(INavProvider navProvider, IPageState pageState, IServiceProvider serviceProvider)
    {
        // Ensure the application part is registered. There's no official way to check if an extension has been added,
        // so we use a marker service to check if the extension is registered. This location seemd as good as any.
        try
        {
            serviceProvider.GetRequiredService<HtmxComponentsApplicationPartMarker>();
        }
        catch (InvalidOperationException)
        {
            throw new InvalidOperationException(
                $"{nameof(HtmxComponentsApplicationPartMarker)} not registered. Ensure you call {nameof(ServiceCollectionExtensions.AddHtmxComponentsApplicationPart)}() during startup.");
        }

        _navProvider = navProvider;
        _pageState = pageState;
    }

    public HtmxResultBuilder WithContent(string partialView, object model)
    {
        _mainViewInfo = Task.FromResult(new HtmxViewInfo
        {
            ViewName = partialView,
            Model = model
        });
        return this;
    }

    public HtmxResultBuilder WithContent(Func<Task<HtmxViewInfo>> contentTask)
    {
        _mainViewInfo = contentTask();
        return this;
    }

    public HtmxResultBuilder WithOob(string viewName, object model,
        OobTargetDisposition targetDisposition = OobTargetDisposition.OuterHtml, string? targetSelector = null)
    {
        _oobViewInfos.Add(Task.FromResult(new HtmxViewInfo
        {
            ViewName = viewName,
            Model = model,
            TargetDisposition = targetDisposition,
            TargetSelector = targetSelector
        }));
        return this;
    }

    public HtmxResultBuilder WithOob(string viewName, object model)
    {
        _oobViewInfos.Add(Task.FromResult(new HtmxViewInfo
        {
            ViewName = viewName,
            Model = model,
            TargetDisposition = model is IOobTargetable t1
                ? t1.TargetDisposition ?? OobTargetDisposition.OuterHtml
                : OobTargetDisposition.OuterHtml,
            TargetSelector = model is IOobTargetable t2
                ? t2.TargetSelector
                : null
        }));
        return this;
    }

    public HtmxResultBuilder WithOob(Func<Task<HtmxViewInfo>> partialTask)
    {
        _oobViewInfos.Add(partialTask());
        return this;
    }

    public HtmxResultBuilder WithOobNavbar(string navComponentName = "NavBar")
    {
        _oobViewInfos.Add(GetNavbarPartial(navComponentName));
        return this;
    }

    public async Task<MultiSwapViewResult> BuildAsync()
    {
        HtmxViewInfo? main = null;

        if (_mainViewInfo != null)
        {
            main = await _mainViewInfo;
        }

        var oobs = await Task.WhenAll(_oobViewInfos);

        var result = new MultiSwapViewResult()
            .WithOobContent(oobs);

        if (main != null)
        {
            result.WithMainContent(main.ViewName, main.Model);
        }

        return result;
    }

    private async Task<HtmxViewInfo> GetNavbarPartial(string navComponentName)
    {
        var nav = await _navProvider.BuildAsync();
        return new HtmxViewInfo
        {
            ViewName = navComponentName,
            Model = nav,
            TargetDisposition = OobTargetDisposition.OuterHtml
        };
    }

}
</file>

<file path="Htmx.Components/Views/Shared/Components/NavBar/Default.cshtml">
@using Htmx.Components.Models
@model IActionSet

<nav id="navbar" class="navbar bg-base-100 shadow-md rounded-box px-4">
    <div class="flex-1">
        <a class="text-xl font-bold">CruSibyl</a>
    </div>
    <div class="flex-none gap-2">
        <ul class="menu menu-horizontal px-1">
            @foreach (var item in Model.Items)
            {
                if (item is ActionModel actionModel)
                {
                    <li>
                        <a 
                           @(string.IsNullOrEmpty(actionModel.CssClass) ? "" : $"class=\"{actionModel.CssClass}\"")
                           @foreach (var attr in actionModel.Attributes)
                           {
                               @Html.Raw($" {attr.Key}=\"{attr.Value}\"")
                           }>
                            @if (!string.IsNullOrEmpty(actionModel.Icon))
                            {
                                <i class="model.Icon"></i>
                                <span class="ml-1">@actionModel.Label</span>
                            }
                            else
                            {
                                @item.Label
                            }
                        </a>
                    </li>
                }
                else if (item is ActionGroup group)
                {
                    <li>
                        <details>
                            <summary 
                                @(string.IsNullOrEmpty(group.CssClass) ? "" : $"class=\"{group.CssClass}\"")>
                                @if (!string.IsNullOrEmpty(group.Icon))
                                {
                                    <i class="@group.Icon"></i>
                                    <span class="ml-1">@group.Label</span>
                                }
                                else
                                {
                                    @group.Label
                                }
                            </summary>
                            <ul class="p-2 bg-base-100 z-50">
                                @foreach (var sub in group.Items)
                                {
                                    if (sub is ActionModel subModel)
                                    {
                                        <li>
                                            <a 
                                               @(string.IsNullOrEmpty(subModel.CssClass) ? "" : $"class=\"{subModel.CssClass}\"")
                                               @foreach (var attr in subModel.Attributes)
                                               {
                                                   @Html.Raw($" {attr.Key}=\"{attr.Value}\"")
                                               }>
                                                @if (!string.IsNullOrEmpty(subModel.Icon))
                                                {
                                                    <i class="@subModel.Icon"></i>
                                                    <span class="ml-1">@subModel.Label</span>
                                                }
                                                else
                                                {
                                                    @subModel.Label
                                                }
                                            </a>
                                        </li>
                                    }
                                }
                            </ul>
                        </details>
                    </li>
                }
            }
        </ul>
    </div>
</nav>
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableActionList.cshtml">
@using System.Text.Encodings.Web
@using Htmx.Components.Models.Table
@model ITableModel

<div id="table-action-list" class="flex justify-end mb-2 space-x-2">
    @foreach (var action in await Model.GetActions())
    {
        <button
            class="btn btn-sm @action.CssClass"
            @foreach (var attr in action.Attributes)
            {
                var encodedValue = HtmlEncoder.Default.Encode(attr.Value);
                @Html.Raw($"{attr.Key}=\"{encodedValue}\"")
            }>
            @if (!string.IsNullOrWhiteSpace(action.Icon))
            {
                <i class="@action.Icon"></i>
            }
            @action.Label
        </button>
    }
</div>
</file>

<file path="CruSibyl.Core/Data/DbInitializer.cs">
using CruSibyl.Core.Domain;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Data;
public class DbInitializer
{
    private readonly AppDbContext _dbContext;

    public DbInitializer(AppDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task InitializeUsers(bool recreateDb)
    {
        if (recreateDb)
        {
            //do what needs to be done?
        }

        var JasonUser = await CheckAndCreateUser(new User
        {
            Email = "jsylvestre@ucdavis.edu",
            Kerberos = "jsylvest",
            FirstName = "Jason",
            LastName = "Sylvestre",
            Iam = "1000009309",
            MothraId = "00600825",
        });
        var ScottUser = await CheckAndCreateUser(new User
        {
            Email = "srkirkland@ucdavis.edu",
            Kerberos = "postit",
            FirstName = "Scott",
            LastName = "Kirkland",
            Iam = "1000029584",
            MothraId = "00183873",
        });
        var RiverUser = await CheckAndCreateUser(new User
        {
            Email = "laholstege@ucdavis.edu",
            Kerberos = "holstege",
            FirstName = "River",
            LastName = "Holstege",
            Iam = "1000243041",
            MothraId = "01224288",
        });

        var SpruceUser = await CheckAndCreateUser(new User
        {
            Email = "swebermilne@ucdavis.edu",
            Kerberos = "sweber",
            FirstName = "Spruce",
            LastName = "Weber-Milne",
            Iam = "1000255034",
            MothraId = "01259393",
        });
        var RobUser = await CheckAndCreateUser(new User
        {
            Email = "rmartinsen@ucdavis.edu",
            Kerberos = "rmartins",
            FirstName = "Robert",
            LastName = "Martinsen",
            Iam = "1000571302",
            MothraId = "00183346",
        });

        await CheckAndCreateRoles();

        var systemRole = await _dbContext.Roles.SingleAsync(a => a.Name == Role.Codes.System);

        await CheckAndCreatePermission(JasonUser, systemRole);
        await CheckAndCreatePermission(ScottUser, systemRole);
        await CheckAndCreatePermission(RiverUser, systemRole);
        await CheckAndCreatePermission(SpruceUser, systemRole);
        await CheckAndCreatePermission(RobUser, systemRole);

        await _dbContext.SaveChangesAsync();

    }

    public async Task CheckAndCreateRoles()
    {
        var systemRole = await CheckAndCreateRole(Role.Codes.System);
        var adminRole = await CheckAndCreateRole(Role.Codes.Admin);
    }

    private async Task<Permission> CheckAndCreatePermission(User user, Role role)
    {
        var permissionToCreate = await _dbContext.Permissions.SingleOrDefaultAsync(a => a.User == user && a.Role == role);
        if (permissionToCreate == null)
        {
            permissionToCreate = new Permission
            {
                User = user,
                Role = role,
            };
            await _dbContext.Permissions.AddAsync(permissionToCreate);
        }
        return permissionToCreate;
    }

    private async Task<Role> CheckAndCreateRole(string roleName)
    {
        var roleToCreate = await _dbContext.Roles.SingleOrDefaultAsync(a => a.Name == roleName);
        if (roleToCreate == null)
        {
            roleToCreate = new Role
            {
                Name = roleName,
            };
            await _dbContext.Roles.AddAsync(roleToCreate);
        }
        return roleToCreate;
    }

    private async Task<User> CheckAndCreateUser(User user)
    {
        var userToCreate = await _dbContext.Users.SingleOrDefaultAsync(a => a.Iam == user.Iam);
        if (userToCreate == null)
        {
            userToCreate = user;
            await _dbContext.Users.AddAsync(userToCreate);
        }
        return userToCreate;
    }
}
</file>

<file path="CruSibyl.Web/Tools/input.css">
@import "tailwindcss" source(none);
@source "../{Views,wwwroot}/**/*.{html,cshtml}";
@source "../../Htmx.Components/Views/**/*.{html,cshtml}";
@source "./tailwind.extra-classes.txt";
@plugin "daisyui";
</file>

<file path="CruSibyl.Web/Views/_ViewImports.cshtml">
@using CruSibyl.Core.Domain
@using CruSibyl.Web.Extensions
@using Htmx.TagHelpers
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Htmx.TagHelpers
@addTagHelper *, Htmx.Components
</file>

<file path="CruSibyl.Web/appsettings.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "Authentication": {
    "ClientId": "[external]",
    "ClientSecret": "[external]",
    "Authority": "https://cas.ucdavis.edu/cas/oidc",
    "IamKey": "[External]"
  },
  "Serilog": {
    "AppName": "CruSibyl",
    "Environment": "[External]",
    "ElasticUrl": "[External]"
  },
  "AllowedHosts": "*",
  "Dev": {
    "RecreateDb": "false",
    "InitializeDb": "true",
    "UseSql": "true"
  }
}
</file>

<file path="Htmx.Components/Components/NavBar/NavProvider.cs">
using Htmx.Components.Models;
using Htmx.Components.Models.Builders;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;

namespace Htmx.Components.NavBar;

public interface INavProvider
{
    Task<IActionSet> BuildAsync();
}


/// <summary>
/// A default INavProvider that builds it's IActionSet via a given builderFactory delegate
/// </summary> <summary>
/// 
/// </summary>
public class BuilderBasedNavProvider : INavProvider
{
    private readonly Func<ActionSetBuilder, Task> _builderFactory;
    private readonly IServiceProvider _serviceProvider;

    public BuilderBasedNavProvider(IServiceProvider serviceProvider, Func<ActionSetBuilder, Task> builderFactory)
    {
        _builderFactory = builderFactory;
        _serviceProvider = serviceProvider;
    }

    public async Task<IActionSet> BuildAsync()
    {
        // Call the async factory to build the ActionSet
        var actionSetBuilder = new ActionSetBuilder(_serviceProvider);
        await _builderFactory(actionSetBuilder);

        // Build the final ActionSet
        return await actionSetBuilder.Build();
    }
}
</file>

<file path="Htmx.Components/Models/InputModels.cs">
using Htmx.Components.Extensions;

namespace Htmx.Components.Models;

/// <summary>
/// Represents a single input field.
/// </summary>
public interface IInputModel
{
    string PropName { get; }
    string Id { get; }
    ModelHandler ModelHandler { get; }
    string? Label { get; }
    string? Placeholder { get; }
    string? CssClass { get; }
    InputKind Kind { get; }
    string Value { get; }
    object? ObjectValue { get; set; }
    Dictionary<string, string> Attributes { get; }
    List<KeyValuePair<string, string>>? Options { get; }
}

public class InputModel<T, TProp> : IInputModel
{
    public InputModel(InputModelConfig<T, TProp> config)
    {
        PropName = config.PropName;
        Id = config.Id;
        ModelHandler = config.ModelHandler;
        TypeId = config.TypeId;
        Label = config.Label;
        Placeholder = config.Placeholder;
        CssClass = config.CssClass;
        Kind = config.Kind;
        ObjectValue = config.ObjectValue;
        Attributes = config.Attributes;
        Options = config.Options;
    }

    public string PropName { get; set; } = "";
    public string Id { get; set; } = "";
    public ModelHandler ModelHandler { get; set; } = null!;
    public string TypeId { get; set; } = typeof(T).Name;
    public string Label { get; set; } = "";
    public string? Placeholder { get; set; }
    public string? CssClass { get; set; }
    public InputKind Kind { get; set; } = InputKind.Text;
    public string Value => ObjectValue?.ConvertToInputString() ?? string.Empty;
    public object? ObjectValue { get; set; } = null;
    public Dictionary<string, string> Attributes { get; } = new();
    public List<KeyValuePair<string, string>>? Options { get; set; }

}

/// <summary>
/// Represents a set of input fields.
/// </summary>
public class InputSet
{
    public InputSet(InputSetConfig config)
    {
        Label = config.Label;
        Inputs = config.Inputs;
    }

    public InputSet() : this(new InputSetConfig()) { }

    public string? Label { get; set; } = null;
    public List<IInputModel> Inputs { get; set; } = new();
}

public enum InputKind
{
    Text,
    TextArea,
    Number,
    Date,
    Checkbox,
    Radio,
    Select,
    Lookup
}


public class InputModelConfig<T, TProp>
{
    public string PropName { get; set; } = "";
    public string Id { get; set; } = "";
    public ModelHandler ModelHandler { get; set; } = null!;
    public string TypeId { get; set; } = typeof(T).Name;
    public string Label { get; set; } = "";
    public string? Placeholder { get; set; }
    public string? CssClass { get; set; }
    public InputKind Kind { get; set; } = InputKind.Text;
    public object? ObjectValue { get; set; } = null;
    public Dictionary<string, string> Attributes { get; } = new();
    public List<KeyValuePair<string, string>>? Options { get; set; }
}

public class InputSetConfig
{
    public string? Label { get; set; }
    public List<IInputModel> Inputs { get; set; } = new();
}
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableCellActionList.cshtml">
@using Htmx.Components.Models.Table
@using System.Text.Encodings.Web
@using System.Threading.Tasks
@model TableCellPartialModel

@{
    var actions = await Model.Column.GetActions(Model.Row);
}

@foreach (var action in actions)
{
    <button
        class="btn btn-sm @action.CssClass"
        @foreach (var attr in action.Attributes)
        {
            var encodedValue = HtmlEncoder.Default.Encode(attr.Value);
            @Html.Raw($"{attr.Key}=\"{encodedValue}\"")
        }>
        @if (!string.IsNullOrWhiteSpace(action.Icon))
        {
            <i class="@action.Icon"></i>
        }
        @action.Label
    </button>
}
</file>

<file path="CruSibyl.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.002.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CruSibyl.Web", "CruSibyl.Web\CruSibyl.Web.csproj", "{440BE027-4547-4CEE-B0B0-FFD0AC861C62}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CruSibyl.Core", "CruSibyl.Core\CruSibyl.Core.csproj", "{96AD9D24-D78A-4F2B-B408-70CE4162CEFC}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CruSibyl.Jobs.Core", "CruSibyl.Jobs.Core\CruSibyl.Jobs.Core.csproj", "{3D2F9908-1BAD-40EB-8C48-8478C8360A6A}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CruSibyl.Jobs.ManifestSync", "CruSibyl.Jobs.ManifestSync\CruSibyl.Jobs.ManifestSync.csproj", "{CF68ECC5-C06E-4B4C-925E-5D181916D623}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Htmx.Components", "Htmx.Components\Htmx.Components.csproj", "{B942ACDE-2148-4568-8A83-C04D8E71CC20}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{440BE027-4547-4CEE-B0B0-FFD0AC861C62}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{440BE027-4547-4CEE-B0B0-FFD0AC861C62}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{440BE027-4547-4CEE-B0B0-FFD0AC861C62}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{440BE027-4547-4CEE-B0B0-FFD0AC861C62}.Release|Any CPU.Build.0 = Release|Any CPU
		{96AD9D24-D78A-4F2B-B408-70CE4162CEFC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{96AD9D24-D78A-4F2B-B408-70CE4162CEFC}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{96AD9D24-D78A-4F2B-B408-70CE4162CEFC}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{96AD9D24-D78A-4F2B-B408-70CE4162CEFC}.Release|Any CPU.Build.0 = Release|Any CPU
		{3D2F9908-1BAD-40EB-8C48-8478C8360A6A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3D2F9908-1BAD-40EB-8C48-8478C8360A6A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3D2F9908-1BAD-40EB-8C48-8478C8360A6A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{3D2F9908-1BAD-40EB-8C48-8478C8360A6A}.Release|Any CPU.Build.0 = Release|Any CPU
		{CF68ECC5-C06E-4B4C-925E-5D181916D623}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{CF68ECC5-C06E-4B4C-925E-5D181916D623}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{CF68ECC5-C06E-4B4C-925E-5D181916D623}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{CF68ECC5-C06E-4B4C-925E-5D181916D623}.Release|Any CPU.Build.0 = Release|Any CPU
		{B942ACDE-2148-4568-8A83-C04D8E71CC20}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{B942ACDE-2148-4568-8A83-C04D8E71CC20}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{B942ACDE-2148-4568-8A83-C04D8E71CC20}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{B942ACDE-2148-4568-8A83-C04D8E71CC20}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {1E97A21D-8FD4-4FEF-B4CA-1CAC4C3A187E}
	EndGlobalSection
EndGlobal
</file>

<file path="CruSibyl.Core/Services/GitHubService.cs">
using System.Text.Json;
using System.Xml.Linq;
using Microsoft.Extensions.Options;
using Octokit;
using Serilog;

namespace CruSibyl.Core.Services;

public interface IGitHubService
{
    public Task<List<ManifestData>> GetManifests(string repo);
}

public class GitHubService : IGitHubService
{
    private readonly GitHubSettings _settings;
    private readonly SemaphoreSlim _rateLimitSemaphore = new(1, 1);
    private int _requestCount = 0;
    private const int CoreRequestThreshold = 50;
    private const int SearchRequestThreshold = 10;

    public GitHubService(IOptions<GitHubSettings> settings)
    {
        _settings = settings.Value;
    }

    public async Task<List<ManifestData>> GetManifests(string repo)
    {
        var client = await GetGitHubClient();
        var owner = _settings.RepoOwner;

        var csprojManifests = await GetCSProjManifests(client, owner, repo);
        var npmManifests = await GetNPMManifests(client, owner, repo);

        return [.. csprojManifests, .. npmManifests];
    }

    private Task<GitHubClient> GetGitHubClient()
    {
        var gitHubClient = new GitHubClient(new ProductHeaderValue("CruSibyl"));
        gitHubClient.Credentials = new Credentials(_settings.AccessToken);
        return Task.FromResult(gitHubClient);
    }

    private async Task<List<ManifestData>> GetCSProjManifests(GitHubClient client, string owner, string repo)
    {
        Log.Information("Searching for .csproj files in repository {Repo}", repo);
        var csprojFiles = await SearchFilesInRepo(client, owner, repo, "extension:csproj");
        var manifests = new List<ManifestData>();

        foreach (var filePath in csprojFiles)
        {
            var xmlDoc = await LoadXmlFileFromRepo(client, owner, repo, filePath);
            var dependencies = ExtractCsprojDependencies(xmlDoc);

            var targetFramework = xmlDoc.Descendants("TargetFramework").FirstOrDefault()?.Value ?? "Unknown";
            manifests.Add(new ManifestData
            {
                Platform = "dotnet",
                PlatformVersion = targetFramework,
                Path = filePath,
                Dependencies = dependencies
            });
        }

        return manifests;
    }

    private async Task<List<ManifestData>> GetNPMManifests(GitHubClient client, string owner, string repo)
    {
        Log.Information("Searching for package.json files in repository {Repo}", repo);
        var packageJsonFiles = await SearchFilesInRepo(client, owner, repo, "filename:package.json");
        var manifests = new List<ManifestData>();

        foreach (var filePath in packageJsonFiles)
        {
            var jsonContent = await LoadFileContentFromRepo(client, owner, repo, filePath);
            using var doc = JsonDocument.Parse(jsonContent);
            var dependencies = ExtractNPMDependencies(doc);

            var platformVersion = doc.RootElement.TryGetProperty("engines", out var engines)
                && engines.TryGetProperty("node", out var nodeVersion)
                ? nodeVersion.GetString() ?? "Unknown"
                : "Unknown";

            manifests.Add(new ManifestData
            {
                Platform = "node",
                PlatformVersion = platformVersion,
                Path = filePath,
                Dependencies = dependencies
            });
        }

        return manifests;
    }

    async Task<List<string>> SearchFilesInRepo(GitHubClient client, string owner, string repo, string query)
    {
        await ThrottleIfNeeded(client, GitHubRequestType.Search);
        var searchQuery = $"{query} repo:{owner}/{repo}";
        var searchRequest = new SearchCodeRequest(searchQuery);
        var searchResults = await client.Search.SearchCode(searchRequest);

        return searchResults.Items.Select(item => item.Path).ToList();
    }

    async Task<XDocument> LoadXmlFileFromRepo(GitHubClient client, string owner, string repo, string filePath)
    {
        await ThrottleIfNeeded(client, GitHubRequestType.Core);
        string content = await LoadFileContentFromRepo(client, owner, repo, filePath);
        return XDocument.Parse(content);
    }

    async Task<string> LoadFileContentFromRepo(GitHubClient client, string owner, string repo, string filePath)
    {
        await ThrottleIfNeeded(client, GitHubRequestType.Core);
        var contents = await client.Repository.Content.GetAllContents(owner, repo, filePath);
        var content = contents.FirstOrDefault()?.Content ?? "";
        // strip Zero Width No-Break Space (ZWNBSP, U+FEFF) from beginning of string
        return content.TrimStart('\uFEFF');
    }

    static List<DependencyData> ExtractCsprojDependencies(XDocument xmlDoc)
    {
        return xmlDoc.Descendants("PackageReference")
            .Select(p => new DependencyData
            {
                Name = p.Attribute("Include")?.Value ?? "Unknown",
                Version = p.Attribute("Version")?.Value ?? "Unknown"
            })
            .ToList();
    }

    static List<DependencyData> ExtractNPMDependencies(JsonDocument doc)
    {
        var packages = new List<DependencyData>();
        if (doc.RootElement.TryGetProperty("dependencies", out var dependencies))
        {
            foreach (var property in dependencies.EnumerateObject())
            {
                packages.Add(new DependencyData
                {
                    Name = property.Name,
                    Version = property.Value.GetString() ?? "Unknown",
                    IsDevDependency = false
                });
            }
        }
        if (doc.RootElement.TryGetProperty("devDependencies", out var devDependencies))
        {
            foreach (var property in devDependencies.EnumerateObject())
            {
                packages.Add(new DependencyData
                {
                    Name = property.Name,
                    Version = property.Value.GetString() ?? "Unknown",
                    IsDevDependency = true
                });
            }
        }
        return packages;
    }

    private async Task ThrottleIfNeeded(GitHubClient client, GitHubRequestType type)
    {
        await _rateLimitSemaphore.WaitAsync();
        try
        {
            _requestCount++;
            int threshold = type == GitHubRequestType.Search ? SearchRequestThreshold : CoreRequestThreshold;
            if (_requestCount % threshold == 0)
            {
                var rateLimits = await client.RateLimit.GetRateLimits();
                var resource = type == GitHubRequestType.Search ? rateLimits.Resources.Search : rateLimits.Resources.Core;
                if (resource.Remaining < threshold)
                {
                    var waitTime = resource.Reset.UtcDateTime - DateTime.UtcNow;
                    if (waitTime > TimeSpan.Zero)
                    {
                        Log.Information("Rate limit reached for GitHubRequestType {RequestType}. Waiting {WaitTime} before next request.", type, waitTime);
                        await Task.Delay(waitTime);
                    }
                }
            }
        }
        finally
        {
            _rateLimitSemaphore.Release();
        }
    }

    private enum GitHubRequestType { Core, Search }

}

public class ManifestData
{
    public string Platform { get; set; } = "";
    public string PlatformVersion { get; set; } = "";
    public string Path { get; set; } = "";
    public List<DependencyData> Dependencies { get; set; } = new();
}

public class DependencyData
{
    public string Name { get; set; } = "Unknown";
    public string Version { get; set; } = "Unknown";
    public bool? IsDevDependency { get; set; } = null;
}
</file>

<file path="CruSibyl.Core/Services/ManifestSyncService.cs">
using System.Diagnostics;
using System.Text.Json;
using System.Text.RegularExpressions;
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using CruSibyl.Core.Models;
using EFCore.BulkExtensions;
using Microsoft.EntityFrameworkCore;
using Semver;
using Serilog;

namespace CruSibyl.Core.Services;

public interface IManifestSyncService
{
    public Task<Result> SyncManifests();
}

public class ManifestSyncService : IManifestSyncService
{
    private readonly IGitHubService _gitHubService;
    private readonly AppDbContext _dbContext;

    public ManifestSyncService(IGitHubService gitHubService, AppDbContext dbContext)
    {
        _gitHubService = gitHubService;
        _dbContext = dbContext;
    }

    public async Task<Result> SyncManifests()
    {
        // TODO: This scan metadata logic is kind of messy. Consider moving the data to a separate table
        var scanInfo = await _dbContext.Repos
            .GroupBy(r => 1)
            .Select(g => new
            {
                MaxScanNumber = g.Max(r => r.ScanNumber ?? 0),
                AllSameScanNumber = g.Select(r => r.ScanNumber ?? 0).Distinct().Count() == 1,
                AllCompleted = g.All(r => r.ScanStatus == ScanStatus.Completed)
            })
            .FirstAsync();

        var scanNumber = scanInfo.MaxScanNumber;
        var scanComplete = scanInfo.AllSameScanNumber && scanInfo.AllCompleted;

        Repo[] repos = Array.Empty<Repo>();

        if (scanComplete || scanNumber == 0)
        {
            // If all repos are complete, increment ScanNumber and start a new batch
            scanNumber += 1;
            repos = await _dbContext.Repos.ToArrayAsync();
            foreach (var repo in repos)
            {
                repo.ScanNumber = scanNumber;
                repo.ScanStatus = ScanStatus.InProgress;
            }
            await _dbContext.SaveChangesAsync();
        }
        else if (!scanInfo.AllSameScanNumber)
        {
            // This can happen if some repos have been recently added or updated
            scanNumber = Math.Max(scanNumber, 1);
            repos = await _dbContext.Repos
                .Where(r => (r.ScanNumber ?? 0) != scanNumber)
                .ToArrayAsync();
            foreach (var repo in repos)
            {
                repo.ScanNumber = scanNumber;
                repo.ScanStatus = ScanStatus.InProgress;
            }
            await _dbContext.SaveChangesAsync();
        }

        // Get only repos that are not complete for the current batch
        repos = await _dbContext.Repos
            .Where(r => (r.ScanNumber ?? 0) == scanNumber && r.ScanStatus != ScanStatus.Completed)
            .ToArrayAsync();

        var platforms = await _dbContext.Platforms
            .Include(p => p.Versions)
            .ToDictionaryAsync(p => p.Name);
        var packages = await _dbContext.Packages
            .Include(p => p.Versions)
            .ToDictionaryAsync(p => $"{p.Name}|{p.PlatformId}");
        var manifests = await _dbContext.Manifests
            .ToDictionaryAsync(m => $"{m.RepoId}|{m.FilePath}");
        var dependencies = await _dbContext.Dependencies
            .ToDictionaryAsync(d => $"{d.ManifestId}|{d.PackageVersionId}");

        try
        {
            foreach (var repo in repos)
            {
                Log.Verbose("Getting {RepoName} manifests", repo.Name);
                var gitHubManifests = await _gitHubService.GetManifests(repo.Name);

                foreach (var gitHubManifest in gitHubManifests)
                {
                    // Ensure Platforms and PlatformVersions exist
                    if (!platforms.TryGetValue(gitHubManifest.Platform, out var platform))
                    {
                        platform = new Platform { Name = gitHubManifest.Platform, Versions = new() };
                        platforms[gitHubManifest.Platform] = platform;
                        _dbContext.Platforms.Add(platform);
                    }

                    var platformVersion = platform.Versions.FirstOrDefault(v => v.Version == gitHubManifest.PlatformVersion);
                    if (platformVersion == null)
                    {
                        platformVersion = new PlatformVersion
                        {
                            Platform = platform,
                            Version = gitHubManifest.PlatformVersion
                        };
                        platform.Versions.Add(platformVersion);
                        _dbContext.PlatformVersions.Add(platformVersion);
                    }

                    var manifestKey = $"{repo.Id}|{gitHubManifest.Path}";
                    if (!manifests.TryGetValue(manifestKey, out var manifest))
                    {
                        manifest = new Manifest
                        {
                            Repo = repo,
                            PlatformVersion = platformVersion,
                            FilePath = gitHubManifest.Path,
                            Dependencies = new()
                        };
                        manifests[manifestKey] = manifest;
                        _dbContext.Manifests.Add(manifest);
                    }

                    foreach (var dep in gitHubManifest.Dependencies)
                    {
                        // Ensure Package exists
                        var packageKey = $"{dep.Name}|{platform.Id}";
                        if (!packages.TryGetValue(packageKey, out var package))
                        {
                            package = new Package { Name = dep.Name, Platform = platform, Versions = new() };
                            packages[packageKey] = package;
                            _dbContext.Packages.Add(package);
                        }

                        // Ensure PackageVersion exists
                        var packageVersion = package.Versions.FirstOrDefault(v => v.Version == dep.Version);
                        if (packageVersion == null)
                        {
                            var baseVersion = ExtractBaseVersion(dep.Version);
                            var version = SemVersion.Parse(baseVersion);
                            packageVersion = new PackageVersion
                            {
                                Package = package,
                                Version = dep.Version,
                                Major = (int?)(version?.Major),
                                Minor = (int?)(version?.Minor),
                                Patch = (int?)(version?.Patch),
                                PreRelease = version?.Prerelease,
                            };
                            package.Versions.Add(packageVersion);
                            _dbContext.PackageVersions.Add(packageVersion);
                        }

                        // Ensure Dependency exists
                        var dependencyKey = $"{manifest.Id}|{packageVersion.Id}";
                        if (!dependencies.ContainsKey(dependencyKey))
                        {
                            var newDependency = new Dependency
                            {
                                Manifest = manifest,
                                PackageVersion = packageVersion,
                                IsDevDependency = dep.IsDevDependency
                            };
                            _dbContext.Dependencies.Add(newDependency);
                        }
                    }
                }
                repo.ScanStatus = ScanStatus.Completed;
                await _dbContext.SaveChangesAsync();
            }
            return Result.Ok();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Error Syncing");
            return Result.Error(ex.Message);
        }
    }

    private static string ExtractBaseVersion(string versionSpec)
    {
        // Match the first version-like pattern (e.g., 1.2.3, 1.2.3-beta)
        var match = Regex.Match(versionSpec, @"\d+\.\d+\.\d+(-[A-Za-z0-9\.-]+)?");
        return match.Success ? match.Value : versionSpec;
    }
}
</file>

<file path="CruSibyl.Core/CruSibyl.Core.csproj">
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="EFCore.BulkExtensions" Version="8.1.3" />
    <PackageReference Include="ietws" Version="0.2.22" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="8.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.14" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.14" />
    <PackageReference Include="Microsoft.IdentityModel.Clients.ActiveDirectory" Version="5.3.0" />
    <PackageReference Include="Octokit" Version="14.0.0" />
    <PackageReference Include="Semver" Version="3.0.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="8.0.0" />
    <PackageReference Include="Serilog.Enrichers.ClientInfo" Version="2.1.2" />
    <PackageReference Include="Serilog.Exceptions" Version="8.4.0" />
    <PackageReference Include="Serilog.Exceptions.EntityFrameworkCore" Version="8.4.0" />
    <PackageReference Include="Serilog.Sinks.Elasticsearch" Version="10.0.0" />
  </ItemGroup>

</Project>
</file>

<file path="CruSibyl.Web/Controllers/TabController.cs">
using Htmx;
using Htmx.Components;
using Htmx.Components.NavBar;
using Microsoft.AspNetCore.Mvc;
using Htmx.Components.ViewResults;

namespace CruSibyl.Web.Controllers;

public abstract class TabController : Controller
{
    protected HtmxResultBuilder HtmxResultBuilder => HttpContext.RequestServices.GetRequiredService<HtmxResultBuilder>();

    public IActionResult RenderInitialMainContent(string partialName, object model)
    {
        ViewData["InitialMainPartial"] = partialName;
        ViewData["InitialMainModel"] = model;
        return View("MainContent");
    }
}
</file>

<file path="Htmx.Components/Models/Builders/InputModelBuilder.cs">
using System.Linq.Expressions;
using Htmx.Components.Extensions;
using Htmx.Components.Models;
using Humanizer;

namespace Htmx.Components.Models.Builders;

public interface IInputModelBuilder
{
    Task<IInputModel> Build();
}

public class InputModelBuilder<T, TProp> : BuilderBase<InputModelBuilder<T, TProp>, InputModel<T, TProp>>, IInputModelBuilder
    where T : class
{
    private readonly InputModelConfig<T, TProp> _config = new();

    internal InputModelBuilder(IServiceProvider serviceProvider, Expression<Func<T, TProp>> propertySelector)
        : base(serviceProvider)
    {
        var propName = propertySelector.GetPropertyName();
        _config.PropName = propName;
        _config.Id = propName.SanitizeForHtmlId();
        _config.Kind = GetInputKind(typeof(TProp));
        _config.Label = propName.Humanize();
    }

    public InputModelBuilder<T, TProp> WithKind(InputKind kind)
    {
        _config.Kind = kind;
        return this;
    }

    public InputModelBuilder<T, TProp> WithName(string name)
    {
        _config.PropName = name;
        return this;
    }

    public InputModelBuilder<T, TProp> WithLabel(string label)
    {
        _config.Label = label;
        return this;
    }

    public InputModelBuilder<T, TProp> WithPlaceholder(string placeholder)
    {
        _config.Placeholder = placeholder;
        return this;
    }

    public InputModelBuilder<T, TProp> WithCssClass(string cssClass)
    {
        _config.CssClass = cssClass;
        return this;
    }

    public InputModelBuilder<T, TProp> WithValue(TProp value)
    {
        _config.ObjectValue = value;
        return this;
    }

    public InputModelBuilder<T, TProp> WithAttribute(string key, string value)
    {
        _config.Attributes[key] = value;
        return this;
    }

    public InputModelBuilder<T, TProp> WithOptions(IEnumerable<KeyValuePair<string, string>> options)
    {
        _config.Options = options.ToList();
        return this;
    }

    protected override Task<InputModel<T, TProp>> BuildImpl()
        => Task.FromResult(new InputModel<T, TProp>(_config));

    async Task<IInputModel> IInputModelBuilder.Build()
    {
        return await base.Build();
    }

    private static InputKind GetInputKind(Type type)
    {
        var underlyingType = Nullable.GetUnderlyingType(type) ?? type;
        return underlyingType switch
        {
            Type t when t == typeof(string) => InputKind.Text,
            Type t when t == typeof(DateTime) => InputKind.Date,
            Type t when t == typeof(int) || t == typeof(long) || t == typeof(float) || t == typeof(double) => InputKind.Number,
            Type t when t == typeof(bool) => InputKind.Checkbox,
            Type t when t.IsEnum => InputKind.Radio,
            _ => InputKind.Text
        };
    }
}
</file>

<file path="Htmx.Components/Models/Table/TableModel.cs">
using System.Linq.Expressions;

namespace Htmx.Components.Models.Table;

// We have a separate, non-generic class, since razor views don't support generic type params
public interface ITableModel
{
    public string TypeId { get; set; }
    public List<ITableRowContext> Rows { get; set; }
    public List<ITableColumnModel> Columns { get; set; }
    public int PageCount { get; set; }
    public TableState State { get; set; }
    public TableViewPaths TableViewPaths { get; set; }
    public ModelHandler ModelHandler { get; set; }
    public Task<IEnumerable<ActionModel>> GetActions();
}


public class TableModel<T, TKey> : ITableModel
    where T : class
{
    public string TypeId { get; set; } = typeof(T).Name;
    public List<TableRowContext<T, TKey>> Rows { get; set; } = new();
    public List<TableColumnModel<T, TKey>> Columns { get; set; } = new();
    public int PageCount { get; set; } = 1;
    public TableState State { get; set; } = new();
    public TableViewPaths TableViewPaths { get; set; } = new();
    public ModelHandler<T, TKey> ModelHandler { get; set; } = default!;
    public List<Func<TableModel<T, TKey>, Task<IEnumerable<ActionModel>>>> ActionsFactories { get; set; } = [];
    public Expression<Func<T, TKey>> KeySelector { get; internal set; } = default!;

    public TableModel(TableModelConfig<T, TKey> config)
    {
        TypeId = config.TypeId ?? typeof(T).Name;
        Columns = config.Columns;
        TableViewPaths = config.TableViewPaths ?? new TableViewPaths();
        ModelHandler = config.ModelHandler ?? throw new ArgumentNullException(nameof(config.ModelHandler));
        ActionsFactories = config.ActionsFactories;
        KeySelector = config.KeySelector ?? throw new ArgumentNullException(nameof(config.KeySelector));
    }

    ModelHandler ITableModel.ModelHandler
    {
        get => ModelHandler;
        set => ModelHandler = (ModelHandler<T, TKey>)value;
    }

    // Explicit implementation of ITableModel
    List<ITableRowContext> ITableModel.Rows
    {
        get => Rows.Cast<ITableRowContext>().ToList();
        set => Rows = value.Cast<TableRowContext<T, TKey>>().ToList();
    }

    List<ITableColumnModel> ITableModel.Columns
    {
        get => Columns.Cast<ITableColumnModel>().ToList();
        set => Columns = value.Cast<TableColumnModel<T, TKey>>().ToList();
    }

    public async Task<IEnumerable<ActionModel>> GetActions()
    {
        var results = new List<ActionModel>();
        foreach (var factory in ActionsFactories)
        {
            var actions = await factory(this);
            if (actions != null)
                results.AddRange(actions);
        }
        return results;
    }
}

public class TableModelConfig<T, TKey>
    where T : class
{
    public string? TypeId { get; set; }
    public Expression<Func<T, TKey>>? KeySelector { get; set; }
    public ModelHandler<T, TKey>? ModelHandler { get; set; }
    public TableViewPaths TableViewPaths { get; set; } = new();
    public List<TableColumnModel<T, TKey>> Columns { get; } = new();
    public List<Func<TableModel<T, TKey>, Task<IEnumerable<ActionModel>>>> ActionsFactories { get; set; } = [];
}
</file>

<file path=".gitignore">
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
build/
bld/
bin/
Bin/
obj/
Obj/

# Visual Studio 2015 cache/options directory
.vs/
/wwwroot/dist/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# TODO: Comment the next line if you want to checkin your web deploy settings
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/packages/*
# except build/, which is used as an MSBuild target.
!**/packages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/packages/repositories.config

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Microsoft Azure ApplicationInsights config file
ApplicationInsights.config

# Windows Store app package directory
AppPackages/
BundleArtifacts/

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.pfx
*.publishsettings
orleans.codegen.cs

/node_modules

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
*.mdf
*.ldf

# Sqlite db files
*.db
*.db-shm
*.db-wal

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe

# FAKE - F# Make
.fake/

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
package-lock.json
yarn.lock
pnpm-lock.yaml
.npm/
.nvmrc
.env
.env.*.local

# JetBrains IDEs (IntelliJ, WebStorm, etc.)
.idea/
*.iml
*.iws

# Rider
.idea/
*.sln.iml

# macOS system files
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
Thumbs.db
</file>

<file path="Htmx.Components/Components/Table/TableViewComponent.cs">
using Htmx.Components.Models.Table;
using Microsoft.AspNetCore.Mvc;

namespace Htmx.Components.Table;

public class TableViewComponent : ViewComponent
{
    private readonly TableViewPaths _viewPaths;

    public TableViewComponent(TableViewPaths viewPaths)
    {
        _viewPaths = viewPaths;
    }

    public IViewComponentResult Invoke(ITableModel model)
    {
        model.TableViewPaths = _viewPaths;

        return View(_viewPaths.Table, model);
    }
}
</file>

<file path="Htmx.Components/Models/Builders/ActionBuilders.cs">
using Htmx.Components.Models;

namespace Htmx.Components.Models.Builders;

public abstract class ActionItemsBuilder<TBuilder, TSet, TConfig> : BuilderBase<TBuilder, TSet>
    where TBuilder : ActionItemsBuilder<TBuilder, TSet, TConfig>
    where TSet : class, IActionSet, new()
    where TConfig : ActionSetConfig, new()
{
    protected readonly TConfig _config = new();

    protected ActionItemsBuilder(IServiceProvider serviceProvider)
        : base(serviceProvider) { }

    public TBuilder AddAction(Action<ActionModelBuilder> configure)
    {
        AddBuildTask(async () =>
        {
            var actionModelBuilder = new ActionModelBuilder(_serviceProvider);
            configure(actionModelBuilder);
            var actionModel = await actionModelBuilder.Build();
            _config.Items.Add(actionModel);
        });
        return (TBuilder)this;
    }

    public TBuilder AddItem(IActionItem item)
    {
        _config.Items.Add(item);
        return (TBuilder)this;
    }

    public TBuilder AddRange(IEnumerable<IActionItem> items)
    {
        _config.Items.AddRange(items);
        return (TBuilder)this;
    }
}

public class ActionSetBuilder : ActionItemsBuilder<ActionSetBuilder, ActionSet, ActionSetConfig>
{
    public ActionSetBuilder(IServiceProvider serviceProvider)
        : base(serviceProvider) { }

    public ActionSetBuilder AddGroup(Action<ActionGroupBuilder> configure)
    {
        AddBuildTask(async () =>
        {
            var actionGroupBuilder = new ActionGroupBuilder(_serviceProvider);
            configure(actionGroupBuilder);
            var actionGroup = await actionGroupBuilder.Build();
            _config.Items.Add(actionGroup);
        });
        return this;
    }

    protected override Task<ActionSet> BuildImpl()
        => Task.FromResult(new ActionSet(_config));
}

public class ActionGroupBuilder : ActionItemsBuilder<ActionGroupBuilder, ActionGroup, ActionGroupConfig>
{
    public ActionGroupBuilder(IServiceProvider serviceProvider)
        : base(serviceProvider) { }

    public ActionGroupBuilder WithLabel(string label)
    {
        _config.Label = label;
        return this;
    }

    public ActionGroupBuilder WithIcon(string icon)
    {
        _config.Icon = icon;
        return this;
    }

    public ActionGroupBuilder WithClass(string cssClass)
    {
        _config.CssClass = cssClass;
        return this;
    }

    protected override Task<ActionGroup> BuildImpl()
        => Task.FromResult(new ActionGroup(_config));
}

public class ActionModelBuilder : BuilderBase<ActionModelBuilder, ActionModel>
{
    private readonly ActionModelConfig _config = new();

    public ActionModelBuilder(IServiceProvider serviceProvider)
        : base(serviceProvider) { }

    public ActionModelBuilder WithLabel(string label)
    {
        _config.Label = label;
        return this;
    }

    public ActionModelBuilder WithIcon(string icon)
    {
        _config.Icon = icon;
        return this;
    }

    public ActionModelBuilder WithClass(string cssClass)
    {
        _config.CssClass = cssClass;
        return this;
    }

    public ActionModelBuilder WithAttribute(string name, string value)
    {
        _config.Attributes[name] = value;
        return this;
    }

    public ActionModelBuilder WithHxGet(string url) => WithAttribute("hx-get", url);
    public ActionModelBuilder WithHxPost(string url) => WithAttribute("hx-post", url);
    public ActionModelBuilder WithHxTarget(string target) => WithAttribute("hx-target", target);
    public ActionModelBuilder WithHxSwap(string swap) => WithAttribute("hx-swap", swap);
    public ActionModelBuilder WithHxPushUrl(string pushUrl = "true") => WithAttribute("hx-push-url", pushUrl);
    public ActionModelBuilder WithHxInclude(string selector) => WithAttribute("hx-include", selector);

    protected override Task<ActionModel> BuildImpl()
    => Task.FromResult(new ActionModel(_config));

}
</file>

<file path="Htmx.Components/Models/Builders/BuilderBase.cs">
using Htmx.Components.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.Extensions.DependencyInjection;

namespace Htmx.Components.Models.Builders;

public abstract class BuilderBase<TBuilder, TModel>
    where TBuilder : BuilderBase<TBuilder, TModel>
    where TModel : class
{
    protected readonly IServiceProvider _serviceProvider;
    private readonly List<Func<Task>> _buildTasks;

    protected BuilderBase(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
        _buildTasks = [];
    }

    public ActionContext ActionContext
    {
        get
        {
            var actionContextAccessor = _serviceProvider.GetRequiredService<IActionContextAccessor>();
            return actionContextAccessor.GetValidActionContext();
        }
    }

    protected void AddBuildTask(Task task)
    {
        _buildTasks.Add(() => task);
    }

    protected void AddBuildTask(Func<Task> taskFunc)
    {
        _buildTasks.Add(taskFunc);
    }

    protected void AddBuildTask(Action action)
    {
        _buildTasks.Add(() => Task.Run(action));
    }

    protected abstract Task<TModel> BuildImpl();

    internal async Task<TModel> Build()
    {
        var tasks = _buildTasks.Select(f => f());
        await Task.WhenAll(tasks);
        return await BuildImpl();
    }
}
</file>

<file path="Htmx.Components/Models/Builders/InputSetBuilder.cs">
using System.Linq.Expressions;
using Microsoft.Extensions.DependencyInjection;

namespace Htmx.Components.Models.Builders;

public class InputSetBuilder<T> : BuilderBase<InputSetBuilder<T>, InputSet>
    where T : class
{
    private readonly InputSetConfig _config = new();

    public InputSetBuilder(IServiceProvider serviceProvider)
        : base(serviceProvider)
    {
    }

    public InputSetBuilder<T> AddInput<TProp>(Expression<Func<T, TProp>> propSelector,
        Action<InputModelBuilder<T, TProp>> configure)
    {
        AddBuildTask(async () =>
        {
            var builder = new InputModelBuilder<T, TProp>(_serviceProvider, propSelector);
            configure(builder);
            var inputModel = await builder.Build();
            _config.Inputs.Add(inputModel);
        });
        return this;
    }

    public InputSetBuilder<T> AddInput(IInputModel inputModel)
    {
        _config.Inputs.Add(inputModel);
        return this;
    }

    public InputSetBuilder<T> AddRange(IEnumerable<IInputModel> inputModels)
    {
        _config.Inputs.AddRange(inputModels);
        return this;
    }

    public InputSetBuilder<T> WithLabel(string label)
    {
        _config.Label = label;
        return this;
    }

    protected override Task<InputSet> BuildImpl()
        => Task.FromResult(new InputSet(_config));

}
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableEditClassToggle.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel

@{
    var isEditing = Model.Rows.Any(r => r.IsEditing);
}

<div id="table-edit-class-toggle" class="@(isEditing ? "editing-mode" : "")"></div>
</file>

<file path="Htmx.Components/Htmx.Components.csproj">
<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <AddRazorSupportForMvc>true</AddRazorSupportForMvc>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="FastExpressionCompiler" Version="5.0.3" />
    <PackageReference Include="Htmx" Version="1.8.1" />
    <PackageReference Include="Htmx.TagHelpers" Version="1.8.1" />
    <PackageReference Include="Humanizer" Version="2.14.1" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.14" />
    <PackageReference Include="Razor.Templating.Core" Version="2.1.0" />
    <PackageReference Include="Serilog" Version="4.2.0" />
  </ItemGroup>

  <ItemGroup>
    <RazorCompile Include="TagHelpers\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="**\*.cshtml" />
  </ItemGroup>

</Project>
</file>

<file path="CruSibyl.Core/Data/AppDbContext.cs">
using CruSibyl.Core.Domain;
using Microsoft.EntityFrameworkCore;

namespace CruSibyl.Core.Data;

public sealed class AppDbContextSqlite : AppDbContext
{
    public AppDbContextSqlite(DbContextOptions<AppDbContextSqlite> options) : base(options)
    {
    }
}

public sealed class AppDbContextSqlServer : AppDbContext
{
    public AppDbContextSqlServer(DbContextOptions<AppDbContextSqlServer> options) : base(options)
    {
    }
}

public abstract class AppDbContext : DbContext
{
    protected AppDbContext(DbContextOptions options) : base(options)
    {
    }
    public virtual DbSet<User> Users { get; set; }
    public virtual DbSet<Role> Roles { get; set; }
    public virtual DbSet<Permission> Permissions { get; set; }
    public virtual DbSet<Note> Notes { get; set; }
    public virtual DbSet<NoteMapping> NoteMappings { get; set; }
    public virtual DbSet<Package> Packages { get; set; }
    public virtual DbSet<PackageVersion> PackageVersions { get; set; }
    public virtual DbSet<Platform> Platforms { get; set; }
    public virtual DbSet<PlatformVersion> PlatformVersions { get; set; }
    public virtual DbSet<Manifest> Manifests { get; set; }
    public virtual DbSet<Dependency> Dependencies { get; set; }
    public virtual DbSet<Repo> Repos { get; set; }
    public virtual DbSet<Tag> Tags { get; set; }
    public virtual DbSet<TagMapping> TagMappings { get; set; }
    public virtual DbSet<RoleOperation> RoleOperations { get; set; }
    public virtual DbSet<Resource> Resources { get; set; }
    public virtual DbSet<Operation> Operations { get; set; }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        base.OnModelCreating(builder);
        // Set DeleteBehavior.Restrict for all required relationships
        foreach (var entityType in builder.Model.GetEntityTypes())
        {
            foreach (var foreignKey in entityType.GetForeignKeys())
            {
                if (!foreignKey.IsOwnership && foreignKey.IsRequired)
                {
                    foreignKey.DeleteBehavior = DeleteBehavior.Restrict;
                }
            }
        }

        RoleOperation.OnModelCreating(builder);
    }
}

// This is a workaround for the fact that IDbContextFactory<T> is not covariant. We need to inject a factory
// in order to use the DbContext in a scoped manner while performing resource operation registrations
// during app startup.
public class DbContextFactoryAdapter<TConcrete> : IDbContextFactory<AppDbContext>
    where TConcrete : AppDbContext
{
    private readonly IDbContextFactory<TConcrete> _inner;
    public DbContextFactoryAdapter(IDbContextFactory<TConcrete> inner) => _inner = inner;
    public AppDbContext CreateDbContext() => _inner.CreateDbContext();
}
</file>

<file path="CruSibyl.Core/Migrations/Sqlite/AppDbContextSqliteModelSnapshot.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.Sqlite
{
    [DbContext(typeof(AppDbContextSqlite))]
    partial class AppDbContextSqliteModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManifestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Major")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Minor")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PackageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Patch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreRelease")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLTS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlatformId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Core/Migrations/SqlServer/AppDbContextSqlServerModelSnapshot.cs">
// <auto-generated />
using System;
using CruSibyl.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CruSibyl.Core.Migrations.SqlServer
{
    [DbContext(typeof(AppDbContextSqlServer))]
    partial class AppDbContextSqlServerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDevDependency")
                        .HasColumnType("bit");

                    b.Property<int>("ManifestId")
                        .HasColumnType("int");

                    b.Property<int>("PackageVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageVersionId");

                    b.HasIndex("ManifestId", "PackageVersionId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlatformVersionId")
                        .HasColumnType("int");

                    b.Property<int>("RepoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlatformVersionId");

                    b.HasIndex("RepoId", "FilePath")
                        .IsUnique();

                    b.ToTable("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("EntityType", "EntityId", "NoteId")
                        .IsUnique();

                    b.ToTable("NoteMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("PlatformId");

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.HasIndex("Name", "PlatformId")
                        .IsUnique();

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Major")
                        .HasColumnType("int");

                    b.Property<int?>("Minor")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("Patch")
                        .HasColumnType("int");

                    b.Property<string>("PreRelease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId", "Version")
                        .IsUnique();

                    b.ToTable("PackageVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsLTS")
                        .HasColumnType("bit");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId", "Version")
                        .IsUnique();

                    b.ToTable("PlatformVersions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastScannedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ScanMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScanNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ScanStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastScannedAt");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScanNumber");

                    b.HasIndex("ScanStatus");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ResourceId", "OperationId", "RoleId")
                        .IsUnique();

                    b.ToTable("RoleOperations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("EntityType", "EntityId", "TagId")
                        .IsUnique();

                    b.ToTable("TagMappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iam")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Kerberos")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MothraId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Iam")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Dependency", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Manifest", "Manifest")
                        .WithMany("Dependencies")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.PackageVersion", "PackageVersion")
                        .WithMany()
                        .HasForeignKey("PackageVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manifest");

                    b.Navigation("PackageVersion");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.PlatformVersion", "PlatformVersion")
                        .WithMany()
                        .HasForeignKey("PlatformVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Repo", "Repo")
                        .WithMany("Manifests")
                        .HasForeignKey("RepoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlatformVersion");

                    b.Navigation("Repo");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.NoteMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Note", "Note")
                        .WithMany("Mappings")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PackageVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Package", "Package")
                        .WithMany("Versions")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Permission", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.PlatformVersion", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Platform", "Platform")
                        .WithMany("Versions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.RoleOperation", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Operation", "Operation")
                        .WithMany("Operations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Resource", "Resource")
                        .WithMany("Operations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CruSibyl.Core.Domain.Role", "Role")
                        .WithMany("Operations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Resource");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.TagMapping", b =>
                {
                    b.HasOne("CruSibyl.Core.Domain.Tag", "Tag")
                        .WithMany("Mappings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Manifest", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Note", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Operation", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Package", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Platform", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Repo", b =>
                {
                    b.Navigation("Manifests");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Resource", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Role", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.Tag", b =>
                {
                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CruSibyl.Core.Domain.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
</file>

<file path="CruSibyl.Web/Controllers/DashboardController.cs">
using Htmx;
using Htmx.Components.Attributes;
using Microsoft.AspNetCore.Mvc;

namespace CruSibyl.Web.Controllers;

public class DashboardController : TabController
{
    [NavAction(DisplayName = "Dashboard", Icon = "fas fa-tachometer-alt", Order = 0, PushUrl = true, ViewName = "_Content")]
    public IActionResult Index()
    {
        return Ok(new { });
    }
}
</file>

<file path="Htmx.Components/Models/Table/TableColumnModel.cs">
using System.Linq.Expressions;
using System.Text.Json;
using FastExpressionCompiler;
using Htmx.Components.Extensions;

namespace Htmx.Components.Models.Table;

// We have a non-generic interface, since razor views don't support generic type params
public interface ITableColumnModel
{
    string Header { get; set; }
    string DataName { get; set; }
    string Id { get; }
    bool Sortable { get; set; }
    bool Filterable { get; set; }
    bool IsEditable { get; set; }
    ColumnType ColumnType { get; set; }
    string? CellPartialView { get; set; } // Custom rendering for cell
    string? FilterPartialView { get; set; } // Custom rendering for filter
    public string? CellEditPartialView { get; set; }
    Task<IEnumerable<ActionModel>> GetActions(ITableRowContext rowContext);
    object GetValue(ITableRowContext rowContext);  // Extracts value dynamically
    string GetSerializedValue(ITableRowContext rowContext);
    ITableModel Table { get; set; } // Reference to the parent table
    Func<ITableRowContext, Task<IInputModel>> GetInputModel { get; }
}

public enum ColumnType
{
    ValueSelector,
    Display
}

public class TableCellPartialModel
{
    public required ITableModel Table { get; init; }
    public required ITableRowContext Row { get; init; }
    public required ITableColumnModel Column { get; init; }
}

public class TableColumnModel<T, TKey> : ITableColumnModel where T : class
{
    public TableColumnModel(TableColumnModelConfig<T, TKey> config)
    {
        Header = config.Display.Header;
        DataName = config.Display.DataName;
        Sortable = config.Behavior.Sortable;
        Filterable = config.Behavior.Filterable;
        IsEditable = config.Behavior.IsEditable;
        ColumnType = config.Display.ColumnType;
        CellPartialView = config.Display.CellPartialView;
        FilterPartialView = config.Display.FilterPartialView;
        CellEditPartialView = config.Display.CellEditPartialView;
        Filter = config.FilterOptions.Filter;
        RangeFilter = config.FilterOptions.RangeFilter;
        ActionsFactories = config.ActionOptions.ActionsFactories;
        GetInputModel = config.InputOptions.GetInputModel ?? (_ => throw new InvalidOperationException("GetInputModel is not set."));
        SelectorExpression = config.DataOptions.SelectorExpression ?? (x => x!);
        SelectorFunc = config.DataOptions.SelectorFunc ?? SelectorExpression.CompileFast();
        Paths = config.DataOptions.Paths!;
        ModelHandler = config.DataOptions.ModelHandler!;
    }

    public TableViewPaths Paths { get; set; } = default!;
    public ModelHandler<T, TKey> ModelHandler { get; set; } = default!;

    private Expression<Func<T, object>> _selectorExpression = x => x!;

    // used for referencing a member of T when working with IQueryable<T>
    public Expression<Func<T, object>> SelectorExpression
    {
        get => _selectorExpression;
        set
        {
            _selectorExpression = value;
            // FastExpressionCompiler is a widely used and maintained library that will
            // fallback to the built-in Expression.Compile() if it encounters an error.
            SelectorFunc = value.CompileFast();
        }
    }

    // used for actually pulling values from instance of T when rendering cells
    public Func<T, object> SelectorFunc { get; set; } = x => x!;
    public string Header { get; set; } = "";
    public string DataName { get; set; } = "";
    public string Id => "col_" + DataName.SanitizeForHtmlId();
    public bool Sortable { get; set; } = true;
    public bool Filterable { get; set; } = true;
    public bool IsEditable { get; set; } = false;
    public ColumnType ColumnType { get; set; }
    public string? CellPartialView { get; set; } // Custom rendering for cell
    public string? FilterPartialView { get; set; } // Custom rendering for filter
    public string? CellEditPartialView { get; set; }
    public ITableModel Table { get; set; } = default!;

    /// <summary>
    /// A delegate that extends filtering of a <see cref="IQueryable<typeparamref name="T"/>"/>   using a single value comparison
    /// </summary>
    public Func<IQueryable<T>, string, IQueryable<T>>? Filter { get; set; }

    /// <summary>
    /// A delegate that extends filtering of a <see cref="IQueryable<typeparamref name="T"/>"/>  using a two value range comparison
    /// </summary>
    public Func<IQueryable<T>, string, string, IQueryable<T>>? RangeFilter { get; set; }

    /// <summary>
    /// A delegate that generates one or more <see cref="ActionModel"/>s that can be mapped to buttons in a view
    /// </summary>
    public List<Func<TableRowContext<T, TKey>, Task<IEnumerable<ActionModel>>>> ActionsFactories { get; set; } = [];

    public Func<TableRowContext<T, TKey>, Task<IInputModel>> GetInputModel { get; internal set; } = _ =>
    {
        throw new InvalidOperationException("GetInputModel is not set. Ensure that the column is configured with WithEditable(true).");
    };

    Func<ITableRowContext, Task<IInputModel>> ITableColumnModel.GetInputModel => async rowContext =>
    {
        if (rowContext is TableRowContext<T, TKey> typedRowContext)
        {
            return await GetInputModel(typedRowContext);
        }
        throw new InvalidOperationException("Row context is not of the expected type.");
    };

    public async Task<IEnumerable<ActionModel>> GetActions(ITableRowContext rowContext)
    {
        if (rowContext.Item is T typedItem)
        {
            var results = new List<ActionModel>();
            foreach (var factory in ActionsFactories)
            {
                var actions = await factory((TableRowContext<T, TKey>)rowContext);
                if (actions != null)
                {
                    results.AddRange(actions);
                }
            }
            return results;
        }
        return [];
    }

    // Implement the interface method for non-generic use
    public object GetValue(ITableRowContext rowContext)
    {
        if (rowContext.Item is T typedItem)
        {
            return SelectorFunc(typedItem);
        }
        return "";
    }

    public string GetSerializedValue(ITableRowContext rowContext)
    {
        if (rowContext.Item is T typedItem)
        {
            return JsonSerializer.Serialize(SelectorFunc(typedItem));
        }
        return "";
    }
}

public class TableColumnModelConfig<T, TKey>
    where T : class
{
    public TableColumnDisplayOptions Display { get; set; } = new();
    public TableColumnBehaviorOptions Behavior { get; set; } = new();
    public TableColumnFilterOptions<T> FilterOptions { get; set; } = new();
    public TableColumnActionOptions<T, TKey> ActionOptions { get; set; } = new();
    public TableColumnInputOptions<T, TKey> InputOptions { get; set; } = new();
    public TableColumnDataOptions<T, TKey> DataOptions { get; set; } = default!;
}

public class TableColumnDisplayOptions
{
    public string Header { get; set; } = "";
    public string DataName { get; set; } = "";
    public string? CellPartialView { get; set; }
    public string? FilterPartialView { get; set; }
    public string? CellEditPartialView { get; set; }
    public ColumnType ColumnType { get; set; } = ColumnType.ValueSelector;
}

public class TableColumnBehaviorOptions
{
    public bool Sortable { get; set; } = true;
    public bool Filterable { get; set; } = false;
    public bool IsEditable { get; set; } = false;
}

public class TableColumnFilterOptions<T>
    where T : class
{
    public Func<IQueryable<T>, string, IQueryable<T>>? Filter { get; set; }
    public Func<IQueryable<T>, string, string, IQueryable<T>>? RangeFilter { get; set; }
}

public class TableColumnActionOptions<T, TKey>
    where T : class
{
    public List<Func<TableRowContext<T, TKey>, Task<IEnumerable<ActionModel>>>> ActionsFactories { get; set; } = [];
}

public class TableColumnInputOptions<T, TKey>
    where T : class
{
    public Func<TableRowContext<T, TKey>, Task<IInputModel>>? GetInputModel { get; set; }
}

public class TableColumnDataOptions<T, TKey>
    where T : class
{
    public Expression<Func<T, object>>? SelectorExpression { get; set; }
    public Func<T, object>? SelectorFunc { get; set; }
    public required TableViewPaths Paths { get; set; }
    public ModelHandler<T, TKey>? ModelHandler { get; set; }
}
</file>

<file path="Htmx.Components/Models/ModelHandler.cs">
using System.Linq.Expressions;
using FastExpressionCompiler;
using Htmx.Components.Input;
using Htmx.Components.Models.Table;
using Htmx.Components.Models.Builders;

namespace Htmx.Components.Models;

public abstract class ModelHandler
{
    public string TypeId { get; set; } = null!;
    public Type ModelType { get; protected set; } = null!;
    public Type KeyType { get; protected set; } = null!;
    public CrudFeatures CrudFeatures { get; internal set; }
    public ModelUI ModelUI { get; set; }
}

public enum ModelUI
{
    Table,
}

public class ModelHandler<T, TKey> : ModelHandler
    where T : class
{
    private Expression<Func<T, TKey>> _keySelectorExpression = null!;
    private Func<T, TKey> _keySelectorFunc = null!;

    public ModelHandler()
    {
        ModelType = typeof(T);
        KeyType = typeof(TKey);
    }

    public ModelHandler(ModelHandlerOptions<T, TKey> options)
        : this()
    {
        if (options.TypeId == null) throw new ArgumentNullException(nameof(options.TypeId));
        if (options.KeySelector == null) throw new ArgumentNullException(nameof(options.KeySelector));
        if (options.Table.Paths == null) throw new ArgumentNullException(nameof(options.Table.Paths));
        if (options.ServiceProvider == null) throw new ArgumentNullException(nameof(options.ServiceProvider));

        TypeId = options.TypeId;
        ModelType = typeof(T);
        KeyType = typeof(TKey);
        ModelUI = options.ModelUI;
        Paths = options.Table.Paths;
        ServiceProvider = options.ServiceProvider;

        KeySelector = options.KeySelector;

        // CRUD
        CrudFeatures = options.Crud.CrudFeatures;
        GetQueryable = options.Crud.GetQueryable;
        CreateModel = options.Crud.CreateModel;
        UpdateModel = options.Crud.UpdateModel;
        DeleteModel = options.Crud.DeleteModel;
        GetCreateActionModel = options.Crud.GetCreateActionModel;
        GetUpdateActionModel = options.Crud.GetUpdateActionModel;
        GetCancelActionModel = options.Crud.GetCancelActionModel;
        GetDeleteActionModel = options.Crud.GetDeleteActionModel;

        // Table
        ConfigureTableModel = options.Table.ConfigureTableModel;

        // Inputs
        InputModelBuilders = options.Inputs.InputModelBuilders;
    }

    public Expression<Func<T, TKey>> KeySelector
    {
        get => _keySelectorExpression;
        set
        {
            _keySelectorExpression = value;
            _keySelectorFunc = value.CompileFast();
        }
    }

    public Func<IQueryable<T>>? GetQueryable { get; internal set; }
    public Func<T, Task<Result>>? CreateModel { get; internal set; }
    public Func<T, Task<Result>>? UpdateModel { get; internal set; }
    public Func<TKey, Task<Result>>? DeleteModel { get; internal set; }
    public Func<ActionModel>? GetCreateActionModel { get; internal set; }
    public Func<ActionModel>? GetUpdateActionModel { get; internal set; }
    public Func<ActionModel>? GetCancelActionModel { get; internal set; }
    public Func<ActionModel>? GetDeleteActionModel { get; internal set; }
    public Func<T, TKey> KeySelectorFunc => _keySelectorFunc;
    internal Dictionary<string, Func<ModelHandler<T, TKey>, Task<IInputModel>>>? InputModelBuilders { get; set; }
    internal Action<TableModelBuilder<T, TKey>>? ConfigureTableModel { get; set; }
    internal TableViewPaths Paths { get; set; } = null!;
    internal IServiceProvider ServiceProvider { get; set; } = null!;

    public Task<TableModel<T, TKey>> BuildTableModel()
    {
        var tableModelBuilder = new TableModelBuilder<T, TKey>(_keySelectorExpression, Paths, this, ServiceProvider);
        ConfigureTableModel?.Invoke(tableModelBuilder);
        return tableModelBuilder.Build();
    }

    public async Task<IInputModel> BuildInputModel(string name)
    {
        if (InputModelBuilders == null || !InputModelBuilders.TryGetValue(name, out var builder))
            throw new ArgumentException($"No input model found for name '{name}'.");

        return await builder(this);
    }

    /// <summary>
    /// Creates a predicate expression for the key selector. This is used to filter a collection
    /// to a single item based on the key. The key can be a simple value type, a string, or a
    /// composite type (e.g., a tuple or a class).
    /// </summary>
    /// <param name="key"></param>
    /// <returns></returns>
    /// <exception cref="NotSupportedException"></exception>
    public Expression<Func<T, bool>> GetKeyPredicate(TKey key)
    {
        var param = KeySelector.Parameters[0];
        Expression body;

        if (typeof(TKey).IsValueType || typeof(TKey) == typeof(string))
        {
            // Simple key: x => KeySelector(x) == key
            body = Expression.Equal(KeySelector.Body, Expression.Constant(key, typeof(TKey)));
        }
        else if (typeof(TKey).IsGenericType && typeof(TKey).Name.StartsWith("ValueTuple"))
        {
            // Composite key: compare each field
            var comparisons = new List<Expression>();
            var fields = typeof(TKey).GetFields();
            for (int i = 0; i < fields.Length; i++)
            {
                var memberAccess = Expression.Field(KeySelector.Body, fields[i]);
                var keyValue = Expression.Constant(fields[i].GetValue(key), fields[i].FieldType);
                comparisons.Add(Expression.Equal(memberAccess, keyValue));
            }
            body = comparisons.Aggregate(Expression.AndAlso);
        }
        else if (typeof(TKey).IsClass)
        {
            // Composite key: compare each property
            var comparisons = new List<Expression>();
            var properties = typeof(TKey).GetProperties();
            foreach (var prop in properties)
            {
                var memberAccess = Expression.Property(KeySelector.Body, prop);
                var keyValue = Expression.Constant(prop.GetValue(key), prop.PropertyType);
                comparisons.Add(Expression.Equal(memberAccess, keyValue));
            }
            if (comparisons.Count == 0)
                throw new NotSupportedException($"Key type {typeof(TKey)} has no properties.");
            body = comparisons.Aggregate(Expression.AndAlso);
        }
        else
        {
            throw new NotSupportedException($"Key type {typeof(TKey)} is not supported.");
        }

        return Expression.Lambda<Func<T, bool>>(body, param);
    }
}

[Flags]
public enum CrudFeatures
{
    None = 0,
    Create = 1,
    Read = 2,
    Update = 4,
    Delete = 8
}

public class CrudOptions<T, TKey>
{
    public Func<IQueryable<T>>? GetQueryable { get; set; }
    public Func<T, Task<Result>>? CreateModel { get; set; }
    public Func<T, Task<Result>>? UpdateModel { get; set; }
    public Func<TKey, Task<Result>>? DeleteModel { get; set; }
    public CrudFeatures CrudFeatures { get; set; }
    public Func<ActionModel>? GetCreateActionModel { get; set; }
    public Func<ActionModel>? GetUpdateActionModel { get; set; }
    public Func<ActionModel>? GetCancelActionModel { get; set; }
    public Func<ActionModel>? GetDeleteActionModel { get; set; }
}

public class TableOptions<T, TKey>
    where T : class
{
    public Action<TableModelBuilder<T, TKey>>? ConfigureTableModel { get; set; }
    public TableViewPaths? Paths { get; set; }
}

public class InputOptions<T, TKey>
    where T : class
{
    public Dictionary<string, Func<ModelHandler<T, TKey>, Task<IInputModel>>> InputModelBuilders { get; } = new();
}

public class ModelHandlerOptions<T, TKey>
    where T : class
{
    public string? TypeId { get; set; }
    public Expression<Func<T, TKey>>? KeySelector { get; set; }
    public CrudOptions<T, TKey> Crud { get; set; } = new();
    public TableOptions<T, TKey> Table { get; set; } = new();
    public InputOptions<T, TKey> Inputs { get; set; } = new();
    public IServiceProvider? ServiceProvider { get; set; }
    public ModelUI ModelUI { get; set; } = ModelUI.Table;
}
</file>

<file path="Htmx.Components/Models/Builders/ModelHandlerBuilder.cs">
using System.Linq.Expressions;
using Htmx.Components.Authorization;
using Htmx.Components.Extensions;
using Htmx.Components.Models.Table;

namespace Htmx.Components.Models.Builders;

public class ModelHandlerBuilder<T, TKey> : BuilderBase<ModelHandlerBuilder<T, TKey>, ModelHandler<T, TKey>>
    where T : class, new()
{
    private readonly IResourceOperationRegistry _resourceOperationRegistry;
    private readonly ModelHandlerOptions<T, TKey> _options = new();

    internal ModelHandlerBuilder(IServiceProvider serviceProvider, string typeId, TableViewPaths tableViewPaths, IResourceOperationRegistry resourceOperationRegistry)
        : base(serviceProvider)
    {
        _resourceOperationRegistry = resourceOperationRegistry;
        _options.TypeId = typeId;
        _options.ModelUI = ModelUI.Table;
        _options.Table.Paths = tableViewPaths;
        _options.ServiceProvider = serviceProvider;
    }

    public ModelHandlerBuilder<T, TKey> WithTypeId(string typeId)
    {
        _options.TypeId = typeId;
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithKeySelector(Expression<Func<T, TKey>> keySelector)
    {
        _options.KeySelector = keySelector;
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithQueryable(Func<IQueryable<T>> getQueryable)
    {
        _options.Crud.CrudFeatures |= CrudFeatures.Read;
        _options.Crud.GetQueryable = getQueryable;
        AddBuildTask(_resourceOperationRegistry.Register(_options.TypeId!, Constants.Authorization.Operations.Read));
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithCreate(Func<T, Task<Result>> createModel)
    {
        _options.Crud.CrudFeatures |= CrudFeatures.Create;
        _options.Crud.CreateModel = createModel;
        _options.Crud.GetCreateActionModel = () => new ActionModel(new ActionModelConfig
        {
            Label = "Create",
            Icon = "fas fa-plus mr-1",
            Attributes = new Dictionary<string, string>
            {
                { "hx-post", $"/Form/{_options.TypeId}/{_options.ModelUI}/Create" },
            }
        });
        SetCancelActionModel();
        AddBuildTask(_resourceOperationRegistry.Register(_options.TypeId!, Constants.Authorization.Operations.Create));
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithUpdate(Func<T, Task<Result>> updateModel)
    {
        _options.Crud.CrudFeatures |= CrudFeatures.Update;
        _options.Crud.UpdateModel = updateModel;
        _options.Crud.GetUpdateActionModel = () => new ActionModel(new ActionModelConfig
        {
            Label = "Update",
            Icon = "fas fa-edit mr-1",
            Attributes = new Dictionary<string, string>
            {
                { "hx-post", $"/Form/{_options.TypeId}/{_options.ModelUI}/Update" },
            }
        });
        SetCancelActionModel();
        AddBuildTask(_resourceOperationRegistry.Register(_options.TypeId!, Constants.Authorization.Operations.Update));
        return this;
    }

    private void SetCancelActionModel()
    {
        if (_options.Crud.GetCancelActionModel != null)
            return;
        _options.Crud.GetCancelActionModel = () => new ActionModel(new ActionModelConfig
        {
            Label = "Cancel",
            Icon = "fas fa-times mr-1",
            Attributes = new Dictionary<string, string>
            {
                { "hx-get", $"/Form/{_options.TypeId}/{_options.ModelUI}/Cancel" },
            }
        });
    }

    public ModelHandlerBuilder<T, TKey> WithDelete(Func<TKey, Task<Result>> deleteModel)
    {
        _options.Crud.CrudFeatures |= CrudFeatures.Delete;
        _options.Crud.DeleteModel = deleteModel;
        _options.Crud.GetDeleteActionModel = () => new ActionModel(new ActionModelConfig
        {
            Label = "Delete",
            Icon = "fas fa-trash mr-1",
            Attributes = new Dictionary<string, string>
            {
                { "hx-delete", $"/Form/{_options.TypeId}/{_options.ModelUI}/Delete" },
            }
        });
        AddBuildTask(_resourceOperationRegistry.Register(_options.TypeId!, Constants.Authorization.Operations.Delete));
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithTable(Action<TableModelBuilder<T, TKey>> configure)
    {
        _options.Table.ConfigureTableModel = configure;
        return this;
    }

    public ModelHandlerBuilder<T, TKey> WithInput<TProp>(Expression<Func<T, TProp>> propertySelector,
        Action<InputModelBuilder<T, TProp>> configure)
    {
        _options.Inputs.InputModelBuilders.TryAdd(propertySelector.GetPropertyName(), async (modelHandler) =>
        {
            var builder = new InputModelBuilder<T, TProp>(_serviceProvider, propertySelector);
            configure(builder);
            var inputModel = await builder.Build();
            inputModel.ModelHandler = modelHandler;
            return inputModel;
        });
        return this;
    }

    protected override Task<ModelHandler<T, TKey>> BuildImpl()
    {
        var handler = new ModelHandler<T, TKey>(_options);
        return Task.FromResult(handler);
    }

}
</file>

<file path="Htmx.Components/Models/Builders/TableColumnModelBuilder.cs">
using System.Linq.Expressions;
using FastExpressionCompiler;
using Htmx.Components.Extensions;
using Htmx.Components.Models;
using Htmx.Components.Models.Table;
using Htmx.Components.Services;
using Microsoft.EntityFrameworkCore;

namespace Htmx.Components.Models.Builders;


public class TableColumnModelBuilder<T, TKey> : BuilderBase<TableColumnModelBuilder<T, TKey>, TableColumnModel<T, TKey>>
    where T : class
{
    private readonly TableColumnModelConfig<T, TKey> _config;

    internal TableColumnModelBuilder(TableColumnModelConfig<T, TKey> config, IServiceProvider serviceProvider)
        : base(serviceProvider)
    {
        _config = config;
    }

    public TableColumnModelBuilder<T, TKey> WithEditable(bool isEditable = true)
    {
        if (!(_config.DataOptions.ModelHandler?.InputModelBuilders?.TryGetValue(_config.Display.DataName, out var inputModelBuilder) == true))
        {
            throw new InvalidOperationException($"No input model builder found for column '{_config.Display.DataName}'. Ensure that the input model is registered in the ModelHandler.");
        }
        _config.Behavior.IsEditable = isEditable;
        if (isEditable)
        {
            _config.InputOptions.GetInputModel = async (rowContext) =>
            {
                var inputModel = await inputModelBuilder.Invoke(rowContext.ModelHandler);
                inputModel.ObjectValue = _config.DataOptions.SelectorFunc!(rowContext.Item);
                return inputModel;
            };
        }
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithCellPartial(string cellPartial)
    {
        _config.Display.CellPartialView = cellPartial;
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithFilterPartial(string filterPartial)
    {
        _config.Display.FilterPartialView = filterPartial;
        _config.Behavior.IsEditable = true;
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithFilter(Func<IQueryable<T>, string, IQueryable<T>> filter)
    {
        _config.FilterOptions.Filter = filter;
        _config.Behavior.Filterable = true;
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithRangeFilter(Func<IQueryable<T>, string, string, IQueryable<T>> rangeFilter)
    {
        //TODO: not tested and probably won't work. need to figure out how to support different column types
        _config.FilterOptions.RangeFilter = rangeFilter;
        _config.Behavior.Filterable = true;
        if (string.IsNullOrWhiteSpace(_config.Display.FilterPartialView))
        {
            _config.Display.FilterPartialView = _config.DataOptions.Paths.FilterDateRange;
        }
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithActions(Action<TableRowContext<T, TKey>, ActionSetBuilder> actionsFactory)
    {
        _config.ActionOptions.ActionsFactories.Add(async (rowContext) =>
        {
            var actionSetBuilder = new ActionSetBuilder(_serviceProvider);
            actionsFactory.Invoke(rowContext, actionSetBuilder);
            var actionSet = await actionSetBuilder.Build();
            return actionSet.Items.Cast<ActionModel>();
        });
        if (string.IsNullOrWhiteSpace(_config.Display.CellPartialView))
        {
            _config.Display.CellPartialView = _config.DataOptions.Paths.CellActionList;
        }
        return this;
    }

    public TableColumnModelBuilder<T, TKey> WithCrudActions()
    {
        WithActions((row, actions) =>
        {
            var typeId = row.ModelHandler.TypeId;
            if (row.IsEditing)
                actions
                    .AddAction(action => action
                        .WithLabel("Save")
                        .WithIcon("fas fa-save")
                        .WithHxPost($"/Form/{typeId}/Table/Save"))
                    .AddAction(action => action
                        .WithLabel("Cancel")
                        .WithIcon("fas fa-times")
                        .WithHxPost($"/Form/{typeId}/Table/CancelEdit"));
            else
                actions
                    .AddAction(action => action
                        .WithLabel("Edit")
                        .WithIcon("fas fa-edit")
                        .WithHxPost($"/Form/{typeId}/Table/Edit?key={row.Key}"))
                    .AddAction(action => action
                        .WithLabel("Delete")
                        .WithIcon("fas fa-trash")
                        .WithClass("text-red-600")
                        .WithHxPost($"/Form/{typeId}/Table/Delete?key={row.Key}"));
        });
        return this;
    }

    protected override Task<TableColumnModel<T, TKey>> BuildImpl()
    {
        if (_config.DataOptions.SelectorFunc == null && _config.DataOptions.SelectorExpression != null)
        {
            _config.DataOptions.SelectorFunc = _config.DataOptions.SelectorExpression.CompileFast();
        }

        var model = new TableColumnModel<T, TKey>(_config);
        return Task.FromResult(model);
    }
}
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableFilterDateRange.cshtml">
@using Htmx.Components.Models.Table
@model ITableColumnModel

<div class="flex space-x-1">
       <input type="date" class="input input-bordered input-sm w-1/2" id="table-filter-@Model.Header-min" name="filter"
              placeholder="From" hx-post="@Url.Action("SetFilter", "Form", new { typeId = Model.Table.TypeId })"
              hx-vals='{"input": 0, "column": "@Model.DataName"}' hx-swap="none"
              hx-trigger="input changed delay:500ms" />

       <input type="date" class="input input-bordered input-sm w-1/2" id="table-filter-@Model.Header-max" name="filter"
              placeholder="To" hx-post="@Url.Action("SetFilter", "Form", new { typeId = Model.Table.TypeId })"
              hx-vals='{"input": 1, "column": "@Model.DataName"}' hx-swap="none"
              hx-trigger="input changed delay:500ms" />
</div>
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableFilterText.cshtml">
@using Htmx.Components.Models.Table
@model ITableColumnModel

<input type="text" class="input input-bordered input-sm w-full" id="table-filter-@Model.Header" name="filter"
       placeholder="Filter @Model.Header"
       hx-post="@Url.Action("SetFilter", "Form", new { typeId = Model.Table.TypeId })"
       hx-vals='{"input": 0, "column": "@Model.DataName"}' hx-swap="none" hx-trigger="input changed delay:500ms" />
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableRow.cshtml">
@using Htmx.Components.Models.Table
@model (ITableModel table, ITableRowContext row)

@{
  var isEditing = Model.row.IsEditing;
}

<tr id="@Model.row.RowId" class="@(isEditing ? "editing-row" : "")">
  @foreach (var column in Model.table.Columns)
  {
    var cellPartialView = string.IsNullOrEmpty(column.CellPartialView)
    ? Model.table.TableViewPaths.Cell
    : column.CellPartialView;
    var cellModel = new TableCellPartialModel { Table = Model.table, Row = Model.row, Column = column };
    <td>
      @await Html.PartialAsync(cellPartialView, cellModel)
    </td>
  }
</tr>
</file>

<file path="CruSibyl.Web/Views/Admin/_Content.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel

<div id="main-content">
  <h2 class="text-2xl font-bold">Repo</h2>
  <p class="text-gray-600">Description of Repo</p>
  @await Component.InvokeAsync("Table", Model)
</div>
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_Table.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel

<div id="table-container" class="relative">
    @await Html.PartialAsync(Model.TableViewPaths.EditClassToggle, Model)
    @await Html.PartialAsync(Model.TableViewPaths.TableActionList, Model)
    <table class="table w-full">
        <thead>
            @await Html.PartialAsync(Model.TableViewPaths.Header, Model)
            <tr id="table-filter-row">
                @foreach (var column in Model.Columns)
                {
                    <th>
                        @if (column.Filterable)
                        {
                            @if (!string.IsNullOrEmpty(column.FilterPartialView))
                            {
                                @await Html.PartialAsync(column.FilterPartialView, column)
                            }
                            else
                            {
                                @await Html.PartialAsync(Model.TableViewPaths.FilterText, column)
                            }
                        }
                    </th>
                }
            </tr>
        </thead>
        @await Html.PartialAsync(Model.TableViewPaths.Body, Model)
    </table>

    @await Html.PartialAsync(Model.TableViewPaths.Pagination, Model)
 </div>
</file>

<file path="Htmx.Components/Models/Builders/TableModelBuilder.cs">
using System.Linq.Expressions;
using FastExpressionCompiler;
using Htmx.Components.Extensions;
using Htmx.Components.Models;
using Htmx.Components.Models.Table;
using Htmx.Components.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Htmx.Components.Models.Builders;


/// <summary>
/// Abstracts the process of creating a <see cref="TableModel<typeparamref name="T"/>"/>
/// </summary>
/// <typeparam name="T"></typeparam>
public class TableModelBuilder<T, TKey> : BuilderBase<TableModelBuilder<T, TKey>, TableModel<T, TKey>>
    where T : class
{
    private readonly TableModelConfig<T, TKey> _config = new();

    internal TableModelBuilder(Expression<Func<T, TKey>> keySelector, TableViewPaths paths, ModelHandler<T, TKey> modelHandler, IServiceProvider serviceProvider)
        : base(serviceProvider)
    {
        _config.KeySelector = keySelector;
        _config.ModelHandler = modelHandler;
        _config.TypeId = modelHandler.TypeId;
        _config.TableViewPaths = paths;
    }


    /// <summary>
    /// Adds a TableColumnModel configured to be used as a value selector
    /// </summary>
    /// <param name="header"></param>
    /// <param name="selector"></param>
    /// <param name="configure"></param>
    /// <returns></returns>
    public TableModelBuilder<T, TKey> AddSelectorColumn(string header, Expression<Func<T, object>> selector,
        Action<TableColumnModelBuilder<T, TKey>>? configure = null)
    {
        AddBuildTask(async () =>
        {
            var config = new TableColumnModelConfig<T, TKey>
            {
                Display = new TableColumnDisplayOptions
                {
                    Header = header,
                    DataName = selector.GetPropertyName(),
                    ColumnType = ColumnType.ValueSelector
                },
                DataOptions = new TableColumnDataOptions<T, TKey>
                {
                    SelectorExpression = selector,
                    Paths = _config.TableViewPaths!,
                    ModelHandler = _config.ModelHandler!
                }
            };
            var builder = new TableColumnModelBuilder<T, TKey>(config, _serviceProvider);
            configure?.Invoke(builder);
            var columnModel = await builder.Build();
            _config.Columns.Add(columnModel);
        });
        return this;
    }

    /// <summary>
    /// Adds a TableColumnModel configured to be used as a display column
    /// </summary>
    /// <param name="header"></param>
    /// <param name="configure"></param>
    /// <returns></returns>
    public TableModelBuilder<T, TKey> AddDisplayColumn(string header, Action<TableColumnModelBuilder<T, TKey>>? configure = null)
    {
        AddBuildTask(async () =>
        {
            var config = new TableColumnModelConfig<T, TKey>
            {
                Display = new TableColumnDisplayOptions
                {
                    Header = header,
                    ColumnType = ColumnType.Display
                },
                Behavior = new TableColumnBehaviorOptions
                {
                    Sortable = false,
                    Filterable = false
                },
                DataOptions = new TableColumnDataOptions<T, TKey>
                {
                    Paths = _config.TableViewPaths!,
                    ModelHandler = _config.ModelHandler!
                }
            };
            var builder = new TableColumnModelBuilder<T, TKey>(config, _serviceProvider);
            configure?.Invoke(builder);
            var columnModel = await builder.Build();
            _config.Columns.Add(columnModel);
        });
        return this;
    }

    public TableModelBuilder<T, TKey> AddCrudDisplayColumn(string header = "Actions")
    {
        return AddDisplayColumn("Actions", col => col.WithCrudActions());
    }


    public TableModelBuilder<T, TKey> WithActions(Action<TableModel<T, TKey>, ActionSetBuilder> actionsFactory)
    {
        AddBuildTask(() =>
        {
            _config.ActionsFactories.Add(async (tableModel) =>
            {
                var actionSetBuilder = new ActionSetBuilder(_serviceProvider);
                actionsFactory.Invoke(tableModel, actionSetBuilder);
                var actionSet = await actionSetBuilder.Build();
                return actionSet.Items.Cast<ActionModel>();
            });
        });
        return this;
    }

    public TableModelBuilder<T, TKey> WithCrudActions()
    {
        var typeId = _config.TypeId!;
        return WithActions((table, actions) =>
            actions.AddAction(action => action
                .WithLabel("Add New")
                .WithIcon("fas fa-plus mr-1")
                .WithHxPost($"/Form/{typeId}/Table/Create")
        ));
    }

    public TableModelBuilder<T, TKey> WithTypeId(string typeId)
    {
        _config.TypeId = typeId;
        return this;
    }

    protected override Task<TableModel<T, TKey>> BuildImpl()
    {
        var model = new TableModel<T, TKey>(_config);
        foreach (var column in model.Columns)
        {
            column.Table = model;
        }
        return Task.FromResult(model);
    }
}
</file>

<file path="Htmx.Components/Services/ModelRegistry.cs">
using System.Linq.Expressions;
using Htmx.Components.Authorization;
using Htmx.Components.Extensions;
using Htmx.Components.Input;
using Htmx.Components.Models;
using Htmx.Components.Models.Builders;
using Htmx.Components.Models.Table;
using Htmx.Components.Table;

namespace Htmx.Components.Services;

public interface IModelRegistry
{
    void Register<T, TKey>(string typeId, Action<IServiceProvider, ModelHandlerBuilder<T, TKey>> config)
        where T : class, new();
    Task<ModelHandler> GetModelHandler(string typeId, ModelUI modelUI);
    Task<ModelHandler<T, TKey>> GetModelHandler<T, TKey>(string typeId, ModelUI modelUI)
        where T : class;
}

public class ModelRegistry : IModelRegistry
{
    private readonly Dictionary<string, Task<ModelHandler>> _modelHandlers = new();
    private readonly TableViewPaths _tableViewPaths;
    private readonly IServiceProvider _serviceProvider;
    private readonly IResourceOperationRegistry _resourceOperationRegistry;

    public ModelRegistry(TableViewPaths tableViewPaths, IServiceProvider serviceProvider,
        IResourceOperationRegistry resourceOperationRegistry)
    {
        _tableViewPaths = tableViewPaths;
        _serviceProvider = serviceProvider;
        _resourceOperationRegistry = resourceOperationRegistry;
    }

    public void Register<T, TKey>(string typeId, Action<IServiceProvider, ModelHandlerBuilder<T, TKey>> config)
        where T : class, new()
    {
        var builder = new ModelHandlerBuilder<T, TKey>(_serviceProvider, typeId, _tableViewPaths, _resourceOperationRegistry);
        config.Invoke(_serviceProvider, builder);
        var castTask = async () =>
        {
            var modelHandler = await builder.Build();
            return (ModelHandler)modelHandler;
        };
        _modelHandlers[typeId] = castTask();
    }

    public async Task<ModelHandler> GetModelHandler(string typeId, ModelUI modelUI)
    {
        var task = _modelHandlers.TryGetValue(typeId, out var handler) ? handler : null;
        if (task == null)
        {
            throw new InvalidOperationException($"Model handler for typeId '{typeId}' not found.");
        }
        var modelHandler = await task;
        modelHandler.ModelUI = modelUI;
        return modelHandler;
    }

    public async Task<ModelHandler<T, TKey>> GetModelHandler<T, TKey>(string typeId, ModelUI modelUI)
        where T : class
    {
        var handler = await GetModelHandler(typeId, modelUI);
        if (handler is ModelHandler<T, TKey> typedHandler)
        {
            return typedHandler;
        }
        throw new InvalidOperationException($"Model handler for typeId '{typeId}' is not of type '{typeof(ModelHandler<T, TKey>)}'.");
    }
}
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableBody.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel

<tbody id="table-body" hx-ext="tableinline">
    @foreach (var rowContext in Model.Rows)
    {
        // individual rows are split out into separate view in order to support single-row editing  
        @await Html.PartialAsync(Model.TableViewPaths.Row, (Model, rowContext))
    }
</tbody>
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableCell.cshtml">
@using Htmx.Components.Models.Table
@using System.Text.Encodings.Web

@model TableCellPartialModel

@{
    var value = Model.Column.GetValue(Model.Row);
    var isEditing = Model.Column.IsEditable && Model.Row.IsEditing;
}

@if (isEditing)
{
    var inputModel = await Model.Column.GetInputModel(Model.Row);
    @await Html.PartialAsync("_Input", inputModel)
}
else
{
    @Html.Encode(value?.ToString())
}
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TablePagination.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel
<div id="table-pagination">
    <div class="flex justify-center items-center mt-4 space-x-2">
        <button class="btn btn-sm" 
                hx-post="@Url.Action("SetPage", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-vals='{"page": 1}'
                disabled="@(Model.State.Page <= 1)"
                hx-disabled-elt="this">First</button>
        <button class="btn btn-sm" 
                hx-post="@Url.Action("SetPage", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-vals='{"page": @(Model.State.Page - 1)}'
                disabled="@(Model.State.Page <= 1)"
                hx-disabled-elt="this">Prev</button>

        <input type="number" min="1" max="@Model.PageCount"
                id="table-page"
                name="page"
                class="input input-bordered input-sm text-left w-16"
                value="@Model.State.Page"
                hx-post="@Url.Action("SetPage", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-trigger="change, input changed delay:500ms"
                />

        <select class="select select-bordered select-sm w-16"
                id="table-page-Size"
                name="pageSize"
                hx-post="@Url.Action("SetPageSize", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-trigger="change">
                <option value="10" selected="@(Model.State.PageSize == 10)">10</option>
                <option value="25" selected="@(Model.State.PageSize == 25)">25</option>
                <option value="50" selected="@(Model.State.PageSize == 50)">50</option>
                <option value="100" selected="@(Model.State.PageSize == 100)">100</option>
        </select>

        <button class="btn btn-sm" 
                hx-post="@Url.Action("SetPage", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-vals='{"page": @(Model.State.Page + 1)}'
                disabled="@(Model.State.Page >= Model.PageCount)"
                hx-disabled-elt="this">Next</button>
        <button class="btn btn-sm" 
                hx-post="@Url.Action("SetPage", "Form", new { typeId = Model.TypeId })"
                hx-swap="none"
                hx-vals='{"page": @Model.PageCount}'
                disabled="@(Model.State.Page >= Model.PageCount)"
                hx-disabled-elt="this">Last</button>
    </div>
</div>
</file>

<file path="Htmx.Components/Views/Shared/Components/Table/_TableHeader.cshtml">
@using Htmx.Components.Models.Table
@model ITableModel

<tr id="table-header">
    @foreach (var column in Model.Columns)
    {
        if (column.Sortable)
        {
            var isCurrentSort = Model.State.SortColumn == column.Header;
            var nextSortDirection = isCurrentSort && Model.State.SortDirection == "asc" ? "desc" : "asc";
            var indicator = isCurrentSort ? (Model.State.SortDirection == "asc" ? "▲" : "▼") : "";
            <th>
                <a href="#" hx-post="@Url.Action("SetSort", "Form", new { typeId = Model.TypeId })"
                    hx-vals='{"column": "@column.Header", "direction": "@nextSortDirection"}' hx-swap="none">
                    @column.Header @indicator
                </a>
            </th>
        }
        else
        {
            <th>
                @column.Header
            </th>
        }
    }
</tr>
</file>

<file path="CruSibyl.Web/CruSibyl.Web.csproj">
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>5fa41bbc-8416-4e4f-9b42-08fbf7dccc8d</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.OpenIdConnect" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CruSibyl.Core\CruSibyl.Core.csproj" />
    <ProjectReference Include="..\Htmx.Components\Htmx.Components.csproj" />
  </ItemGroup>

  <!-- Only run build:css when cshtml files have been edited -->
  <PropertyGroup>
    <TailwindOutputFile>wwwroot/css/site.css</TailwindOutputFile>
    <!-- Use project reference if Table project exists -->
    <HtmxProjectDir>../Htmx.Components</HtmxProjectDir>
    <HtmxViews Condition="Exists('$(HtmxProjectDir)/Views')">$(HtmxProjectDir)/Views</HtmxViews>
  </PropertyGroup>
  <ItemGroup>
    <TailwindSources Include="Views/**/*.cshtml" />
    <TailwindSources Include="$(HtmxViews)/**/*.cshtml" Condition="Exists('$(HtmxViews)')" />
  </ItemGroup>
  <Target Name="BuildTailwind" BeforeTargets="Build" Inputs="@(TailwindSources)" Outputs="$(TailwindOutputFile)">
    <Exec Command="cd $(ProjectDir)Tools &amp;&amp; npm run build:css" />
  </Target>

  <!-- Only run npm install when package.json has been modified or .install-stamp doesn't exist -->
  <PropertyGroup>
    <NpmInstallStampFile>Tools/node_modules/.install-stamp</NpmInstallStampFile>
  </PropertyGroup>
  <Target Name="EnsureNpmPackages" BeforeTargets="BuildTailwind" Inputs="Tools\package.json" Outputs="$(NpmInstallStampFile)">
    <Exec Command="npm install" WorkingDirectory="Tools" />
    <Touch Files="$(NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

</Project>
</file>

<file path="Htmx.Components/Extensions/ServiceCollectionExtensions.cs">
using System.Security.Claims;
using Htmx.Components.Authorization;
using Htmx.Components.Filters;
using Htmx.Components.Models.Builders;
using Htmx.Components.Models.Table;
using Htmx.Components.NavBar;
using Htmx.Components.Services;
using Htmx.Components.State;
using Htmx.Components.Table;
using Htmx.Components.ViewResults;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.Razor;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace Htmx.Components;

public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddHtmxComponents(this IServiceCollection services, Action<HtmxComponentOptions>? configure = null)
    {
        services.AddSafeActionContextAccessor(nameof(AddHtmxComponents));
        services.AddHttpContextAccessor();
        services.AddTransient<HtmxResultBuilder>();
        services.Configure<RazorViewEngineOptions>(options =>
        {
            options.ViewLocationFormats.Add("/Views/Shared/Components/Table/{0}.cshtml");
        });

        var options = new HtmxComponentOptions();
        configure?.Invoke(options);

        services.AddSingleton(options.TableViewPaths);
        services.AddScoped<ITableProvider, TableProvider>();
        services.AddMemoryCache();
        services.Configure<AuthorizationMetadataSettings>(settings =>
        {
            settings.UserIdClaimType = options.UserIdClaimType;
        });
        services.AddScoped<IAuthorizationMetadataService, AuthorizationMetadataService>();
        

        if (options.NavProviderFactory is not null)
        {
            services.AddScoped<INavProvider, BuilderBasedNavProvider>(options.NavProviderFactory);
        }
        else
        {
            services.AddScoped<INavProvider, AttributeNavProvider>();
        }

        if (options.ModelRegistryFactory is not null)
        {
            services.AddScoped<IModelRegistry>(options.ModelRegistryFactory);
        }

        services.AddScoped<IPageState, PageState>();
        services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();
        services.AddDataProtection();
        services.AddScoped<TableOobRefreshFilter>();
        services.AddScoped<PageStateOobInjectorFilter>();
        services.AddScoped<TableOobEditFilter>();
        services.AddScoped<NavActionResultFilter>();

        services.PostConfigure<MvcOptions>(options =>
        {
            // Be sure to place filters that convert models to MultiSwapViewResults before the filters that inject OOB content.
            options.Filters.AddService<TableOobRefreshFilter>();
            options.Filters.AddService<TableOobEditFilter>();
            options.Filters.AddService<NavActionResultFilter>();
            options.Filters.AddService<PageStateOobInjectorFilter>();
        });

        if (options.RegisterPermissionRequirementFactory == null
            && !services.Any(sd => sd.ServiceType == typeof(IPermissionRequirementFactory)))
        {
            throw new InvalidOperationException(
                $"{nameof(HtmxComponentOptions)}.{nameof(HtmxComponentOptions.WithPermissionRequirementFactory)}() must be called to register a permission requirement factory.");
        }
        options.RegisterPermissionRequirementFactory!(services);

        if (options.RegisterResourceOperationRegistry == null
            && !services.Any(sd => sd.ServiceType == typeof(IResourceOperationRegistry)))
        {
            throw new InvalidOperationException(
                $"{nameof(HtmxComponentOptions)}.{nameof(HtmxComponentOptions.WithResourceOperationRegistry)}() must be called to register a resource operation registry.");
        }
        options.RegisterResourceOperationRegistry!(services);

        return services;
    }

    public static IMvcBuilder AddHtmxComponentsApplicationPart(this IMvcBuilder builder)
    {
        builder.Services.AddSingleton<HtmxComponentsApplicationPartMarker>();
        builder.AddApplicationPart(typeof(ServiceCollectionExtensions).Assembly);
        return builder;
    }

    public static IMvcCoreBuilder AddHtmxComponentsApplicationPart(this IMvcCoreBuilder builder)
    {
        builder.Services.AddSingleton<HtmxComponentsApplicationPartMarker>();
        builder.AddApplicationPart(typeof(ServiceCollectionExtensions).Assembly);
        return builder;
    }

    public static IServiceCollection AddSafeActionContextAccessor(this IServiceCollection services,
        string extensionMethodName = nameof(AddSafeActionContextAccessor))
    {
        // IActionContextAccessor needs to be registered prior to MVC infrastructure in order to be properly initialized.
        // Look for a few known MVC types that imply AddMvc() or AddControllers() has already run
        bool mvcAlreadyRegistered = services.Any(sd =>
            sd.ServiceType.FullName?.StartsWith("Microsoft.AspNetCore.Mvc.Infrastructure") == true ||
            sd.ServiceType == typeof(Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory) ||
            sd.ImplementationType?.FullName?.StartsWith("Microsoft.AspNetCore.Mvc") == true
        );

        if (mvcAlreadyRegistered)
        {
            throw new InvalidOperationException(
                $"IActionContextAccessor must be registered before MVC. " +
                $"Call {extensionMethodName}() before AddControllers() or AddMvc()."
            );
        }

        // There isn't an equivalent of AddHttpContextAccessor for IActionContextAccessor, but it just amounts to this...
        services.TryAddSingleton<IActionContextAccessor, ActionContextAccessor>();

        return services;
    }
}

/// <summary>
/// Marker class to ensure that AddHtmxComponentsApplicationPart() is called
/// </summary>
internal class HtmxComponentsApplicationPartMarker { }


public class HtmxComponentOptions
{
    internal Func<IServiceProvider, BuilderBasedNavProvider>? NavProviderFactory { get; private set; }
    internal TableViewPaths TableViewPaths { get; private set; } = new TableViewPaths();
    internal Func<IServiceProvider, ModelRegistry>? ModelRegistryFactory { get; private set; }
    internal Action<IServiceCollection>? RegisterPermissionRequirementFactory { get; private set; }
    internal Action<IServiceCollection>? RegisterResourceOperationRegistry { get; private set; }
    internal string UserIdClaimType { get; set; } = ClaimTypes.NameIdentifier;

    public HtmxComponentOptions WithUserIdClaimType(string claimType)
    {
        UserIdClaimType = claimType;
        return this;
    }

    public HtmxComponentOptions WithNavBuilder(Func<ActionSetBuilder, Task> builderFactory)
    {
        NavProviderFactory = serviceProvider =>
        {
            var actionSetBuilder = new ActionSetBuilder(serviceProvider);
            return new BuilderBasedNavProvider(serviceProvider, builderFactory);
        };
        return this;
    }

    public HtmxComponentOptions WithNavBuilder(Action<ActionSetBuilder> builderFactory)
    {
        NavProviderFactory = serviceProvider =>
        {
            var funcBuilderFactory = new Func<ActionSetBuilder, Task>(builder =>
            {
                builderFactory(builder);
                return Task.CompletedTask;
            });
            return new BuilderBasedNavProvider(serviceProvider, funcBuilderFactory);
        };
        return this;
    }

    public HtmxComponentOptions WithTableOverrides(Action<TableViewPaths> configure)
    {
        configure(TableViewPaths);
        return this;
    }

    public HtmxComponentOptions WithModelHandlerRegistry(Action<IModelRegistry, IServiceProvider> configure)
    {
        ModelRegistryFactory = serviceProvider =>
        {
            var tableViewPaths = serviceProvider.GetRequiredService<TableViewPaths>();
            var resourceOperationRegistry = serviceProvider.GetRequiredService<IResourceOperationRegistry>();
            var modelRegistry = new ModelRegistry(tableViewPaths, serviceProvider, resourceOperationRegistry);
            configure(modelRegistry, serviceProvider);
            return modelRegistry;
        };
        return this;
    }

    public void WithPermissionRequirementFactory<T>()
        where T : class, IPermissionRequirementFactory
    {
        RegisterPermissionRequirementFactory = services =>
        {
            services.AddSingleton<IPermissionRequirementFactory, T>();
        };
    }

    public void WithResourceOperationRegistry<T>()
        where T : class, IResourceOperationRegistry
    {
        RegisterResourceOperationRegistry = services =>
        {
            services.AddScoped<IResourceOperationRegistry, T>();
        };
    }
}
</file>

<file path="CruSibyl.Web/Views/Shared/_Layout.cshtml">
@using Htmx.Components.State
@using Microsoft.Extensions.Configuration
@using CruSibyl.Core.Services
@inject IConfiguration Configuration
@inject IUserService UserService
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@inject IPageState PageState

<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="htmx-config" historyCacheSize="20" indicatorClass="htmx-indicator" includeAspNetAntiforgeryToken="true" />
  <base href="/" />
  <title>CruSibyl</title>

  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css">
  <link rel="stylesheet" href="./css/site.css">
  <link rel="stylesheet" href="~/_content/Htmx.Components/css/table-overrides.css">
  @RenderSection("Styles", required: false)
  <script src="./js/htmx.min.js"></script>
  <script src="~/_content/Htmx.Components/js/table-behavior.js" defer></script>
  <script src="~/_content/Htmx.Components/js/page-state-behavior.js"></script>
  <script src="~/_content/Htmx.Components/js/htmx-auth-retry.js" defer></script>
</head>

@* <body hx-ext="multi-swap"> *@

<body class="min-h-screen flex flex-col">
  <div class="flex-1 flex flex-col">
    <header>
    </header>

    @await Component.InvokeAsync("NavBar")

    <main id="tab-content" class="px-4 flex-1 pb-8">
      @RenderBody() @* Initial content - first tab loads by default *@
    </main>
  </div>

  <footer class="bg-gray-800 text-white p-4 text-center sticky bottom-0">
    <p class="text-sm">
      Copyright &copy; <span id="copywrite-year"></span> The Regents of the University of California, Davis campus.
      All rights reserved. <br>
      <a href="https://wiki.cse.ucdavis.edu/support/contact/home" target="_blank"
        class="text-blue-400 hover:underline">Questions? Contact Us</a>
    </p>
  </footer>


  @Html.HtmxAntiforgeryScript()

  <htmx-page-state></htmx-page-state>

  @RenderSection("Scripts", required: false)
</body>

</html>
</file>

<file path="Htmx.Components/Components/Table/TableProvider.cs">
using System.Data;
using System.Linq.Expressions;
using FastExpressionCompiler;
using Htmx.Components.Extensions;
using Htmx.Components.Models;
using Htmx.Components.ViewResults;
using Htmx.Components.State;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Htmx.Components.Models.Table;

namespace Htmx.Components.Table;

public interface ITableProvider
{
    /// <summary>
    /// Uses the given columns and tableState to extend the given queryable for appropriate
    /// filtering and sorting, and then executes the query twice; once with .CountAsync() so that
    /// PageCount can be calculated, and once with pagination applied. Places the results in the
    /// given <see cref="TableModel{T, TKey}"/>. The queryable is expected to be an EF Core queryable.
    /// </summary>
    Task FetchPage<T, TKey>(
        TableModel<T, TKey> tableModel,
        IQueryable<T> query,
        TableState tableState)
        where T : class;
}

public enum EditAction
{
    Create,
    Update,
    Delete,
}

public enum EditStatus
{
    Requested,
    Completed,
    Cancelled,
}

public class TableProvider : ITableProvider
{
    private readonly IPageState _pageState;

    public TableProvider(IPageState pageState)
    {
        _pageState = pageState;
    }

    /// <summary>
    /// Uses the given columns and tableState to extend the given queryable for appropriate
    /// filtering and sorting, and then executes the query twice; once with .CountAsync() so that
    /// PageCount can be calculated, and once with pagination applied. Places the results in the
    /// given <see cref="TableModel{T, TKey}"/>. The queryable is expected to be an EF Core queryable.
    /// </summary>
    public async Task FetchPage<T, TKey>(
        TableModel<T, TKey> tableModel,
        IQueryable<T> query,
        TableState tableState)
        where T : class
    {
        query = ApplyFiltering(query, tableState, tableModel);
        query = ApplyRangeFiltering(query, tableState, tableModel);
        query = ApplySorting(query, tableState, tableModel);

        var totalCount = await query.CountAsync();
        var pageCount = (int)Math.Ceiling((double)totalCount / tableState.PageSize);
        // make sure we're not trying to exceed the available pages
        tableState.Page = Math.Min(tableState.Page, pageCount);
        var pagedData = await query
            .Skip(Math.Max(tableState.Page - 1, 0) * tableState.PageSize)
            .Take(tableState.PageSize)
            .ToListAsync();

        var keySelector = tableModel.KeySelector.CompileFast();

        tableModel.State = tableState;
        tableModel.PageCount = pageCount;
        tableModel.Rows = pagedData.Select((item, index) =>
        {
            var key = keySelector(item);
            var rowContext = new TableRowContext<T, TKey>
            {
                Item = item,
                ModelHandler = tableModel.ModelHandler,
                PageIndex = tableState.Page - 1,
                Key = key
            };
            return rowContext;
        }).ToList();        
    }

    private IQueryable<T> ApplyRangeFiltering<T, TKey>(IQueryable<T> queryable, TableState tableState, TableModel<T, TKey> tableModel)
        where T : class
    {
        // Find and pass any query param range filter values to their corresponding column range filter delegate
        // to apply it to the query
        if (tableState.RangeFilters != null)
        {
            foreach (var rangeFilter in tableState.RangeFilters.Where(f => !string.IsNullOrWhiteSpace(f.Value.Min)
                    && !string.IsNullOrWhiteSpace(f.Value.Max)))
            {
                var column = tableModel.Columns.FirstOrDefault(c => c.Header == rangeFilter.Key);
                if (column?.RangeFilter != null)
                {
                    queryable = column.RangeFilter(queryable, rangeFilter.Value.Min, rangeFilter.Value.Max);
                }
            }
        }

        return queryable;
    }

    private IQueryable<T> ApplyFiltering<T, TKey>(IQueryable<T> query, TableState tableState, TableModel<T, TKey> tableModel)
        where T: class
    {
        // Find and pass any tableState filter values to their corresponding column filter delegate
        // to apply it to the query
        if (tableState.Filters != null)
        {
            foreach (var filter in tableState.Filters.Where(f => !string.IsNullOrWhiteSpace(f.Value)))
            {
                var column = tableModel.Columns.FirstOrDefault(c => c.Header == filter.Key);
                if (column?.Filter != null)
                {
                    query = column.Filter(query, filter.Value);
                }
            }
        }

        return query;
    }

    private IQueryable<T> ApplySorting<T, TKey>(IQueryable<T> query, TableState tableState, TableModel<T, TKey> tableModel)
        where T : class
    {
        // In order for pagination to be consistent, we need to always define a sort.
        if (!string.IsNullOrEmpty(tableState.SortColumn))
        {
            var column = tableModel.Columns.FirstOrDefault(c => c.Header == tableState.SortColumn);
            if (column != null)
            {
                query = tableState.SortDirection == "asc"
                    ? query.OrderBy(column.SelectorExpression)
                    : query.OrderByDescending(column.SelectorExpression);
            }
        }
        else
        {
            // Since no sort is specified, we'll just sort by the first selector column
            var column = tableModel.Columns.FirstOrDefault(c => c.SelectorExpression != null);
            if (column == null)
                throw new InvalidOperationException("No selector column found for default sorting.");
            query = query.OrderBy(column.SelectorExpression);
        }

        return query;
    }

}
</file>

<file path="CruSibyl.Web/Program.cs">
using System.Diagnostics;
using CruSibyl.Core.Data;
using CruSibyl.Core.Models;
using CruSibyl.Core.Models.Settings;
using CruSibyl.Core.Services;
using CruSibyl.Web.Configuration;
using CruSibyl.Web.Extensions;
using CruSibyl.Web.Middleware;
using CruSibyl.Web.Middleware.Auth;
using Htmx.Components;
using Htmx.Components.Configuration;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Protocols.OpenIdConnect;
using Microsoft.IdentityModel.Tokens;
using Serilog;
using Serilog.Events;
using Serilog.Exceptions;
using Serilog.Sinks.Elasticsearch;

#if DEBUG
Serilog.Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg));
#endif

var appBuilder = WebApplication.CreateBuilder(args);

var loggingSection = appBuilder.Configuration.GetSection("Serilog");

// configure logging as delegate so it can be applied to both Log.Logger and appBuilder.Host.UseSerilog()
var configureLogging = (LoggerConfiguration cfg) =>
{
    cfg.MinimumLevel.Debug()
        .MinimumLevel.Override("Microsoft", LogEventLevel.Information)
        // .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Warning) // uncomment this to hide EF core general info logs
        .MinimumLevel.Override("Microsoft.AspNetCore", LogEventLevel.Warning)
        .MinimumLevel.Override("System", LogEventLevel.Warning)
        .Enrich.FromLogContext()
        .Enrich.With()
        .Enrich.WithExceptionDetails()
        .Enrich.WithProperty("Application", loggingSection.GetValue<string>("AppName"))
        .Enrich.WithProperty("AppEnvironment", loggingSection.GetValue<string>("Environment"))
        .WriteTo.Console();

    // add in elastic search sink if the uri is valid
    if (Uri.TryCreate(loggingSection.GetValue<string>("ElasticUrl"), UriKind.Absolute, out var elasticUri))
    {
        cfg.WriteTo.Elasticsearch(new ElasticsearchSinkOptions(elasticUri)
        {
            IndexFormat = "aspnet-crusibyl-{0:yyyy.MM}",
            TypeName = null,
        });
    }

    return cfg;
};

Log.Logger = configureLogging(new LoggerConfiguration()).CreateBootstrapLogger();

try
{
    Log.Information("Starting web host");
    appBuilder.Host.UseSerilog((ctx, lc) => configureLogging(lc));

    // Add services to the container.

    appBuilder.Services.AddHtmxComponents(htmxOptions =>
    {
        // htmxOptions.WithNavBuilder(NavConfig.RegisterNavigation);
        htmxOptions.WithModelHandlerRegistry(
            // ModelRegistryConfig.RegisterModels
            (registry, serviceProvider) =>
            {
                ModelHandlerAttributeRegistrar.RegisterAll(registry);
            }
        );
        htmxOptions.WithPermissionRequirementFactory<PermissionRequirementFactory>();
        htmxOptions.WithResourceOperationRegistry<ResourceOperationRegistry>();
        htmxOptions.WithUserIdClaimType(UserService.IamIdClaimType);
    });

    appBuilder.Services.AddControllersWithViews(options =>
    {
        options.Filters.Add<SerilogControllerActionFilter>();
    })
    .AddHtmxComponentsApplicationPart();

    appBuilder.Services.AddEndpointsApiExplorer();
    appBuilder.Services.AddSwaggerGen();
    appBuilder.Services.AddAuthentication(options =>
    {
        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
        options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
    })
    .AddCookie()
    .AddOpenIdConnect(oidc =>
    {
        oidc.ClientId = appBuilder.Configuration["Authentication:ClientId"];
        oidc.ClientSecret = appBuilder.Configuration["Authentication:ClientSecret"];
        oidc.Authority = appBuilder.Configuration["Authentication:Authority"];
        oidc.ResponseType = OpenIdConnectResponseType.Code;
        oidc.Scope.Add("openid");
        oidc.Scope.Add("profile");
        oidc.Scope.Add("email");
        oidc.Scope.Add("eduPerson");
        oidc.TokenValidationParameters = new TokenValidationParameters
        {
            NameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
        };
        oidc.ConfigureHtmxAuthPopup("/auth/popup-login");
        oidc.AddIamFallback();
    });


    appBuilder.Services.AddAuthorization(options =>
    {
        options.AddAccessPolicy(AccessPolicies.SystemAccess);
        options.AddAccessPolicy(AccessPolicies.AdminAccess);
    });
    appBuilder.Services.AddScoped<IAuthorizationHandler, PermissionHandler>();

    DBContextConfig.Configure(appBuilder, out var migrationScaffoldRequested);

    appBuilder.Services.Configure<AuthSettings>(appBuilder.Configuration.GetSection("Authentication"));

    appBuilder.Services.AddScoped<IIdentityService, IdentityService>();
    appBuilder.Services.AddScoped<IUserService, UserService>();
    appBuilder.Services.AddHttpContextAccessor();


    WebApplication app = null!;

    try
    {
        app = appBuilder.Build();
    }
    catch (HostAbortedException)
    {
        // swallow exception and return early when generating a new migration
        if (migrationScaffoldRequested)
        {
            return 0;
        }
        throw;
    }

    // ensure db is up to date
    using (var scope = app.Services.CreateScope())
    {
        var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
        var recreateDb = appBuilder.Configuration.GetValue<bool>("Dev:RecreateDb");

        if (recreateDb)
        {
            dbContext.Database.EnsureDeleted();
            dbContext.Dispose();
        }

        dbContext.Database.Migrate();

        var initializeUsers = app.Configuration.GetValue<bool>("Dev:InitializeUsers");
        var initializer = new DbInitializer(dbContext);

        if (initializeUsers)
        {
            initializer.InitializeUsers(recreateDb).GetAwaiter().GetResult();
        }
        else
        {
            initializer.CheckAndCreateRoles().GetAwaiter().GetResult();
        }
    }


    // Configure the HTTP request pipeline.
    if (app.Environment.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseSwagger();
        app.UseSwaggerUI();
    }
    else
    {
        app.UseExceptionHandler("/Error");
        // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
        app.UseHsts();
    }


    app.UseHttpsRedirection();
    app.UseStaticFiles();
    app.UseHtmxPageState();
    app.UseRouting();

    app.UseAuthentication();
    app.UseAuthorization();

    // app.UseMiddleware<LogUserNameMiddleware>();
    app.UseSerilogRequestLogging();

    // default for MVC server-side endpoints
    app.MapControllerRoute(
        name: "default",
        pattern: "{controller}/{action}/{id?}",
        defaults: new { controller = "Dashboard", action = "Index" },
        constraints: new { controller = "(dashboard|admin)" }
    );

    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "Unhandled exception");
    return 1;
}
finally
{
    Log.Information("Shut down complete");
    Log.CloseAndFlush();
}

return 0;
</file>

<file path="CruSibyl.Web/Controllers/AdminController.cs">
using Azure;
using CruSibyl.Core.Data;
using CruSibyl.Core.Domain;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Htmx.Components.Table;
using Htmx;
using Htmx.Components;
using Htmx.Components.Models;
using Htmx.Components.ViewResults;
using Htmx.Components.Services;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using System.Text.Json;
using Htmx.Components.Models.Table;
using Htmx.Components.Attributes;
using Htmx.Components.Models.Builders;
using Result = Htmx.Components.Models.Result;

namespace CruSibyl.Web.Controllers;

[Authorize]
[Route("Admin")]
[NavActionGroup(DisplayName = "Admin", Icon = "fas fa-cogs", Order = 1)]
public class AdminController : TabController
{
    private readonly AppDbContext _dbContext;
    private readonly ITableProvider _tableProvider;

    public AdminController(AppDbContext dbContext, ITableProvider tableProvider)
    {
        _dbContext = dbContext;
        _tableProvider = tableProvider;
    }

    [HttpGet]
    [NavAction(DisplayName = "Repos", Icon = "fas fa-database", Order = 0, PushUrl = true, ViewName = "_Content")]
    public async Task<IActionResult> Index([FromServices] IModelRegistry modelRegistry)
    {
        var pageState = this.GetPageState();
        var tableState = new TableState();
        pageState.Set("Table", "State", tableState);

        var modelHandler = await modelRegistry.GetModelHandler<Repo, int>(nameof(Repo), ModelUI.Table);
        var tableModel = await modelHandler.BuildTableModel();
        await _tableProvider.FetchPage(tableModel, _dbContext.Repos, tableState);

        return Ok(tableModel);
    }



    [ModelConfig("Repo")]
    private void ConfigureRepo(ModelHandlerBuilder<Repo, int> builder)
    {
        builder
            .WithKeySelector(r => r.Id)
            .WithQueryable(() => _dbContext.Repos)
            .WithCreate(async repo =>
            {
                _dbContext.Repos.Add(repo);
                await _dbContext.SaveChangesAsync();
                return Htmx.Components.Models.Result.Ok();
            })
            .WithUpdate(async repo =>
            {
                _dbContext.Repos.Update(repo);
                await _dbContext.SaveChangesAsync();
                return Htmx.Components.Models.Result.Ok();
            })
            .WithDelete(async id =>
            {
                var repo = await _dbContext.Repos.FindAsync(id);
                if (repo != null)
                {
                    _dbContext.Repos.Remove(repo);
                    await _dbContext.SaveChangesAsync();
                    return Htmx.Components.Models.Result.Ok();
                }
                return Htmx.Components.Models.Result.Error("Repo not found");
            })
            .WithInput(r => r.Name, config => config
                    .WithLabel("Name")
                    .WithPlaceholder("Enter repo name")
                    .WithCssClass("form-control"))
                .WithInput(r => r.Description, config => config
                    .WithLabel("Description")
                    .WithPlaceholder("Enter repo description")
                    .WithCssClass("form-control"))
                .WithTable(table => table
                    .WithCrudActions()
                    .AddSelectorColumn("Name", x => x.Name, config => config
                        .WithEditable()
                        .WithFilter((q, val) => q.Where(x => x.Name.Contains(val))))
                    .AddSelectorColumn("Description", x => x.Description!, config => config
                        .WithEditable())
                    .AddCrudDisplayColumn());
    }
}
</file>

</files>
